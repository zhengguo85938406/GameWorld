// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "t3db.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace T3DB {

namespace {

const ::google::protobuf::Descriptor* KPBRoleBaseHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBRoleBaseHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBROLE_POSITION_DB_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBROLE_POSITION_DB_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBRoleBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBRoleBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBROLE_LIST_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBROLE_LIST_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBRoleDataHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBRoleDataHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBRoleBlockHeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBRoleBlockHeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_ROLE_STATE_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_ROLE_STATE_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_USER_ROLE_GENERATOR_PARAM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_USER_ROLE_GENERATOR_PARAM_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_ROLE_GENERATOR_PARAM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_ROLE_GENERATOR_PARAM_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_HERO_DATA_LIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_HERO_DATA_LIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_HERO_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_HERO_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_BUFF_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_BUFF_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_BUFF_DATA_LIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_BUFF_DATA_LIST_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_ROLE_MONEY_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_ROLE_MONEY_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_ACCEPT_QUEST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_ACCEPT_QUEST_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_DAILY_QUEST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_DAILY_QUEST_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_DAILY_QUEST_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_DAILY_QUEST_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_HEROTRAINING_DATA_HEADER_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_HEROTRAINING_DATA_HEADER_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_HEROTRAINING_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_HEROTRAINING_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_ONE_MISSION_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_ONE_MISSION_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_MISSION_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_MISSION_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_MAKING_MACHINE_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_MAKING_MACHINE_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_UPGRADE_NODE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_UPGRADE_NODE_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_UPGRADE_QUEUE_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_UPGRADE_QUEUE_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_USINGEQUIP_INFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_USINGEQUIP_INFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_GYM_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_GYM_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_STORE_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_STORE_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_BUSINESSSTREET_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_BUSINESSSTREET_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_REPORT_ITEM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_REPORT_ITEM_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_CHEERLEADING_ITEM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_CHEERLEADING_ITEM_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_CHEERLEADING_SLOTINFO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_CHEERLEADING_SLOTINFO_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_CHEERLEADING_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_CHEERLEADING_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBCommonItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBCommonItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_EQUI_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_EQUI_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBCustomData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBCustomData_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBHeroDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBHeroDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBPlayerPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBPlayerPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBHeroPackage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBHeroPackage_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBMoneyMgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBMoneyMgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBUserPreferences_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBUserPreferences_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_COOLDOWN_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_COOLDOWN_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_COOLDOWN_LIST_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_COOLDOWN_LIST_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBCDTimerList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBCDTimerList_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBQuestList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBQuestList_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBHeroTrainingMgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBHeroTrainingMgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBMissionData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBMissionData_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBMakingMachine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBMakingMachine_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBUpgradeQueue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBUpgradeQueue_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBGym_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBGym_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBBusinessStreet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBBusinessStreet_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBSecretary_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBSecretary_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBCheerleadingMgr_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBCheerleadingMgr_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPBWardrobe_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPBWardrobe_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_WARDROBE_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_WARDROBE_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_FASHION_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_FASHION_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_PLAYER_VALUE_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_PLAYER_VALUE_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_TeamLogo_Info_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_TeamLogo_Info_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_TEAMLOGO_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_TEAMLOGO_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_ACHIEVEMENT_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_ACHIEVEMENT_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_SAVE_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_SAVE_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_ACTIVE_PROC_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_ACTIVE_PROC_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_ACTIVEPLAYER_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_ACTIVEPLAYER_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_HERO_UNLOCK_DATA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_HERO_UNLOCK_DATA_reflection_ = NULL;
const ::google::protobuf::Descriptor* KPB_HERO_UNLOCK_DATA_LIST_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KPB_HERO_UNLOCK_DATA_LIST_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_t3db_2eproto() {
  protobuf_AddDesc_t3db_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "t3db.proto");
  GOOGLE_CHECK(file != NULL);
  KPBRoleBaseHeader_descriptor_ = file->message_type(0);
  static const int KPBRoleBaseHeader_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseHeader, version_),
  };
  KPBRoleBaseHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBRoleBaseHeader_descriptor_,
      KPBRoleBaseHeader::default_instance_,
      KPBRoleBaseHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBRoleBaseHeader));
  KPBROLE_POSITION_DB_descriptor_ = file->message_type(1);
  static const int KPBROLE_POSITION_DB_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBROLE_POSITION_DB, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBROLE_POSITION_DB, mapcopyindex_),
  };
  KPBROLE_POSITION_DB_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBROLE_POSITION_DB_descriptor_,
      KPBROLE_POSITION_DB::default_instance_,
      KPBROLE_POSITION_DB_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBROLE_POSITION_DB, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBROLE_POSITION_DB, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBROLE_POSITION_DB));
  KPBRoleBaseInfo_descriptor_ = file->message_type(2);
  static const int KPBRoleBaseInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, baseheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, currentpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, lastsavetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, totalgametime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, highestlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, vipexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, exp_),
  };
  KPBRoleBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBRoleBaseInfo_descriptor_,
      KPBRoleBaseInfo::default_instance_,
      KPBRoleBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBRoleBaseInfo));
  KPBROLE_LIST_INFO_descriptor_ = file->message_type(3);
  static const int KPBROLE_LIST_INFO_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBROLE_LIST_INFO, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBROLE_LIST_INFO, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBROLE_LIST_INFO, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBROLE_LIST_INFO, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBROLE_LIST_INFO, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBROLE_LIST_INFO, canrename_),
  };
  KPBROLE_LIST_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBROLE_LIST_INFO_descriptor_,
      KPBROLE_LIST_INFO::default_instance_,
      KPBROLE_LIST_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBROLE_LIST_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBROLE_LIST_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBROLE_LIST_INFO));
  KPBRoleDataHeader_descriptor_ = file->message_type(4);
  static const int KPBRoleDataHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleDataHeader, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleDataHeader, crc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleDataHeader, len_),
  };
  KPBRoleDataHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBRoleDataHeader_descriptor_,
      KPBRoleDataHeader::default_instance_,
      KPBRoleDataHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleDataHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleDataHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBRoleDataHeader));
  KPBRoleBlockHeader_descriptor_ = file->message_type(5);
  static const int KPBRoleBlockHeader_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBlockHeader, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBlockHeader, ver_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBlockHeader, len_),
  };
  KPBRoleBlockHeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBRoleBlockHeader_descriptor_,
      KPBRoleBlockHeader::default_instance_,
      KPBRoleBlockHeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBlockHeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBRoleBlockHeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBRoleBlockHeader));
  KPB_ROLE_STATE_INFO_descriptor_ = file->message_type(6);
  static const int KPB_ROLE_STATE_INFO_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, ladderlosingstreakcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, talkworlddailycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, lastheroexpdecreasedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, ailevelcoe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, curfatiguepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, vipendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, todaybuyfatiguepointtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, lastdailyrefreshtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, byvipautorepairflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, nlastchallengestep1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, nstartchallengestep1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, clubapplynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, nonlinegetawardtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, lastdailyrefreshtimezero_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, quitclubtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, nrandomquestindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, nskiprandomquesttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, firstpvp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, refusestranger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, nlastchallengestep2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, nstartchallengestep2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, ncurrentcity_),
  };
  KPB_ROLE_STATE_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_ROLE_STATE_INFO_descriptor_,
      KPB_ROLE_STATE_INFO::default_instance_,
      KPB_ROLE_STATE_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_STATE_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_ROLE_STATE_INFO));
  KPB_USER_ROLE_GENERATOR_PARAM_descriptor_ = file->message_type(7);
  static const int KPB_USER_ROLE_GENERATOR_PARAM_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_USER_ROLE_GENERATOR_PARAM, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_USER_ROLE_GENERATOR_PARAM, roletype_),
  };
  KPB_USER_ROLE_GENERATOR_PARAM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_USER_ROLE_GENERATOR_PARAM_descriptor_,
      KPB_USER_ROLE_GENERATOR_PARAM::default_instance_,
      KPB_USER_ROLE_GENERATOR_PARAM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_USER_ROLE_GENERATOR_PARAM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_USER_ROLE_GENERATOR_PARAM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_USER_ROLE_GENERATOR_PARAM));
  KPB_ROLE_GENERATOR_PARAM_descriptor_ = file->message_type(8);
  static const int KPB_ROLE_GENERATOR_PARAM_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_GENERATOR_PARAM, accountname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_GENERATOR_PARAM, groupid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_GENERATOR_PARAM, userparam_),
  };
  KPB_ROLE_GENERATOR_PARAM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_ROLE_GENERATOR_PARAM_descriptor_,
      KPB_ROLE_GENERATOR_PARAM::default_instance_,
      KPB_ROLE_GENERATOR_PARAM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_GENERATOR_PARAM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_GENERATOR_PARAM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_ROLE_GENERATOR_PARAM));
  KPB_HERO_DATA_LIST_descriptor_ = file->message_type(9);
  static const int KPB_HERO_DATA_LIST_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA_LIST, maxherocount_),
  };
  KPB_HERO_DATA_LIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_HERO_DATA_LIST_descriptor_,
      KPB_HERO_DATA_LIST::default_instance_,
      KPB_HERO_DATA_LIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA_LIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA_LIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_HERO_DATA_LIST));
  KPB_HERO_DATA_descriptor_ = file->message_type(10);
  static const int KPB_HERO_DATA_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, templateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, eol_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, ladderlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, ladderexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, ladderwincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, ladderlosecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, ladderdrawcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, freetalent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, talent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, fashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, fired_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, selectedactiveskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, selectedpassiveskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, selectednirvanaskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, selectedslamballskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, equipscore_),
  };
  KPB_HERO_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_HERO_DATA_descriptor_,
      KPB_HERO_DATA::default_instance_,
      KPB_HERO_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_HERO_DATA));
  KPB_BUFF_DATA_descriptor_ = file->message_type(11);
  static const int KPB_BUFF_DATA_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUFF_DATA, buffid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUFF_DATA, leftframe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUFF_DATA, activecount_),
  };
  KPB_BUFF_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_BUFF_DATA_descriptor_,
      KPB_BUFF_DATA::default_instance_,
      KPB_BUFF_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUFF_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUFF_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_BUFF_DATA));
  KPB_BUFF_DATA_LIST_descriptor_ = file->message_type(12);
  static const int KPB_BUFF_DATA_LIST_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUFF_DATA_LIST, buffdata_),
  };
  KPB_BUFF_DATA_LIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_BUFF_DATA_LIST_descriptor_,
      KPB_BUFF_DATA_LIST::default_instance_,
      KPB_BUFF_DATA_LIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUFF_DATA_LIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUFF_DATA_LIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_BUFF_DATA_LIST));
  KPB_ROLE_MONEY_DATA_descriptor_ = file->message_type(13);
  static const int KPB_ROLE_MONEY_DATA_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_MONEY_DATA, safeboxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_MONEY_DATA, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_MONEY_DATA, freecoin_),
  };
  KPB_ROLE_MONEY_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_ROLE_MONEY_DATA_descriptor_,
      KPB_ROLE_MONEY_DATA::default_instance_,
      KPB_ROLE_MONEY_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_MONEY_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ROLE_MONEY_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_ROLE_MONEY_DATA));
  KPB_ACCEPT_QUEST_descriptor_ = file->message_type(14);
  static const int KPB_ACCEPT_QUEST_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACCEPT_QUEST, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACCEPT_QUEST, questindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACCEPT_QUEST, questvalue_),
  };
  KPB_ACCEPT_QUEST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_ACCEPT_QUEST_descriptor_,
      KPB_ACCEPT_QUEST::default_instance_,
      KPB_ACCEPT_QUEST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACCEPT_QUEST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACCEPT_QUEST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_ACCEPT_QUEST));
  KPB_DAILY_QUEST_descriptor_ = file->message_type(15);
  static const int KPB_DAILY_QUEST_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_DAILY_QUEST, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_DAILY_QUEST, nextaccepttime_),
  };
  KPB_DAILY_QUEST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_DAILY_QUEST_descriptor_,
      KPB_DAILY_QUEST::default_instance_,
      KPB_DAILY_QUEST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_DAILY_QUEST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_DAILY_QUEST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_DAILY_QUEST));
  KPB_DAILY_QUEST_DATA_descriptor_ = file->message_type(16);
  static const int KPB_DAILY_QUEST_DATA_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_DAILY_QUEST_DATA, dailyquest_),
  };
  KPB_DAILY_QUEST_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_DAILY_QUEST_DATA_descriptor_,
      KPB_DAILY_QUEST_DATA::default_instance_,
      KPB_DAILY_QUEST_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_DAILY_QUEST_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_DAILY_QUEST_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_DAILY_QUEST_DATA));
  KPB_HEROTRAINING_DATA_HEADER_descriptor_ = file->message_type(17);
  static const int KPB_HEROTRAINING_DATA_HEADER_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HEROTRAINING_DATA_HEADER, slotcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HEROTRAINING_DATA_HEADER, buyslottimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HEROTRAINING_DATA_HEADER, teacherlevel_),
  };
  KPB_HEROTRAINING_DATA_HEADER_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_HEROTRAINING_DATA_HEADER_descriptor_,
      KPB_HEROTRAINING_DATA_HEADER::default_instance_,
      KPB_HEROTRAINING_DATA_HEADER_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HEROTRAINING_DATA_HEADER, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HEROTRAINING_DATA_HEADER, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_HEROTRAINING_DATA_HEADER));
  KPB_HEROTRAINING_DATA_descriptor_ = file->message_type(18);
  static const int KPB_HEROTRAINING_DATA_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HEROTRAINING_DATA, herotemplateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HEROTRAINING_DATA, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HEROTRAINING_DATA, trainingid_),
  };
  KPB_HEROTRAINING_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_HEROTRAINING_DATA_descriptor_,
      KPB_HEROTRAINING_DATA::default_instance_,
      KPB_HEROTRAINING_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HEROTRAINING_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HEROTRAINING_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_HEROTRAINING_DATA));
  KPB_ONE_MISSION_DATA_descriptor_ = file->message_type(19);
  static const int KPB_ONE_MISSION_DATA_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ONE_MISSION_DATA, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ONE_MISSION_DATA, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ONE_MISSION_DATA, openedlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ONE_MISSION_DATA, finishedlevel_),
  };
  KPB_ONE_MISSION_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_ONE_MISSION_DATA_descriptor_,
      KPB_ONE_MISSION_DATA::default_instance_,
      KPB_ONE_MISSION_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ONE_MISSION_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ONE_MISSION_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_ONE_MISSION_DATA));
  KPB_MISSION_DATA_descriptor_ = file->message_type(20);
  static const int KPB_MISSION_DATA_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_MISSION_DATA, missions_),
  };
  KPB_MISSION_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_MISSION_DATA_descriptor_,
      KPB_MISSION_DATA::default_instance_,
      KPB_MISSION_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_MISSION_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_MISSION_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_MISSION_DATA));
  KPB_MAKING_MACHINE_DATA_descriptor_ = file->message_type(21);
  static const int KPB_MAKING_MACHINE_DATA_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_MAKING_MACHINE_DATA, recipestate_),
  };
  KPB_MAKING_MACHINE_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_MAKING_MACHINE_DATA_descriptor_,
      KPB_MAKING_MACHINE_DATA::default_instance_,
      KPB_MAKING_MACHINE_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_MAKING_MACHINE_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_MAKING_MACHINE_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_MAKING_MACHINE_DATA));
  KPB_UPGRADE_NODE_descriptor_ = file->message_type(22);
  static const int KPB_UPGRADE_NODE_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_UPGRADE_NODE, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_UPGRADE_NODE, upgradetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_UPGRADE_NODE, herotemplateid_),
  };
  KPB_UPGRADE_NODE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_UPGRADE_NODE_descriptor_,
      KPB_UPGRADE_NODE::default_instance_,
      KPB_UPGRADE_NODE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_UPGRADE_NODE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_UPGRADE_NODE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_UPGRADE_NODE));
  KPB_UPGRADE_QUEUE_DATA_descriptor_ = file->message_type(23);
  static const int KPB_UPGRADE_QUEUE_DATA_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_UPGRADE_QUEUE_DATA, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_UPGRADE_QUEUE_DATA, freeclearcdtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_UPGRADE_QUEUE_DATA, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_UPGRADE_QUEUE_DATA, maxslotcount_),
  };
  KPB_UPGRADE_QUEUE_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_UPGRADE_QUEUE_DATA_descriptor_,
      KPB_UPGRADE_QUEUE_DATA::default_instance_,
      KPB_UPGRADE_QUEUE_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_UPGRADE_QUEUE_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_UPGRADE_QUEUE_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_UPGRADE_QUEUE_DATA));
  KPB_USINGEQUIP_INFO_descriptor_ = file->message_type(24);
  static const int KPB_USINGEQUIP_INFO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_USINGEQUIP_INFO, herotemplateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_USINGEQUIP_INFO, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_USINGEQUIP_INFO, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_USINGEQUIP_INFO, count_),
  };
  KPB_USINGEQUIP_INFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_USINGEQUIP_INFO_descriptor_,
      KPB_USINGEQUIP_INFO::default_instance_,
      KPB_USINGEQUIP_INFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_USINGEQUIP_INFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_USINGEQUIP_INFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_USINGEQUIP_INFO));
  KPB_GYM_DATA_descriptor_ = file->message_type(25);
  static const int KPB_GYM_DATA_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_GYM_DATA, equiplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_GYM_DATA, info_),
  };
  KPB_GYM_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_GYM_DATA_descriptor_,
      KPB_GYM_DATA::default_instance_,
      KPB_GYM_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_GYM_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_GYM_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_GYM_DATA));
  KPB_STORE_DATA_descriptor_ = file->message_type(26);
  static const int KPB_STORE_DATA_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_STORE_DATA, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_STORE_DATA, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_STORE_DATA, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_STORE_DATA, getmoneytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_STORE_DATA, nextgetmoneytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_STORE_DATA, state_),
  };
  KPB_STORE_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_STORE_DATA_descriptor_,
      KPB_STORE_DATA::default_instance_,
      KPB_STORE_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_STORE_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_STORE_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_STORE_DATA));
  KPB_BUSINESSSTREET_DATA_descriptor_ = file->message_type(27);
  static const int KPB_BUSINESSSTREET_DATA_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUSINESSSTREET_DATA, buylandtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUSINESSSTREET_DATA, store_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUSINESSSTREET_DATA, freelandids_),
  };
  KPB_BUSINESSSTREET_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_BUSINESSSTREET_DATA_descriptor_,
      KPB_BUSINESSSTREET_DATA::default_instance_,
      KPB_BUSINESSSTREET_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUSINESSSTREET_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_BUSINESSSTREET_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_BUSINESSSTREET_DATA));
  KPB_REPORT_ITEM_descriptor_ = file->message_type(28);
  static const int KPB_REPORT_ITEM_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_REPORT_ITEM, reporttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_REPORT_ITEM, reportindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_REPORT_ITEM, reportevent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_REPORT_ITEM, isnewreport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_REPORT_ITEM, reportparam_),
  };
  KPB_REPORT_ITEM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_REPORT_ITEM_descriptor_,
      KPB_REPORT_ITEM::default_instance_,
      KPB_REPORT_ITEM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_REPORT_ITEM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_REPORT_ITEM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_REPORT_ITEM));
  KPB_CHEERLEADING_ITEM_descriptor_ = file->message_type(29);
  static const int KPB_CHEERLEADING_ITEM_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_ITEM, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_ITEM, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_ITEM, endtime_),
  };
  KPB_CHEERLEADING_ITEM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_CHEERLEADING_ITEM_descriptor_,
      KPB_CHEERLEADING_ITEM::default_instance_,
      KPB_CHEERLEADING_ITEM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_ITEM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_ITEM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_CHEERLEADING_ITEM));
  KPB_CHEERLEADING_SLOTINFO_descriptor_ = file->message_type(30);
  static const int KPB_CHEERLEADING_SLOTINFO_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_SLOTINFO, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_SLOTINFO, offsetx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_SLOTINFO, faceto_),
  };
  KPB_CHEERLEADING_SLOTINFO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_CHEERLEADING_SLOTINFO_descriptor_,
      KPB_CHEERLEADING_SLOTINFO::default_instance_,
      KPB_CHEERLEADING_SLOTINFO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_SLOTINFO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_SLOTINFO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_CHEERLEADING_SLOTINFO));
  KPB_CHEERLEADING_DATA_descriptor_ = file->message_type(31);
  static const int KPB_CHEERLEADING_DATA_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_DATA, buyslottimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_DATA, validslotcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_DATA, slotinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_DATA, cheerleadingitems_),
  };
  KPB_CHEERLEADING_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_CHEERLEADING_DATA_descriptor_,
      KPB_CHEERLEADING_DATA::default_instance_,
      KPB_CHEERLEADING_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_CHEERLEADING_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_CHEERLEADING_DATA));
  KPBCommonItemData_descriptor_ = file->message_type(32);
  static const int KPBCommonItemData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCommonItemData, tabtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCommonItemData, tabindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCommonItemData, bind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCommonItemData, durability_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCommonItemData, gentime_),
  };
  KPBCommonItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBCommonItemData_descriptor_,
      KPBCommonItemData::default_instance_,
      KPBCommonItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCommonItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCommonItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBCommonItemData));
  KPB_EQUI_DATA_descriptor_ = file->message_type(33);
  static const int KPB_EQUI_DATA_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_EQUI_DATA, commonitemdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_EQUI_DATA, randseed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_EQUI_DATA, valuepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_EQUI_DATA, strengthenlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_EQUI_DATA, pos_),
  };
  KPB_EQUI_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_EQUI_DATA_descriptor_,
      KPB_EQUI_DATA::default_instance_,
      KPB_EQUI_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_EQUI_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_EQUI_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_EQUI_DATA));
  KPBCustomData_descriptor_ = file->message_type(34);
  static const int KPBCustomData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCustomData, byffer_),
  };
  KPBCustomData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBCustomData_descriptor_,
      KPBCustomData::default_instance_,
      KPBCustomData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCustomData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCustomData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBCustomData));
  KPBHeroDataList_descriptor_ = file->message_type(35);
  static const int KPBHeroDataList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroDataList, herodatalistdb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroDataList, herodata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroDataList, buffdatalistdb_),
  };
  KPBHeroDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBHeroDataList_descriptor_,
      KPBHeroDataList::default_instance_,
      KPBHeroDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBHeroDataList));
  KPBPackage_descriptor_ = file->message_type(36);
  static const int KPBPackage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBPackage, equidata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBPackage, size_),
  };
  KPBPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBPackage_descriptor_,
      KPBPackage::default_instance_,
      KPBPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBPackage));
  KPBPlayerPackage_descriptor_ = file->message_type(37);
  static const int KPBPlayerPackage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBPlayerPackage, package_),
  };
  KPBPlayerPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBPlayerPackage_descriptor_,
      KPBPlayerPackage::default_instance_,
      KPBPlayerPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBPlayerPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBPlayerPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBPlayerPackage));
  KPBHeroPackage_descriptor_ = file->message_type(38);
  static const int KPBHeroPackage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroPackage, herotemplateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroPackage, package_),
  };
  KPBHeroPackage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBHeroPackage_descriptor_,
      KPBHeroPackage::default_instance_,
      KPBHeroPackage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroPackage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroPackage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBHeroPackage));
  KPBItemList_descriptor_ = file->message_type(39);
  static const int KPBItemList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBItemList, playerpackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBItemList, heropackage_),
  };
  KPBItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBItemList_descriptor_,
      KPBItemList::default_instance_,
      KPBItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBItemList));
  KPBMoneyMgr_descriptor_ = file->message_type(40);
  static const int KPBMoneyMgr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBMoneyMgr, rolemoneyinfo_),
  };
  KPBMoneyMgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBMoneyMgr_descriptor_,
      KPBMoneyMgr::default_instance_,
      KPBMoneyMgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBMoneyMgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBMoneyMgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBMoneyMgr));
  KPBUserPreferences_descriptor_ = file->message_type(41);
  static const int KPBUserPreferences_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBUserPreferences, userprefences_),
  };
  KPBUserPreferences_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBUserPreferences_descriptor_,
      KPBUserPreferences::default_instance_,
      KPBUserPreferences_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBUserPreferences, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBUserPreferences, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBUserPreferences));
  KPB_COOLDOWN_DATA_descriptor_ = file->message_type(42);
  static const int KPB_COOLDOWN_DATA_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_COOLDOWN_DATA, timerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_COOLDOWN_DATA, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_COOLDOWN_DATA, interval_),
  };
  KPB_COOLDOWN_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_COOLDOWN_DATA_descriptor_,
      KPB_COOLDOWN_DATA::default_instance_,
      KPB_COOLDOWN_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_COOLDOWN_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_COOLDOWN_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_COOLDOWN_DATA));
  KPB_COOLDOWN_LIST_DATA_descriptor_ = file->message_type(43);
  static const int KPB_COOLDOWN_LIST_DATA_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_COOLDOWN_LIST_DATA, cooldowndata_),
  };
  KPB_COOLDOWN_LIST_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_COOLDOWN_LIST_DATA_descriptor_,
      KPB_COOLDOWN_LIST_DATA::default_instance_,
      KPB_COOLDOWN_LIST_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_COOLDOWN_LIST_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_COOLDOWN_LIST_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_COOLDOWN_LIST_DATA));
  KPBCDTimerList_descriptor_ = file->message_type(44);
  static const int KPBCDTimerList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCDTimerList, cooldownlist_),
  };
  KPBCDTimerList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBCDTimerList_descriptor_,
      KPBCDTimerList::default_instance_,
      KPBCDTimerList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCDTimerList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCDTimerList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBCDTimerList));
  KPBQuestList_descriptor_ = file->message_type(45);
  static const int KPBQuestList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBQuestList, queststatelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBQuestList, acceptedquestlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBQuestList, dailyquest_),
  };
  KPBQuestList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBQuestList_descriptor_,
      KPBQuestList::default_instance_,
      KPBQuestList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBQuestList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBQuestList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBQuestList));
  KPBHeroTrainingMgr_descriptor_ = file->message_type(46);
  static const int KPBHeroTrainingMgr_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroTrainingMgr, trainingdataheader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroTrainingMgr, trainingdata_),
  };
  KPBHeroTrainingMgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBHeroTrainingMgr_descriptor_,
      KPBHeroTrainingMgr::default_instance_,
      KPBHeroTrainingMgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroTrainingMgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBHeroTrainingMgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBHeroTrainingMgr));
  KPBMissionData_descriptor_ = file->message_type(47);
  static const int KPBMissionData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBMissionData, missiondata_),
  };
  KPBMissionData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBMissionData_descriptor_,
      KPBMissionData::default_instance_,
      KPBMissionData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBMissionData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBMissionData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBMissionData));
  KPBMakingMachine_descriptor_ = file->message_type(48);
  static const int KPBMakingMachine_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBMakingMachine, makingmachinedata_),
  };
  KPBMakingMachine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBMakingMachine_descriptor_,
      KPBMakingMachine::default_instance_,
      KPBMakingMachine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBMakingMachine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBMakingMachine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBMakingMachine));
  KPBUpgradeQueue_descriptor_ = file->message_type(49);
  static const int KPBUpgradeQueue_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBUpgradeQueue, upgradequeuedata_),
  };
  KPBUpgradeQueue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBUpgradeQueue_descriptor_,
      KPBUpgradeQueue::default_instance_,
      KPBUpgradeQueue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBUpgradeQueue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBUpgradeQueue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBUpgradeQueue));
  KPBGym_descriptor_ = file->message_type(50);
  static const int KPBGym_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBGym, gymdata_),
  };
  KPBGym_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBGym_descriptor_,
      KPBGym::default_instance_,
      KPBGym_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBGym, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBGym, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBGym));
  KPBBusinessStreet_descriptor_ = file->message_type(51);
  static const int KPBBusinessStreet_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBBusinessStreet, streetdata_),
  };
  KPBBusinessStreet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBBusinessStreet_descriptor_,
      KPBBusinessStreet::default_instance_,
      KPBBusinessStreet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBBusinessStreet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBBusinessStreet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBBusinessStreet));
  KPBSecretary_descriptor_ = file->message_type(52);
  static const int KPBSecretary_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBSecretary, reportitem_),
  };
  KPBSecretary_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBSecretary_descriptor_,
      KPBSecretary::default_instance_,
      KPBSecretary_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBSecretary, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBSecretary, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBSecretary));
  KPBCheerleadingMgr_descriptor_ = file->message_type(53);
  static const int KPBCheerleadingMgr_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCheerleadingMgr, cheerleadingdata_),
  };
  KPBCheerleadingMgr_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBCheerleadingMgr_descriptor_,
      KPBCheerleadingMgr::default_instance_,
      KPBCheerleadingMgr_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCheerleadingMgr, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBCheerleadingMgr, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBCheerleadingMgr));
  KPBWardrobe_descriptor_ = file->message_type(54);
  static const int KPBWardrobe_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBWardrobe, wardrobedata_),
  };
  KPBWardrobe_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPBWardrobe_descriptor_,
      KPBWardrobe::default_instance_,
      KPBWardrobe_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBWardrobe, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPBWardrobe, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPBWardrobe));
  KPB_WARDROBE_DATA_descriptor_ = file->message_type(55);
  static const int KPB_WARDROBE_DATA_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_WARDROBE_DATA, fashiondata_),
  };
  KPB_WARDROBE_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_WARDROBE_DATA_descriptor_,
      KPB_WARDROBE_DATA::default_instance_,
      KPB_WARDROBE_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_WARDROBE_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_WARDROBE_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_WARDROBE_DATA));
  KPB_FASHION_DATA_descriptor_ = file->message_type(56);
  static const int KPB_FASHION_DATA_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_FASHION_DATA, fashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_FASHION_DATA, overduepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_FASHION_DATA, belongtoheroid_),
  };
  KPB_FASHION_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_FASHION_DATA_descriptor_,
      KPB_FASHION_DATA::default_instance_,
      KPB_FASHION_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_FASHION_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_FASHION_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_FASHION_DATA));
  KPB_PLAYER_VALUE_descriptor_ = file->message_type(57);
  static const int KPB_PLAYER_VALUE_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_PLAYER_VALUE, playervaluedata_),
  };
  KPB_PLAYER_VALUE_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_PLAYER_VALUE_descriptor_,
      KPB_PLAYER_VALUE::default_instance_,
      KPB_PLAYER_VALUE_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_PLAYER_VALUE, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_PLAYER_VALUE, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_PLAYER_VALUE));
  KPB_TeamLogo_Info_descriptor_ = file->message_type(58);
  static const int KPB_TeamLogo_Info_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_TeamLogo_Info, teamlogoframeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_TeamLogo_Info, teamlogoemblemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_TeamLogo_Info, teamlogoinfocount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_TeamLogo_Info, teamlogodata_),
  };
  KPB_TeamLogo_Info_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_TeamLogo_Info_descriptor_,
      KPB_TeamLogo_Info::default_instance_,
      KPB_TeamLogo_Info_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_TeamLogo_Info, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_TeamLogo_Info, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_TeamLogo_Info));
  KPB_TEAMLOGO_DATA_descriptor_ = file->message_type(59);
  static const int KPB_TEAMLOGO_DATA_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_TEAMLOGO_DATA, ownteamlogoid_),
  };
  KPB_TEAMLOGO_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_TEAMLOGO_DATA_descriptor_,
      KPB_TEAMLOGO_DATA::default_instance_,
      KPB_TEAMLOGO_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_TEAMLOGO_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_TEAMLOGO_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_TEAMLOGO_DATA));
  KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA_descriptor_ = file->message_type(60);
  static const int KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA, achievementid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA, curvalue_),
  };
  KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA_descriptor_,
      KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::default_instance_,
      KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA));
  KPB_ACHIEVEMENT_DATA_descriptor_ = file->message_type(61);
  static const int KPB_ACHIEVEMENT_DATA_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACHIEVEMENT_DATA, achievementpoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACHIEVEMENT_DATA, statedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACHIEVEMENT_DATA, progressing_),
  };
  KPB_ACHIEVEMENT_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_ACHIEVEMENT_DATA_descriptor_,
      KPB_ACHIEVEMENT_DATA::default_instance_,
      KPB_ACHIEVEMENT_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACHIEVEMENT_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACHIEVEMENT_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_ACHIEVEMENT_DATA));
  KPB_SAVE_DATA_descriptor_ = file->message_type(62);
  static const int KPB_SAVE_DATA_offsets_[23] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, customdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, herodatalist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, moneymgr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, userpreferences_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, cdtimerlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, questlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, herotrainingmgr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, missiondata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, makingmachine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, gym_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, upgradequeue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, businessstreet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, secretary_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, cheerleadingmgr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, rolestateinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, wardrobe_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, playervalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, teamlogoinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, achievementdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, activeplayerdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, buffdatalistdb_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, herounlockdatalist_),
  };
  KPB_SAVE_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_SAVE_DATA_descriptor_,
      KPB_SAVE_DATA::default_instance_,
      KPB_SAVE_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_SAVE_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_SAVE_DATA));
  KPB_ACTIVE_PROC_descriptor_ = file->message_type(63);
  static const int KPB_ACTIVE_PROC_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACTIVE_PROC, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACTIVE_PROC, finished_),
  };
  KPB_ACTIVE_PROC_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_ACTIVE_PROC_descriptor_,
      KPB_ACTIVE_PROC::default_instance_,
      KPB_ACTIVE_PROC_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACTIVE_PROC, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACTIVE_PROC, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_ACTIVE_PROC));
  KPB_ACTIVEPLAYER_DATA_descriptor_ = file->message_type(64);
  static const int KPB_ACTIVEPLAYER_DATA_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACTIVEPLAYER_DATA, curactivepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACTIVEPLAYER_DATA, awardalreadyget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACTIVEPLAYER_DATA, activeproc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACTIVEPLAYER_DATA, costfatiguepoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACTIVEPLAYER_DATA, onlineframe_),
  };
  KPB_ACTIVEPLAYER_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_ACTIVEPLAYER_DATA_descriptor_,
      KPB_ACTIVEPLAYER_DATA::default_instance_,
      KPB_ACTIVEPLAYER_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACTIVEPLAYER_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_ACTIVEPLAYER_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_ACTIVEPLAYER_DATA));
  KPB_HERO_UNLOCK_DATA_descriptor_ = file->message_type(65);
  static const int KPB_HERO_UNLOCK_DATA_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_UNLOCK_DATA, herotemplateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_UNLOCK_DATA, unlocktime_),
  };
  KPB_HERO_UNLOCK_DATA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_HERO_UNLOCK_DATA_descriptor_,
      KPB_HERO_UNLOCK_DATA::default_instance_,
      KPB_HERO_UNLOCK_DATA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_UNLOCK_DATA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_UNLOCK_DATA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_HERO_UNLOCK_DATA));
  KPB_HERO_UNLOCK_DATA_LIST_descriptor_ = file->message_type(66);
  static const int KPB_HERO_UNLOCK_DATA_LIST_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_UNLOCK_DATA_LIST, herounlockdata_),
  };
  KPB_HERO_UNLOCK_DATA_LIST_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KPB_HERO_UNLOCK_DATA_LIST_descriptor_,
      KPB_HERO_UNLOCK_DATA_LIST::default_instance_,
      KPB_HERO_UNLOCK_DATA_LIST_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_UNLOCK_DATA_LIST, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KPB_HERO_UNLOCK_DATA_LIST, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KPB_HERO_UNLOCK_DATA_LIST));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_t3db_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBRoleBaseHeader_descriptor_, &KPBRoleBaseHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBROLE_POSITION_DB_descriptor_, &KPBROLE_POSITION_DB::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBRoleBaseInfo_descriptor_, &KPBRoleBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBROLE_LIST_INFO_descriptor_, &KPBROLE_LIST_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBRoleDataHeader_descriptor_, &KPBRoleDataHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBRoleBlockHeader_descriptor_, &KPBRoleBlockHeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_ROLE_STATE_INFO_descriptor_, &KPB_ROLE_STATE_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_USER_ROLE_GENERATOR_PARAM_descriptor_, &KPB_USER_ROLE_GENERATOR_PARAM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_ROLE_GENERATOR_PARAM_descriptor_, &KPB_ROLE_GENERATOR_PARAM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_HERO_DATA_LIST_descriptor_, &KPB_HERO_DATA_LIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_HERO_DATA_descriptor_, &KPB_HERO_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_BUFF_DATA_descriptor_, &KPB_BUFF_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_BUFF_DATA_LIST_descriptor_, &KPB_BUFF_DATA_LIST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_ROLE_MONEY_DATA_descriptor_, &KPB_ROLE_MONEY_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_ACCEPT_QUEST_descriptor_, &KPB_ACCEPT_QUEST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_DAILY_QUEST_descriptor_, &KPB_DAILY_QUEST::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_DAILY_QUEST_DATA_descriptor_, &KPB_DAILY_QUEST_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_HEROTRAINING_DATA_HEADER_descriptor_, &KPB_HEROTRAINING_DATA_HEADER::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_HEROTRAINING_DATA_descriptor_, &KPB_HEROTRAINING_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_ONE_MISSION_DATA_descriptor_, &KPB_ONE_MISSION_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_MISSION_DATA_descriptor_, &KPB_MISSION_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_MAKING_MACHINE_DATA_descriptor_, &KPB_MAKING_MACHINE_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_UPGRADE_NODE_descriptor_, &KPB_UPGRADE_NODE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_UPGRADE_QUEUE_DATA_descriptor_, &KPB_UPGRADE_QUEUE_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_USINGEQUIP_INFO_descriptor_, &KPB_USINGEQUIP_INFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_GYM_DATA_descriptor_, &KPB_GYM_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_STORE_DATA_descriptor_, &KPB_STORE_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_BUSINESSSTREET_DATA_descriptor_, &KPB_BUSINESSSTREET_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_REPORT_ITEM_descriptor_, &KPB_REPORT_ITEM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_CHEERLEADING_ITEM_descriptor_, &KPB_CHEERLEADING_ITEM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_CHEERLEADING_SLOTINFO_descriptor_, &KPB_CHEERLEADING_SLOTINFO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_CHEERLEADING_DATA_descriptor_, &KPB_CHEERLEADING_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBCommonItemData_descriptor_, &KPBCommonItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_EQUI_DATA_descriptor_, &KPB_EQUI_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBCustomData_descriptor_, &KPBCustomData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBHeroDataList_descriptor_, &KPBHeroDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBPackage_descriptor_, &KPBPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBPlayerPackage_descriptor_, &KPBPlayerPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBHeroPackage_descriptor_, &KPBHeroPackage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBItemList_descriptor_, &KPBItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBMoneyMgr_descriptor_, &KPBMoneyMgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBUserPreferences_descriptor_, &KPBUserPreferences::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_COOLDOWN_DATA_descriptor_, &KPB_COOLDOWN_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_COOLDOWN_LIST_DATA_descriptor_, &KPB_COOLDOWN_LIST_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBCDTimerList_descriptor_, &KPBCDTimerList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBQuestList_descriptor_, &KPBQuestList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBHeroTrainingMgr_descriptor_, &KPBHeroTrainingMgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBMissionData_descriptor_, &KPBMissionData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBMakingMachine_descriptor_, &KPBMakingMachine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBUpgradeQueue_descriptor_, &KPBUpgradeQueue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBGym_descriptor_, &KPBGym::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBBusinessStreet_descriptor_, &KPBBusinessStreet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBSecretary_descriptor_, &KPBSecretary::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBCheerleadingMgr_descriptor_, &KPBCheerleadingMgr::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPBWardrobe_descriptor_, &KPBWardrobe::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_WARDROBE_DATA_descriptor_, &KPB_WARDROBE_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_FASHION_DATA_descriptor_, &KPB_FASHION_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_PLAYER_VALUE_descriptor_, &KPB_PLAYER_VALUE::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_TeamLogo_Info_descriptor_, &KPB_TeamLogo_Info::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_TEAMLOGO_DATA_descriptor_, &KPB_TEAMLOGO_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA_descriptor_, &KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_ACHIEVEMENT_DATA_descriptor_, &KPB_ACHIEVEMENT_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_SAVE_DATA_descriptor_, &KPB_SAVE_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_ACTIVE_PROC_descriptor_, &KPB_ACTIVE_PROC::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_ACTIVEPLAYER_DATA_descriptor_, &KPB_ACTIVEPLAYER_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_HERO_UNLOCK_DATA_descriptor_, &KPB_HERO_UNLOCK_DATA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KPB_HERO_UNLOCK_DATA_LIST_descriptor_, &KPB_HERO_UNLOCK_DATA_LIST::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_t3db_2eproto() {
  delete KPBRoleBaseHeader::default_instance_;
  delete KPBRoleBaseHeader_reflection_;
  delete KPBROLE_POSITION_DB::default_instance_;
  delete KPBROLE_POSITION_DB_reflection_;
  delete KPBRoleBaseInfo::default_instance_;
  delete KPBRoleBaseInfo_reflection_;
  delete KPBROLE_LIST_INFO::default_instance_;
  delete KPBROLE_LIST_INFO_reflection_;
  delete KPBRoleDataHeader::default_instance_;
  delete KPBRoleDataHeader_reflection_;
  delete KPBRoleBlockHeader::default_instance_;
  delete KPBRoleBlockHeader_reflection_;
  delete KPB_ROLE_STATE_INFO::default_instance_;
  delete KPB_ROLE_STATE_INFO_reflection_;
  delete KPB_USER_ROLE_GENERATOR_PARAM::default_instance_;
  delete KPB_USER_ROLE_GENERATOR_PARAM_reflection_;
  delete KPB_ROLE_GENERATOR_PARAM::default_instance_;
  delete KPB_ROLE_GENERATOR_PARAM_reflection_;
  delete KPB_HERO_DATA_LIST::default_instance_;
  delete KPB_HERO_DATA_LIST_reflection_;
  delete KPB_HERO_DATA::default_instance_;
  delete KPB_HERO_DATA_reflection_;
  delete KPB_BUFF_DATA::default_instance_;
  delete KPB_BUFF_DATA_reflection_;
  delete KPB_BUFF_DATA_LIST::default_instance_;
  delete KPB_BUFF_DATA_LIST_reflection_;
  delete KPB_ROLE_MONEY_DATA::default_instance_;
  delete KPB_ROLE_MONEY_DATA_reflection_;
  delete KPB_ACCEPT_QUEST::default_instance_;
  delete KPB_ACCEPT_QUEST_reflection_;
  delete KPB_DAILY_QUEST::default_instance_;
  delete KPB_DAILY_QUEST_reflection_;
  delete KPB_DAILY_QUEST_DATA::default_instance_;
  delete KPB_DAILY_QUEST_DATA_reflection_;
  delete KPB_HEROTRAINING_DATA_HEADER::default_instance_;
  delete KPB_HEROTRAINING_DATA_HEADER_reflection_;
  delete KPB_HEROTRAINING_DATA::default_instance_;
  delete KPB_HEROTRAINING_DATA_reflection_;
  delete KPB_ONE_MISSION_DATA::default_instance_;
  delete KPB_ONE_MISSION_DATA_reflection_;
  delete KPB_MISSION_DATA::default_instance_;
  delete KPB_MISSION_DATA_reflection_;
  delete KPB_MAKING_MACHINE_DATA::default_instance_;
  delete KPB_MAKING_MACHINE_DATA_reflection_;
  delete KPB_UPGRADE_NODE::default_instance_;
  delete KPB_UPGRADE_NODE_reflection_;
  delete KPB_UPGRADE_QUEUE_DATA::default_instance_;
  delete KPB_UPGRADE_QUEUE_DATA_reflection_;
  delete KPB_USINGEQUIP_INFO::default_instance_;
  delete KPB_USINGEQUIP_INFO_reflection_;
  delete KPB_GYM_DATA::default_instance_;
  delete KPB_GYM_DATA_reflection_;
  delete KPB_STORE_DATA::default_instance_;
  delete KPB_STORE_DATA_reflection_;
  delete KPB_BUSINESSSTREET_DATA::default_instance_;
  delete KPB_BUSINESSSTREET_DATA_reflection_;
  delete KPB_REPORT_ITEM::default_instance_;
  delete KPB_REPORT_ITEM_reflection_;
  delete KPB_CHEERLEADING_ITEM::default_instance_;
  delete KPB_CHEERLEADING_ITEM_reflection_;
  delete KPB_CHEERLEADING_SLOTINFO::default_instance_;
  delete KPB_CHEERLEADING_SLOTINFO_reflection_;
  delete KPB_CHEERLEADING_DATA::default_instance_;
  delete KPB_CHEERLEADING_DATA_reflection_;
  delete KPBCommonItemData::default_instance_;
  delete KPBCommonItemData_reflection_;
  delete KPB_EQUI_DATA::default_instance_;
  delete KPB_EQUI_DATA_reflection_;
  delete KPBCustomData::default_instance_;
  delete KPBCustomData_reflection_;
  delete KPBHeroDataList::default_instance_;
  delete KPBHeroDataList_reflection_;
  delete KPBPackage::default_instance_;
  delete KPBPackage_reflection_;
  delete KPBPlayerPackage::default_instance_;
  delete KPBPlayerPackage_reflection_;
  delete KPBHeroPackage::default_instance_;
  delete KPBHeroPackage_reflection_;
  delete KPBItemList::default_instance_;
  delete KPBItemList_reflection_;
  delete KPBMoneyMgr::default_instance_;
  delete KPBMoneyMgr_reflection_;
  delete KPBUserPreferences::default_instance_;
  delete KPBUserPreferences_reflection_;
  delete KPB_COOLDOWN_DATA::default_instance_;
  delete KPB_COOLDOWN_DATA_reflection_;
  delete KPB_COOLDOWN_LIST_DATA::default_instance_;
  delete KPB_COOLDOWN_LIST_DATA_reflection_;
  delete KPBCDTimerList::default_instance_;
  delete KPBCDTimerList_reflection_;
  delete KPBQuestList::default_instance_;
  delete KPBQuestList_reflection_;
  delete KPBHeroTrainingMgr::default_instance_;
  delete KPBHeroTrainingMgr_reflection_;
  delete KPBMissionData::default_instance_;
  delete KPBMissionData_reflection_;
  delete KPBMakingMachine::default_instance_;
  delete KPBMakingMachine_reflection_;
  delete KPBUpgradeQueue::default_instance_;
  delete KPBUpgradeQueue_reflection_;
  delete KPBGym::default_instance_;
  delete KPBGym_reflection_;
  delete KPBBusinessStreet::default_instance_;
  delete KPBBusinessStreet_reflection_;
  delete KPBSecretary::default_instance_;
  delete KPBSecretary_reflection_;
  delete KPBCheerleadingMgr::default_instance_;
  delete KPBCheerleadingMgr_reflection_;
  delete KPBWardrobe::default_instance_;
  delete KPBWardrobe_reflection_;
  delete KPB_WARDROBE_DATA::default_instance_;
  delete KPB_WARDROBE_DATA_reflection_;
  delete KPB_FASHION_DATA::default_instance_;
  delete KPB_FASHION_DATA_reflection_;
  delete KPB_PLAYER_VALUE::default_instance_;
  delete KPB_PLAYER_VALUE_reflection_;
  delete KPB_TeamLogo_Info::default_instance_;
  delete KPB_TeamLogo_Info_reflection_;
  delete KPB_TEAMLOGO_DATA::default_instance_;
  delete KPB_TEAMLOGO_DATA_reflection_;
  delete KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::default_instance_;
  delete KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA_reflection_;
  delete KPB_ACHIEVEMENT_DATA::default_instance_;
  delete KPB_ACHIEVEMENT_DATA_reflection_;
  delete KPB_SAVE_DATA::default_instance_;
  delete KPB_SAVE_DATA_reflection_;
  delete KPB_ACTIVE_PROC::default_instance_;
  delete KPB_ACTIVE_PROC_reflection_;
  delete KPB_ACTIVEPLAYER_DATA::default_instance_;
  delete KPB_ACTIVEPLAYER_DATA_reflection_;
  delete KPB_HERO_UNLOCK_DATA::default_instance_;
  delete KPB_HERO_UNLOCK_DATA_reflection_;
  delete KPB_HERO_UNLOCK_DATA_LIST::default_instance_;
  delete KPB_HERO_UNLOCK_DATA_LIST_reflection_;
}

void protobuf_AddDesc_t3db_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nt3db.proto\022\004T3DB\"\'\n\021KPBRoleBaseHeader\022"
    "\022\n\007Version\030\001 \002(\005:\0010\"@\n\023KPBROLE_POSITION_"
    "DB\022\020\n\005MapID\030\001 \002(\r:\0010\022\027\n\014MapCopyIndex\030\002 \002"
    "(\r:\0010\"\307\002\n\017KPBRoleBaseInfo\022+\n\nBaseHeader\030"
    "\001 \002(\0132\027.T3DB.KPBRoleBaseHeader\022-\n\nCurren"
    "tPos\030\002 \002(\0132\031.T3DB.KPBROLE_POSITION_DB\022\027\n"
    "\014LastSaveTime\030\003 \002(\004:\0010\022\030\n\rLastLogintime\030"
    "\004 \002(\022:\0010\022\030\n\rTotalGameTime\030\005 \002(\005:\0010\022\025\n\nCr"
    "eateTime\030\006 \002(\005:\0010\022\021\n\006Gender\030\007 \002(\005:\0010\022\027\n\014"
    "HighestLevel\030\010 \002(\r:\0010\022\023\n\010VIPLevel\030\t \002(\005:"
    "\0010\022\021\n\006VIPExp\030\n \002(\005:\0010\022\020\n\005Level\030\013 \002(\005:\0010\022"
    "\016\n\003Exp\030\014 \002(\005:\0010\"\242\001\n\021KPBROLE_LIST_INFO\022\023\n"
    "\010PlayerID\030\001 \002(\r:\0010\022\021\n\007Account\030\002 \002(\014:\000\022\022\n"
    "\007GroupID\030\003 \002(\005:\0010\022\022\n\010RoleName\030\004 \002(\014:\000\022\'\n"
    "\010BaseInfo\030\005 \002(\0132\025.T3DB.KPBRoleBaseInfo\022\024"
    "\n\tCanRename\030\006 \002(\005:\0010\"C\n\021KPBRoleDataHeade"
    "r\022\016\n\003Ver\030\001 \002(\r:\0010\022\016\n\003CRC\030\002 \002(\r:\0010\022\016\n\003Len"
    "\030\003 \002(\r:\0010\"E\n\022KPBRoleBlockHeader\022\017\n\004Type\030"
    "\001 \002(\005:\0010\022\016\n\003Ver\030\002 \002(\r:\0010\022\016\n\003Len\030\003 \002(\r:\0010"
    "\"\261\005\n\023KPB_ROLE_STATE_INFO\022\"\n\027LadderLosing"
    "StreakCount\030\001 \002(\r:\0010\022\036\n\023TalkWorldDailyCo"
    "unt\030\004 \002(\r:\0010\022#\n\030LastHeroExpDecreasedTime"
    "\030\005 \002(\005:\0010\022\025\n\nAILevelCoe\030\006 \002(\005:\0010\022\032\n\017CurF"
    "atiguePoint\030\007 \002(\r:\0010\022\025\n\nVIPEndTime\030\t \002(\005"
    ":\0010\022$\n\031TodayBuyFatiguePointTimes\030\n \002(\r:\001"
    "0\022\037\n\024LastDailyRefreshTime\030\013 \002(\005:\0010\022\036\n\023by"
    "VIPAutoRepairFlag\030\014 \002(\005:\0010\022\036\n\023nLastChall"
    "engeStep1\030\r \002(\005:\0010\022\037\n\024nStartChallengeSte"
    "p1\030\016 \002(\005:\0010\022\027\n\014ClubApplyNum\030\017 \002(\005:\0010\022\037\n\024"
    "nOnlineGetAwardTimes\030\020 \002(\005:\0010\022#\n\030LastDai"
    "lyRefreshTimeZero\030\021 \002(\005:\0010\022\027\n\014QuitClubTi"
    "me\030\022 \002(\005:\0010\022\034\n\021nRandomQuestIndex\030\023 \002(\005:\001"
    "0\022\037\n\024nSkipRandomQuestTime\030\024 \002(\005:\0010\022\023\n\010Fi"
    "rstPvP\030\025 \002(\005:\0010\022\031\n\016RefuseStranger\030\026 \002(\005:"
    "\0010\022\036\n\023nLastChallengeStep2\030\027 \002(\005:\0010\022\037\n\024nS"
    "tartChallengeStep2\030\030 \002(\005:\0010\022\027\n\014nCurrentC"
    "ity\030\031 \002(\005:\0010\"H\n\035KPB_USER_ROLE_GENERATOR_"
    "PARAM\022\022\n\010RoleName\030\001 \002(\014:\000\022\023\n\010RoleType\030\002 "
    "\002(\005:\0010\"}\n\030KPB_ROLE_GENERATOR_PARAM\022\025\n\013Ac"
    "countName\030\001 \002(\014:\000\022\022\n\007GroupID\030\002 \002(\005:\0010\0226\n"
    "\tUserParam\030\003 \002(\0132#.T3DB.KPB_USER_ROLE_GE"
    "NERATOR_PARAM\"-\n\022KPB_HERO_DATA_LIST\022\027\n\014M"
    "axHeroCount\030\001 \002(\r:\0010\"\341\003\n\rKPB_HERO_DATA\022\020"
    "\n\005Index\030\001 \002(\r:\0010\022\025\n\nTemplateID\030\002 \002(\r:\0010\022"
    "\020\n\005Level\030\003 \002(\005:\0010\022\016\n\003Exp\030\004 \002(\005:\0010\022\016\n\003Eol"
    "\030\006 \002(\005:\0010\022\026\n\013LadderLevel\030\007 \002(\005:\0010\022\024\n\tLad"
    "derExp\030\010 \002(\005:\0010\022\031\n\016LadderWinCount\030\t \002(\005:"
    "\0010\022\032\n\017LadderLoseCount\030\n \002(\005:\0010\022\032\n\017Ladder"
    "DrawCount\030\013 \002(\005:\0010\022\025\n\nFreeTalent\030\014 \002(\r:\001"
    "0\022\022\n\006Talent\030\r \003(\rB\002\020\001\022\024\n\tFashionID\030\016 \002(\r"
    ":\0010\022\024\n\005Fired\030\017 \002(\010:\005false\022\037\n\023SelectedAct"
    "iveSkill\030\021 \003(\rB\002\020\001\022 \n\024SelectedPassiveSki"
    "ll\030\022 \003(\rB\002\020\001\022 \n\024SelectedNirvanaSkill\030\023 \003"
    "(\rB\002\020\001\022!\n\025SelectedSlamballSkill\030\024 \003(\rB\002\020"
    "\001\022\025\n\nEquipScore\030\025 \002(\r:\0010\"P\n\rKPB_BUFF_DAT"
    "A\022\021\n\006BuffID\030\001 \002(\r:\0010\022\024\n\tLeftFrame\030\002 \002(\005:"
    "\0010\022\026\n\013ActiveCount\030\003 \002(\005:\0010\";\n\022KPB_BUFF_D"
    "ATA_LIST\022%\n\010BuffData\030\001 \003(\0132\023.T3DB.KPB_BU"
    "FF_DATA\"V\n\023KPB_ROLE_MONEY_DATA\022\027\n\014SafeBo"
    "xLevel\030\001 \002(\005:\0010\022\021\n\005Money\030\002 \003(\005B\002\020\001\022\023\n\010Fr"
    "eeCoin\030\003 \002(\005:\0010\"U\n\020KPB_ACCEPT_QUEST\022\022\n\007Q"
    "uestID\030\001 \002(\r:\0010\022\025\n\nQuestIndex\030\002 \002(\r:\0010\022\026"
    "\n\nQuestValue\030\003 \003(\005B\002\020\001\"@\n\017KPB_DAILY_QUES"
    "T\022\022\n\007QuestID\030\001 \002(\r:\0010\022\031\n\016NextAcceptTime\030"
    "\002 \002(\005:\0010\"A\n\024KPB_DAILY_QUEST_DATA\022)\n\nDail"
    "yQuest\030\001 \003(\0132\025.T3DB.KPB_DAILY_QUEST\"f\n\034K"
    "PB_HEROTRAINING_DATA_HEADER\022\024\n\tSlotCount"
    "\030\001 \002(\r:\0010\022\027\n\014BuySlotTimes\030\002 \002(\r:\0010\022\027\n\014Te"
    "acherLevel\030\003 \002(\r:\0010\"]\n\025KPB_HEROTRAINING_"
    "DATA\022\031\n\016HeroTemplateID\030\001 \002(\r:\0010\022\022\n\007EndTi"
    "me\030\002 \002(\005:\0010\022\025\n\nTrainingID\030\003 \002(\r:\0010\"j\n\024KP"
    "B_ONE_MISSION_DATA\022\017\n\004Type\030\001 \002(\r:\0010\022\017\n\004S"
    "tep\030\002 \002(\r:\0010\022\026\n\013OpenedLevel\030\003 \002(\r:\0010\022\030\n\r"
    "FinishedLevel\030\004 \002(\r:\0010\"@\n\020KPB_MISSION_DA"
    "TA\022,\n\010Missions\030\001 \003(\0132\032.T3DB.KPB_ONE_MISS"
    "ION_DATA\"0\n\027KPB_MAKING_MACHINE_DATA\022\025\n\013R"
    "ecipeState\030\002 \002(\014:\000\"Y\n\020KPB_UPGRADE_NODE\022\022"
    "\n\007EndTime\030\001 \002(\005:\0010\022\026\n\013UpgradeType\030\002 \002(\r:"
    "\0010\022\031\n\016HeroTemplateID\030\003 \002(\r:\0010\"\206\001\n\026KPB_UP"
    "GRADE_QUEUE_DATA\022\020\n\005Count\030\001 \002(\r:\0010\022\033\n\020Fr"
    "eeClearCDTimes\030\002 \002(\005:\0010\022$\n\004node\030\003 \003(\0132\026."
    "T3DB.KPB_UPGRADE_NODE\022\027\n\014MaxSlotCount\030\004 "
    "\002(\r:\0010\"g\n\023KPB_USINGEQUIP_INFO\022\031\n\016HeroTem"
    "plateID\030\001 \002(\r:\0010\022\017\n\004Type\030\002 \002(\r:\0010\022\022\n\007End"
    "Time\030\003 \002(\005:\0010\022\020\n\005Count\030\004 \002(\r:\0010\"N\n\014KPB_G"
    "YM_DATA\022\025\n\nEquipLevel\030\001 \002(\r:\0010\022\'\n\004info\030\003"
    " \003(\0132\031.T3DB.KPB_USINGEQUIP_INFO\"\213\001\n\016KPB_"
    "STORE_DATA\022\r\n\002ID\030\001 \002(\r:\0010\022\017\n\004Type\030\002 \002(\r:"
    "\0010\022\020\n\005Level\030\003 \002(\r:\0010\022\030\n\rGetMoneyTimes\030\004 "
    "\002(\r:\0010\022\033\n\020NextGetMoneyTime\030\005 \002(\005:\0010\022\020\n\005S"
    "tate\030\006 \002(\005:\0010\"p\n\027KPB_BUSINESSSTREET_DATA"
    "\022\027\n\014BuyLandTimes\030\003 \002(\r:\0010\022#\n\005Store\030\004 \003(\013"
    "2\024.T3DB.KPB_STORE_DATA\022\027\n\013FreelandIDs\030\005 "
    "\003(\rB\002\020\001\"\207\001\n\017KPB_REPORT_ITEM\022\025\n\nReportTim"
    "e\030\001 \002(\005:\0010\022\026\n\013ReportIndex\030\002 \002(\r:\0010\022\026\n\013Re"
    "portEvent\030\003 \002(\r:\0010\022\026\n\013IsNewReport\030\004 \002(\r:"
    "\0010\022\025\n\013ReportParam\030\005 \002(\014:\000\"L\n\025KPB_CHEERLE"
    "ADING_ITEM\022\020\n\005Index\030\001 \002(\r:\0010\022\r\n\002ID\030\002 \002(\r"
    ":\0010\022\022\n\007EndTime\030\003 \002(\005:\0010\"T\n\031KPB_CHEERLEAD"
    "ING_SLOTINFO\022\020\n\005Index\030\001 \002(\r:\0010\022\022\n\007Offset"
    "X\030\002 \002(\005:\0010\022\021\n\006FaceTo\030\003 \002(\005:\0010\"\266\001\n\025KPB_CH"
    "EERLEADING_DATA\022\027\n\014BuySlotTimes\030\001 \002(\r:\0010"
    "\022\031\n\016ValidSlotCount\030\002 \002(\r:\0010\0221\n\010slotInfo\030"
    "\003 \003(\0132\037.T3DB.KPB_CHEERLEADING_SLOTINFO\0226"
    "\n\021CheerleadingItems\030\004 \003(\0132\033.T3DB.KPB_CHE"
    "ERLEADING_ITEM\"x\n\021KPBCommonItemData\022\022\n\007T"
    "abType\030\001 \002(\r:\0010\022\023\n\010TabIndex\030\002 \002(\r:\0010\022\017\n\004"
    "Bind\030\003 \002(\r:\0010\022\025\n\nDurability\030\004 \002(\r:\0010\022\022\n\007"
    "GenTime\030\005 \002(\005:\0010\"\230\001\n\rKPB_EQUI_DATA\022/\n\016Co"
    "mmonItemData\030\001 \002(\0132\027.T3DB.KPBCommonItemD"
    "ata\022\023\n\010RandSeed\030\002 \002(\r:\0010\022\025\n\nValuePoint\030\003"
    " \002(\005:\0010\022\032\n\017StrengthenLevel\030\004 \002(\005:\0010\022\016\n\003P"
    "os\030\005 \002(\005:\0010\"!\n\rKPBCustomData\022\020\n\006Byffer\030\001"
    " \002(\014:\000\"\234\001\n\017KPBHeroDataList\0220\n\016HeroDataLi"
    "stDB\030\001 \002(\0132\030.T3DB.KPB_HERO_DATA_LIST\022%\n\010"
    "HeroData\030\002 \003(\0132\023.T3DB.KPB_HERO_DATA\0220\n\016B"
    "uffDataListDB\030\003 \002(\0132\030.T3DB.KPB_BUFF_DATA"
    "_LIST\"D\n\nKPBPackage\022%\n\010EquiData\030\001 \003(\0132\023."
    "T3DB.KPB_EQUI_DATA\022\017\n\004Size\030\002 \002(\r:\0010\"5\n\020K"
    "PBPlayerPackage\022!\n\007Package\030\001 \003(\0132\020.T3DB."
    "KPBPackage\"N\n\016KPBHeroPackage\022\031\n\016HeroTemp"
    "lateID\030\001 \002(\r:\0010\022!\n\007Package\030\002 \002(\0132\020.T3DB."
    "KPBPackage\"g\n\013KPBItemList\022-\n\rPlayerPacka"
    "ge\030\001 \002(\0132\026.T3DB.KPBPlayerPackage\022)\n\013Hero"
    "Package\030\002 \003(\0132\024.T3DB.KPBHeroPackage\"\?\n\013K"
    "PBMoneyMgr\0220\n\rRoleMoneyInfo\030\001 \002(\0132\031.T3DB"
    ".KPB_ROLE_MONEY_DATA\"-\n\022KPBUserPreferenc"
    "es\022\027\n\rUserPrefences\030\001 \002(\014:\000\"M\n\021KPB_COOLD"
    "OWN_DATA\022\022\n\007TimerID\030\001 \002(\r:\0010\022\017\n\004Time\030\002 \002"
    "(\005:\0010\022\023\n\010Interval\030\003 \002(\005:\0010\"G\n\026KPB_COOLDO"
    "WN_LIST_DATA\022-\n\014CoolDownData\030\002 \003(\0132\027.T3D"
    "B.KPB_COOLDOWN_DATA\"D\n\016KPBCDTimerList\0222\n"
    "\014CoolDownList\030\001 \002(\0132\034.T3DB.KPB_COOLDOWN_"
    "LIST_DATA\"\213\001\n\014KPBQuestList\022\030\n\016QuestState"
    "List\030\001 \002(\014:\000\0221\n\021AcceptedQuestList\030\002 \003(\0132"
    "\026.T3DB.KPB_ACCEPT_QUEST\022.\n\nDailyQuest\030\003 "
    "\002(\0132\032.T3DB.KPB_DAILY_QUEST_DATA\"\207\001\n\022KPBH"
    "eroTrainingMgr\022>\n\022TrainingDataHeader\030\001 \002"
    "(\0132\".T3DB.KPB_HEROTRAINING_DATA_HEADER\0221"
    "\n\014TrainingData\030\002 \003(\0132\033.T3DB.KPB_HEROTRAI"
    "NING_DATA\"=\n\016KPBMissionData\022+\n\013MissionDa"
    "ta\030\001 \002(\0132\026.T3DB.KPB_MISSION_DATA\"L\n\020KPBM"
    "akingMachine\0228\n\021MakingMachineData\030\001 \002(\0132"
    "\035.T3DB.KPB_MAKING_MACHINE_DATA\"I\n\017KPBUpg"
    "radeQueue\0226\n\020UpgradeQueueData\030\001 \002(\0132\034.T3"
    "DB.KPB_UPGRADE_QUEUE_DATA\"-\n\006KPBGym\022#\n\007G"
    "ymData\030\001 \002(\0132\022.T3DB.KPB_GYM_DATA\"F\n\021KPBB"
    "usinessStreet\0221\n\nStreetData\030\001 \002(\0132\035.T3DB"
    ".KPB_BUSINESSSTREET_DATA\"9\n\014KPBSecretary"
    "\022)\n\nReportItem\030\001 \003(\0132\025.T3DB.KPB_REPORT_I"
    "TEM\"K\n\022KPBCheerleadingMgr\0225\n\020Cheerleadin"
    "gData\030\001 \002(\0132\033.T3DB.KPB_CHEERLEADING_DATA"
    "\"<\n\013KPBWardrobe\022-\n\014WardrobeData\030\001 \002(\0132\027."
    "T3DB.KPB_WARDROBE_DATA\"@\n\021KPB_WARDROBE_D"
    "ATA\022+\n\013FashionData\030\001 \003(\0132\026.T3DB.KPB_FASH"
    "ION_DATA\"\\\n\020KPB_FASHION_DATA\022\024\n\tFashionI"
    "D\030\001 \002(\r:\0010\022\027\n\014OverduePoint\030\002 \002(\r:\0010\022\031\n\016B"
    "elongToHeroID\030\003 \002(\r:\0010\"-\n\020KPB_PLAYER_VAL"
    "UE\022\031\n\017PlayerValueData\030\001 \002(\014:\000\"\231\001\n\021KPB_Te"
    "amLogo_Info\022\032\n\017TeamLogoFrameID\030\001 \002(\005:\0010\022"
    "\033\n\020TeamLogoEmblemID\030\002 \002(\005:\0010\022\034\n\021TeamLogo"
    "InfoCount\030\003 \002(\005:\0010\022-\n\014TeamLogoData\030\004 \003(\013"
    "2\027.T3DB.KPB_TEAMLOGO_DATA\"-\n\021KPB_TEAMLOG"
    "O_DATA\022\030\n\rOwnTeamLogoID\030\001 \002(\005:\0010\"S\n\"KPB_"
    "ACHIEVEMENT_ITEM_PROGRESS_DATA\022\030\n\rAchiev"
    "ementID\030\001 \002(\r:\0010\022\023\n\010CurValue\030\002 \002(\005:\0010\"\207\001"
    "\n\024KPB_ACHIEVEMENT_DATA\022\033\n\020AchievementPoi"
    "nt\030\001 \002(\005:\0010\022\023\n\tStateData\030\002 \002(\014:\000\022=\n\013Prog"
    "ressing\030\003 \003(\0132(.T3DB.KPB_ACHIEVEMENT_ITE"
    "M_PROGRESS_DATA\"\242\010\n\rKPB_SAVE_DATA\022\'\n\nCus"
    "tomData\030\001 \002(\0132\023.T3DB.KPBCustomData\022+\n\014He"
    "roDataList\030\002 \002(\0132\025.T3DB.KPBHeroDataList\022"
    "#\n\010ItemList\030\003 \002(\0132\021.T3DB.KPBItemList\022#\n\010"
    "MoneyMgr\030\004 \002(\0132\021.T3DB.KPBMoneyMgr\0221\n\017Use"
    "rPreferences\030\005 \002(\0132\030.T3DB.KPBUserPrefere"
    "nces\022)\n\013CDTimerList\030\006 \002(\0132\024.T3DB.KPBCDTi"
    "merList\022%\n\tQuestList\030\007 \002(\0132\022.T3DB.KPBQue"
    "stList\0221\n\017HeroTrainingMgr\030\010 \002(\0132\030.T3DB.K"
    "PBHeroTrainingMgr\022)\n\013MissionData\030\t \002(\0132\024"
    ".T3DB.KPBMissionData\022-\n\rMakingMachine\030\n "
    "\002(\0132\026.T3DB.KPBMakingMachine\022\031\n\003Gym\030\013 \002(\013"
    "2\014.T3DB.KPBGym\022+\n\014UpgradeQueue\030\014 \002(\0132\025.T"
    "3DB.KPBUpgradeQueue\022/\n\016BusinessStreet\030\r "
    "\002(\0132\027.T3DB.KPBBusinessStreet\022%\n\tSecretar"
    "y\030\016 \002(\0132\022.T3DB.KPBSecretary\0221\n\017Cheerlead"
    "ingMgr\030\017 \002(\0132\030.T3DB.KPBCheerleadingMgr\0220"
    "\n\rRoleStateInfo\030\020 \002(\0132\031.T3DB.KPB_ROLE_ST"
    "ATE_INFO\022#\n\010Wardrobe\030\021 \002(\0132\021.T3DB.KPBWar"
    "drobe\022+\n\013PlayerValue\030\022 \002(\0132\026.T3DB.KPB_PL"
    "AYER_VALUE\022-\n\014TeamLogoInfo\030\023 \002(\0132\027.T3DB."
    "KPB_TeamLogo_Info\0223\n\017AchievementData\030\024 \002"
    "(\0132\032.T3DB.KPB_ACHIEVEMENT_DATA\0225\n\020Active"
    "PlayerData\030\025 \002(\0132\033.T3DB.KPB_ACTIVEPLAYER"
    "_DATA\0220\n\016BuffDataListDB\030\026 \002(\0132\030.T3DB.KPB"
    "_BUFF_DATA_LIST\022;\n\022HeroUnlockDataList\030\027 "
    "\002(\0132\037.T3DB.KPB_HERO_UNLOCK_DATA_LIST\"8\n\017"
    "KPB_ACTIVE_PROC\022\020\n\005Value\030\001 \002(\r:\0010\022\023\n\010Fin"
    "ished\030\002 \002(\r:\0010\"\257\001\n\025KPB_ACTIVEPLAYER_DATA"
    "\022\031\n\016CurActivePoint\030\001 \002(\r:\0010\022\033\n\017AwardAlre"
    "adyGet\030\002 \003(\rB\002\020\001\022)\n\nActiveProc\030\003 \003(\0132\025.T"
    "3DB.KPB_ACTIVE_PROC\022\033\n\020CostFatiguePoint\030"
    "\004 \002(\r:\0010\022\026\n\013OnlineFrame\030\005 \002(\r:\0010\"H\n\024KPB_"
    "HERO_UNLOCK_DATA\022\031\n\016HeroTemplateID\030\001 \002(\r"
    ":\0010\022\025\n\nUnLockTime\030\002 \002(\r:\0010\"O\n\031KPB_HERO_U"
    "NLOCK_DATA_LIST\0222\n\016HeroUnlockData\030\001 \003(\0132"
    "\032.T3DB.KPB_HERO_UNLOCK_DATAB\023\n\021gateway.r"
    "oledb.t3", 8248);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "t3db.proto", &protobuf_RegisterTypes);
  KPBRoleBaseHeader::default_instance_ = new KPBRoleBaseHeader();
  KPBROLE_POSITION_DB::default_instance_ = new KPBROLE_POSITION_DB();
  KPBRoleBaseInfo::default_instance_ = new KPBRoleBaseInfo();
  KPBROLE_LIST_INFO::default_instance_ = new KPBROLE_LIST_INFO();
  KPBRoleDataHeader::default_instance_ = new KPBRoleDataHeader();
  KPBRoleBlockHeader::default_instance_ = new KPBRoleBlockHeader();
  KPB_ROLE_STATE_INFO::default_instance_ = new KPB_ROLE_STATE_INFO();
  KPB_USER_ROLE_GENERATOR_PARAM::default_instance_ = new KPB_USER_ROLE_GENERATOR_PARAM();
  KPB_ROLE_GENERATOR_PARAM::default_instance_ = new KPB_ROLE_GENERATOR_PARAM();
  KPB_HERO_DATA_LIST::default_instance_ = new KPB_HERO_DATA_LIST();
  KPB_HERO_DATA::default_instance_ = new KPB_HERO_DATA();
  KPB_BUFF_DATA::default_instance_ = new KPB_BUFF_DATA();
  KPB_BUFF_DATA_LIST::default_instance_ = new KPB_BUFF_DATA_LIST();
  KPB_ROLE_MONEY_DATA::default_instance_ = new KPB_ROLE_MONEY_DATA();
  KPB_ACCEPT_QUEST::default_instance_ = new KPB_ACCEPT_QUEST();
  KPB_DAILY_QUEST::default_instance_ = new KPB_DAILY_QUEST();
  KPB_DAILY_QUEST_DATA::default_instance_ = new KPB_DAILY_QUEST_DATA();
  KPB_HEROTRAINING_DATA_HEADER::default_instance_ = new KPB_HEROTRAINING_DATA_HEADER();
  KPB_HEROTRAINING_DATA::default_instance_ = new KPB_HEROTRAINING_DATA();
  KPB_ONE_MISSION_DATA::default_instance_ = new KPB_ONE_MISSION_DATA();
  KPB_MISSION_DATA::default_instance_ = new KPB_MISSION_DATA();
  KPB_MAKING_MACHINE_DATA::default_instance_ = new KPB_MAKING_MACHINE_DATA();
  KPB_UPGRADE_NODE::default_instance_ = new KPB_UPGRADE_NODE();
  KPB_UPGRADE_QUEUE_DATA::default_instance_ = new KPB_UPGRADE_QUEUE_DATA();
  KPB_USINGEQUIP_INFO::default_instance_ = new KPB_USINGEQUIP_INFO();
  KPB_GYM_DATA::default_instance_ = new KPB_GYM_DATA();
  KPB_STORE_DATA::default_instance_ = new KPB_STORE_DATA();
  KPB_BUSINESSSTREET_DATA::default_instance_ = new KPB_BUSINESSSTREET_DATA();
  KPB_REPORT_ITEM::default_instance_ = new KPB_REPORT_ITEM();
  KPB_CHEERLEADING_ITEM::default_instance_ = new KPB_CHEERLEADING_ITEM();
  KPB_CHEERLEADING_SLOTINFO::default_instance_ = new KPB_CHEERLEADING_SLOTINFO();
  KPB_CHEERLEADING_DATA::default_instance_ = new KPB_CHEERLEADING_DATA();
  KPBCommonItemData::default_instance_ = new KPBCommonItemData();
  KPB_EQUI_DATA::default_instance_ = new KPB_EQUI_DATA();
  KPBCustomData::default_instance_ = new KPBCustomData();
  KPBHeroDataList::default_instance_ = new KPBHeroDataList();
  KPBPackage::default_instance_ = new KPBPackage();
  KPBPlayerPackage::default_instance_ = new KPBPlayerPackage();
  KPBHeroPackage::default_instance_ = new KPBHeroPackage();
  KPBItemList::default_instance_ = new KPBItemList();
  KPBMoneyMgr::default_instance_ = new KPBMoneyMgr();
  KPBUserPreferences::default_instance_ = new KPBUserPreferences();
  KPB_COOLDOWN_DATA::default_instance_ = new KPB_COOLDOWN_DATA();
  KPB_COOLDOWN_LIST_DATA::default_instance_ = new KPB_COOLDOWN_LIST_DATA();
  KPBCDTimerList::default_instance_ = new KPBCDTimerList();
  KPBQuestList::default_instance_ = new KPBQuestList();
  KPBHeroTrainingMgr::default_instance_ = new KPBHeroTrainingMgr();
  KPBMissionData::default_instance_ = new KPBMissionData();
  KPBMakingMachine::default_instance_ = new KPBMakingMachine();
  KPBUpgradeQueue::default_instance_ = new KPBUpgradeQueue();
  KPBGym::default_instance_ = new KPBGym();
  KPBBusinessStreet::default_instance_ = new KPBBusinessStreet();
  KPBSecretary::default_instance_ = new KPBSecretary();
  KPBCheerleadingMgr::default_instance_ = new KPBCheerleadingMgr();
  KPBWardrobe::default_instance_ = new KPBWardrobe();
  KPB_WARDROBE_DATA::default_instance_ = new KPB_WARDROBE_DATA();
  KPB_FASHION_DATA::default_instance_ = new KPB_FASHION_DATA();
  KPB_PLAYER_VALUE::default_instance_ = new KPB_PLAYER_VALUE();
  KPB_TeamLogo_Info::default_instance_ = new KPB_TeamLogo_Info();
  KPB_TEAMLOGO_DATA::default_instance_ = new KPB_TEAMLOGO_DATA();
  KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::default_instance_ = new KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA();
  KPB_ACHIEVEMENT_DATA::default_instance_ = new KPB_ACHIEVEMENT_DATA();
  KPB_SAVE_DATA::default_instance_ = new KPB_SAVE_DATA();
  KPB_ACTIVE_PROC::default_instance_ = new KPB_ACTIVE_PROC();
  KPB_ACTIVEPLAYER_DATA::default_instance_ = new KPB_ACTIVEPLAYER_DATA();
  KPB_HERO_UNLOCK_DATA::default_instance_ = new KPB_HERO_UNLOCK_DATA();
  KPB_HERO_UNLOCK_DATA_LIST::default_instance_ = new KPB_HERO_UNLOCK_DATA_LIST();
  KPBRoleBaseHeader::default_instance_->InitAsDefaultInstance();
  KPBROLE_POSITION_DB::default_instance_->InitAsDefaultInstance();
  KPBRoleBaseInfo::default_instance_->InitAsDefaultInstance();
  KPBROLE_LIST_INFO::default_instance_->InitAsDefaultInstance();
  KPBRoleDataHeader::default_instance_->InitAsDefaultInstance();
  KPBRoleBlockHeader::default_instance_->InitAsDefaultInstance();
  KPB_ROLE_STATE_INFO::default_instance_->InitAsDefaultInstance();
  KPB_USER_ROLE_GENERATOR_PARAM::default_instance_->InitAsDefaultInstance();
  KPB_ROLE_GENERATOR_PARAM::default_instance_->InitAsDefaultInstance();
  KPB_HERO_DATA_LIST::default_instance_->InitAsDefaultInstance();
  KPB_HERO_DATA::default_instance_->InitAsDefaultInstance();
  KPB_BUFF_DATA::default_instance_->InitAsDefaultInstance();
  KPB_BUFF_DATA_LIST::default_instance_->InitAsDefaultInstance();
  KPB_ROLE_MONEY_DATA::default_instance_->InitAsDefaultInstance();
  KPB_ACCEPT_QUEST::default_instance_->InitAsDefaultInstance();
  KPB_DAILY_QUEST::default_instance_->InitAsDefaultInstance();
  KPB_DAILY_QUEST_DATA::default_instance_->InitAsDefaultInstance();
  KPB_HEROTRAINING_DATA_HEADER::default_instance_->InitAsDefaultInstance();
  KPB_HEROTRAINING_DATA::default_instance_->InitAsDefaultInstance();
  KPB_ONE_MISSION_DATA::default_instance_->InitAsDefaultInstance();
  KPB_MISSION_DATA::default_instance_->InitAsDefaultInstance();
  KPB_MAKING_MACHINE_DATA::default_instance_->InitAsDefaultInstance();
  KPB_UPGRADE_NODE::default_instance_->InitAsDefaultInstance();
  KPB_UPGRADE_QUEUE_DATA::default_instance_->InitAsDefaultInstance();
  KPB_USINGEQUIP_INFO::default_instance_->InitAsDefaultInstance();
  KPB_GYM_DATA::default_instance_->InitAsDefaultInstance();
  KPB_STORE_DATA::default_instance_->InitAsDefaultInstance();
  KPB_BUSINESSSTREET_DATA::default_instance_->InitAsDefaultInstance();
  KPB_REPORT_ITEM::default_instance_->InitAsDefaultInstance();
  KPB_CHEERLEADING_ITEM::default_instance_->InitAsDefaultInstance();
  KPB_CHEERLEADING_SLOTINFO::default_instance_->InitAsDefaultInstance();
  KPB_CHEERLEADING_DATA::default_instance_->InitAsDefaultInstance();
  KPBCommonItemData::default_instance_->InitAsDefaultInstance();
  KPB_EQUI_DATA::default_instance_->InitAsDefaultInstance();
  KPBCustomData::default_instance_->InitAsDefaultInstance();
  KPBHeroDataList::default_instance_->InitAsDefaultInstance();
  KPBPackage::default_instance_->InitAsDefaultInstance();
  KPBPlayerPackage::default_instance_->InitAsDefaultInstance();
  KPBHeroPackage::default_instance_->InitAsDefaultInstance();
  KPBItemList::default_instance_->InitAsDefaultInstance();
  KPBMoneyMgr::default_instance_->InitAsDefaultInstance();
  KPBUserPreferences::default_instance_->InitAsDefaultInstance();
  KPB_COOLDOWN_DATA::default_instance_->InitAsDefaultInstance();
  KPB_COOLDOWN_LIST_DATA::default_instance_->InitAsDefaultInstance();
  KPBCDTimerList::default_instance_->InitAsDefaultInstance();
  KPBQuestList::default_instance_->InitAsDefaultInstance();
  KPBHeroTrainingMgr::default_instance_->InitAsDefaultInstance();
  KPBMissionData::default_instance_->InitAsDefaultInstance();
  KPBMakingMachine::default_instance_->InitAsDefaultInstance();
  KPBUpgradeQueue::default_instance_->InitAsDefaultInstance();
  KPBGym::default_instance_->InitAsDefaultInstance();
  KPBBusinessStreet::default_instance_->InitAsDefaultInstance();
  KPBSecretary::default_instance_->InitAsDefaultInstance();
  KPBCheerleadingMgr::default_instance_->InitAsDefaultInstance();
  KPBWardrobe::default_instance_->InitAsDefaultInstance();
  KPB_WARDROBE_DATA::default_instance_->InitAsDefaultInstance();
  KPB_FASHION_DATA::default_instance_->InitAsDefaultInstance();
  KPB_PLAYER_VALUE::default_instance_->InitAsDefaultInstance();
  KPB_TeamLogo_Info::default_instance_->InitAsDefaultInstance();
  KPB_TEAMLOGO_DATA::default_instance_->InitAsDefaultInstance();
  KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::default_instance_->InitAsDefaultInstance();
  KPB_ACHIEVEMENT_DATA::default_instance_->InitAsDefaultInstance();
  KPB_SAVE_DATA::default_instance_->InitAsDefaultInstance();
  KPB_ACTIVE_PROC::default_instance_->InitAsDefaultInstance();
  KPB_ACTIVEPLAYER_DATA::default_instance_->InitAsDefaultInstance();
  KPB_HERO_UNLOCK_DATA::default_instance_->InitAsDefaultInstance();
  KPB_HERO_UNLOCK_DATA_LIST::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_t3db_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_t3db_2eproto {
  StaticDescriptorInitializer_t3db_2eproto() {
    protobuf_AddDesc_t3db_2eproto();
  }
} static_descriptor_initializer_t3db_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int KPBRoleBaseHeader::kVersionFieldNumber;
#endif  // !_MSC_VER

KPBRoleBaseHeader::KPBRoleBaseHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBRoleBaseHeader::InitAsDefaultInstance() {
}

KPBRoleBaseHeader::KPBRoleBaseHeader(const KPBRoleBaseHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBRoleBaseHeader::SharedCtor() {
  _cached_size_ = 0;
  version_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBRoleBaseHeader::~KPBRoleBaseHeader() {
  SharedDtor();
}

void KPBRoleBaseHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPBRoleBaseHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBRoleBaseHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBRoleBaseHeader_descriptor_;
}

const KPBRoleBaseHeader& KPBRoleBaseHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBRoleBaseHeader* KPBRoleBaseHeader::default_instance_ = NULL;

KPBRoleBaseHeader* KPBRoleBaseHeader::New() const {
  return new KPBRoleBaseHeader;
}

void KPBRoleBaseHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    version_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBRoleBaseHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Version = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
          set_has_version();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBRoleBaseHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Version = 1 [default = 0];
  if (has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBRoleBaseHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Version = 1 [default = 0];
  if (has_version()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBRoleBaseHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Version = 1 [default = 0];
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBRoleBaseHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBRoleBaseHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBRoleBaseHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBRoleBaseHeader::MergeFrom(const KPBRoleBaseHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_version()) {
      set_version(from.version());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBRoleBaseHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBRoleBaseHeader::CopyFrom(const KPBRoleBaseHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBRoleBaseHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void KPBRoleBaseHeader::Swap(KPBRoleBaseHeader* other) {
  if (other != this) {
    std::swap(version_, other->version_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBRoleBaseHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBRoleBaseHeader_descriptor_;
  metadata.reflection = KPBRoleBaseHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBROLE_POSITION_DB::kMapIDFieldNumber;
const int KPBROLE_POSITION_DB::kMapCopyIndexFieldNumber;
#endif  // !_MSC_VER

KPBROLE_POSITION_DB::KPBROLE_POSITION_DB()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBROLE_POSITION_DB::InitAsDefaultInstance() {
}

KPBROLE_POSITION_DB::KPBROLE_POSITION_DB(const KPBROLE_POSITION_DB& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBROLE_POSITION_DB::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0u;
  mapcopyindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBROLE_POSITION_DB::~KPBROLE_POSITION_DB() {
  SharedDtor();
}

void KPBROLE_POSITION_DB::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPBROLE_POSITION_DB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBROLE_POSITION_DB::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBROLE_POSITION_DB_descriptor_;
}

const KPBROLE_POSITION_DB& KPBROLE_POSITION_DB::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBROLE_POSITION_DB* KPBROLE_POSITION_DB::default_instance_ = NULL;

KPBROLE_POSITION_DB* KPBROLE_POSITION_DB::New() const {
  return new KPBROLE_POSITION_DB;
}

void KPBROLE_POSITION_DB::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0u;
    mapcopyindex_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBROLE_POSITION_DB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MapID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MapCopyIndex;
        break;
      }
      
      // required uint32 MapCopyIndex = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MapCopyIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mapcopyindex_)));
          set_has_mapcopyindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBROLE_POSITION_DB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MapID = 1 [default = 0];
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mapid(), output);
  }
  
  // required uint32 MapCopyIndex = 2 [default = 0];
  if (has_mapcopyindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->mapcopyindex(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBROLE_POSITION_DB::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 MapID = 1 [default = 0];
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->mapid(), target);
  }
  
  // required uint32 MapCopyIndex = 2 [default = 0];
  if (has_mapcopyindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->mapcopyindex(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBROLE_POSITION_DB::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MapID = 1 [default = 0];
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapid());
    }
    
    // required uint32 MapCopyIndex = 2 [default = 0];
    if (has_mapcopyindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mapcopyindex());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBROLE_POSITION_DB::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBROLE_POSITION_DB* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBROLE_POSITION_DB*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBROLE_POSITION_DB::MergeFrom(const KPBROLE_POSITION_DB& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_mapcopyindex()) {
      set_mapcopyindex(from.mapcopyindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBROLE_POSITION_DB::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBROLE_POSITION_DB::CopyFrom(const KPBROLE_POSITION_DB& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBROLE_POSITION_DB::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KPBROLE_POSITION_DB::Swap(KPBROLE_POSITION_DB* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(mapcopyindex_, other->mapcopyindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBROLE_POSITION_DB::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBROLE_POSITION_DB_descriptor_;
  metadata.reflection = KPBROLE_POSITION_DB_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBRoleBaseInfo::kBaseHeaderFieldNumber;
const int KPBRoleBaseInfo::kCurrentPosFieldNumber;
const int KPBRoleBaseInfo::kLastSaveTimeFieldNumber;
const int KPBRoleBaseInfo::kLastLogintimeFieldNumber;
const int KPBRoleBaseInfo::kTotalGameTimeFieldNumber;
const int KPBRoleBaseInfo::kCreateTimeFieldNumber;
const int KPBRoleBaseInfo::kGenderFieldNumber;
const int KPBRoleBaseInfo::kHighestLevelFieldNumber;
const int KPBRoleBaseInfo::kVIPLevelFieldNumber;
const int KPBRoleBaseInfo::kVIPExpFieldNumber;
const int KPBRoleBaseInfo::kLevelFieldNumber;
const int KPBRoleBaseInfo::kExpFieldNumber;
#endif  // !_MSC_VER

KPBRoleBaseInfo::KPBRoleBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBRoleBaseInfo::InitAsDefaultInstance() {
  baseheader_ = const_cast< ::T3DB::KPBRoleBaseHeader*>(&::T3DB::KPBRoleBaseHeader::default_instance());
  currentpos_ = const_cast< ::T3DB::KPBROLE_POSITION_DB*>(&::T3DB::KPBROLE_POSITION_DB::default_instance());
}

KPBRoleBaseInfo::KPBRoleBaseInfo(const KPBRoleBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBRoleBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  baseheader_ = NULL;
  currentpos_ = NULL;
  lastsavetime_ = GOOGLE_ULONGLONG(0);
  lastlogintime_ = GOOGLE_LONGLONG(0);
  totalgametime_ = 0;
  createtime_ = 0;
  gender_ = 0;
  highestlevel_ = 0u;
  viplevel_ = 0;
  vipexp_ = 0;
  level_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBRoleBaseInfo::~KPBRoleBaseInfo() {
  SharedDtor();
}

void KPBRoleBaseInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseheader_;
    delete currentpos_;
  }
}

void KPBRoleBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBRoleBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBRoleBaseInfo_descriptor_;
}

const KPBRoleBaseInfo& KPBRoleBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBRoleBaseInfo* KPBRoleBaseInfo::default_instance_ = NULL;

KPBRoleBaseInfo* KPBRoleBaseInfo::New() const {
  return new KPBRoleBaseInfo;
}

void KPBRoleBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseheader()) {
      if (baseheader_ != NULL) baseheader_->::T3DB::KPBRoleBaseHeader::Clear();
    }
    if (has_currentpos()) {
      if (currentpos_ != NULL) currentpos_->::T3DB::KPBROLE_POSITION_DB::Clear();
    }
    lastsavetime_ = GOOGLE_ULONGLONG(0);
    lastlogintime_ = GOOGLE_LONGLONG(0);
    totalgametime_ = 0;
    createtime_ = 0;
    gender_ = 0;
    highestlevel_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    viplevel_ = 0;
    vipexp_ = 0;
    level_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBRoleBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPBRoleBaseHeader BaseHeader = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseheader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CurrentPos;
        break;
      }
      
      // required .T3DB.KPBROLE_POSITION_DB CurrentPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CurrentPos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentpos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_LastSaveTime;
        break;
      }
      
      // required uint64 LastSaveTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastSaveTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastsavetime_)));
          set_has_lastsavetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_LastLogintime;
        break;
      }
      
      // required sint64 LastLogintime = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastLogintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SINT64>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_TotalGameTime;
        break;
      }
      
      // required int32 TotalGameTime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TotalGameTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalgametime_)));
          set_has_totalgametime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CreateTime;
        break;
      }
      
      // required int32 CreateTime = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CreateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_Gender;
        break;
      }
      
      // required int32 Gender = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gender_)));
          set_has_gender();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_HighestLevel;
        break;
      }
      
      // required uint32 HighestLevel = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HighestLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &highestlevel_)));
          set_has_highestlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VIPLevel;
        break;
      }
      
      // required int32 VIPLevel = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VIPLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_VIPExp;
        break;
      }
      
      // required int32 VIPExp = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VIPExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipexp_)));
          set_has_vipexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_Level;
        break;
      }
      
      // required int32 Level = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_Exp;
        break;
      }
      
      // required int32 Exp = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBRoleBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPBRoleBaseHeader BaseHeader = 1;
  if (has_baseheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseheader(), output);
  }
  
  // required .T3DB.KPBROLE_POSITION_DB CurrentPos = 2;
  if (has_currentpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->currentpos(), output);
  }
  
  // required uint64 LastSaveTime = 3 [default = 0];
  if (has_lastsavetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lastsavetime(), output);
  }
  
  // required sint64 LastLogintime = 4 [default = 0];
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt64(4, this->lastlogintime(), output);
  }
  
  // required int32 TotalGameTime = 5 [default = 0];
  if (has_totalgametime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalgametime(), output);
  }
  
  // required int32 CreateTime = 6 [default = 0];
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->createtime(), output);
  }
  
  // required int32 Gender = 7 [default = 0];
  if (has_gender()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gender(), output);
  }
  
  // required uint32 HighestLevel = 8 [default = 0];
  if (has_highestlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->highestlevel(), output);
  }
  
  // required int32 VIPLevel = 9 [default = 0];
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->viplevel(), output);
  }
  
  // required int32 VIPExp = 10 [default = 0];
  if (has_vipexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->vipexp(), output);
  }
  
  // required int32 Level = 11 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->level(), output);
  }
  
  // required int32 Exp = 12 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->exp(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBRoleBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPBRoleBaseHeader BaseHeader = 1;
  if (has_baseheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseheader(), target);
  }
  
  // required .T3DB.KPBROLE_POSITION_DB CurrentPos = 2;
  if (has_currentpos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->currentpos(), target);
  }
  
  // required uint64 LastSaveTime = 3 [default = 0];
  if (has_lastsavetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lastsavetime(), target);
  }
  
  // required sint64 LastLogintime = 4 [default = 0];
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt64ToArray(4, this->lastlogintime(), target);
  }
  
  // required int32 TotalGameTime = 5 [default = 0];
  if (has_totalgametime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalgametime(), target);
  }
  
  // required int32 CreateTime = 6 [default = 0];
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->createtime(), target);
  }
  
  // required int32 Gender = 7 [default = 0];
  if (has_gender()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gender(), target);
  }
  
  // required uint32 HighestLevel = 8 [default = 0];
  if (has_highestlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->highestlevel(), target);
  }
  
  // required int32 VIPLevel = 9 [default = 0];
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->viplevel(), target);
  }
  
  // required int32 VIPExp = 10 [default = 0];
  if (has_vipexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->vipexp(), target);
  }
  
  // required int32 Level = 11 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->level(), target);
  }
  
  // required int32 Exp = 12 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->exp(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBRoleBaseInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPBRoleBaseHeader BaseHeader = 1;
    if (has_baseheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseheader());
    }
    
    // required .T3DB.KPBROLE_POSITION_DB CurrentPos = 2;
    if (has_currentpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->currentpos());
    }
    
    // required uint64 LastSaveTime = 3 [default = 0];
    if (has_lastsavetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastsavetime());
    }
    
    // required sint64 LastLogintime = 4 [default = 0];
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::SInt64Size(
          this->lastlogintime());
    }
    
    // required int32 TotalGameTime = 5 [default = 0];
    if (has_totalgametime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalgametime());
    }
    
    // required int32 CreateTime = 6 [default = 0];
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->createtime());
    }
    
    // required int32 Gender = 7 [default = 0];
    if (has_gender()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gender());
    }
    
    // required uint32 HighestLevel = 8 [default = 0];
    if (has_highestlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->highestlevel());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 VIPLevel = 9 [default = 0];
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }
    
    // required int32 VIPExp = 10 [default = 0];
    if (has_vipexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipexp());
    }
    
    // required int32 Level = 11 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 Exp = 12 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBRoleBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBRoleBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBRoleBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBRoleBaseInfo::MergeFrom(const KPBRoleBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseheader()) {
      mutable_baseheader()->::T3DB::KPBRoleBaseHeader::MergeFrom(from.baseheader());
    }
    if (from.has_currentpos()) {
      mutable_currentpos()->::T3DB::KPBROLE_POSITION_DB::MergeFrom(from.currentpos());
    }
    if (from.has_lastsavetime()) {
      set_lastsavetime(from.lastsavetime());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_totalgametime()) {
      set_totalgametime(from.totalgametime());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_gender()) {
      set_gender(from.gender());
    }
    if (from.has_highestlevel()) {
      set_highestlevel(from.highestlevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_vipexp()) {
      set_vipexp(from.vipexp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBRoleBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBRoleBaseInfo::CopyFrom(const KPBRoleBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBRoleBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;
  
  if (has_baseheader()) {
    if (!this->baseheader().IsInitialized()) return false;
  }
  if (has_currentpos()) {
    if (!this->currentpos().IsInitialized()) return false;
  }
  return true;
}

void KPBRoleBaseInfo::Swap(KPBRoleBaseInfo* other) {
  if (other != this) {
    std::swap(baseheader_, other->baseheader_);
    std::swap(currentpos_, other->currentpos_);
    std::swap(lastsavetime_, other->lastsavetime_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(totalgametime_, other->totalgametime_);
    std::swap(createtime_, other->createtime_);
    std::swap(gender_, other->gender_);
    std::swap(highestlevel_, other->highestlevel_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(vipexp_, other->vipexp_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBRoleBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBRoleBaseInfo_descriptor_;
  metadata.reflection = KPBRoleBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBROLE_LIST_INFO::kPlayerIDFieldNumber;
const int KPBROLE_LIST_INFO::kAccountFieldNumber;
const int KPBROLE_LIST_INFO::kGroupIDFieldNumber;
const int KPBROLE_LIST_INFO::kRoleNameFieldNumber;
const int KPBROLE_LIST_INFO::kBaseInfoFieldNumber;
const int KPBROLE_LIST_INFO::kCanRenameFieldNumber;
#endif  // !_MSC_VER

KPBROLE_LIST_INFO::KPBROLE_LIST_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBROLE_LIST_INFO::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::T3DB::KPBRoleBaseInfo*>(&::T3DB::KPBRoleBaseInfo::default_instance());
}

KPBROLE_LIST_INFO::KPBROLE_LIST_INFO(const KPBROLE_LIST_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBROLE_LIST_INFO::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  baseinfo_ = NULL;
  canrename_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBROLE_LIST_INFO::~KPBROLE_LIST_INFO() {
  SharedDtor();
}

void KPBROLE_LIST_INFO::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void KPBROLE_LIST_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBROLE_LIST_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBROLE_LIST_INFO_descriptor_;
}

const KPBROLE_LIST_INFO& KPBROLE_LIST_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBROLE_LIST_INFO* KPBROLE_LIST_INFO::default_instance_ = NULL;

KPBROLE_LIST_INFO* KPBROLE_LIST_INFO::New() const {
  return new KPBROLE_LIST_INFO;
}

void KPBROLE_LIST_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    groupid_ = 0;
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::T3DB::KPBRoleBaseInfo::Clear();
    }
    canrename_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBROLE_LIST_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 PlayerID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Account;
        break;
      }
      
      // required bytes Account = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_account()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_GroupID;
        break;
      }
      
      // required int32 GroupID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_RoleName;
        break;
      }
      
      // required bytes RoleName = 4 [default = ""];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_BaseInfo;
        break;
      }
      
      // required .T3DB.KPBRoleBaseInfo BaseInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BaseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_CanRename;
        break;
      }
      
      // required int32 CanRename = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CanRename:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canrename_)));
          set_has_canrename();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBROLE_LIST_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 PlayerID = 1 [default = 0];
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->playerid(), output);
  }
  
  // required bytes Account = 2 [default = ""];
  if (has_account()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->account(), output);
  }
  
  // required int32 GroupID = 3 [default = 0];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->groupid(), output);
  }
  
  // required bytes RoleName = 4 [default = ""];
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->rolename(), output);
  }
  
  // required .T3DB.KPBRoleBaseInfo BaseInfo = 5;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->baseinfo(), output);
  }
  
  // required int32 CanRename = 6 [default = 0];
  if (has_canrename()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->canrename(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBROLE_LIST_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 PlayerID = 1 [default = 0];
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->playerid(), target);
  }
  
  // required bytes Account = 2 [default = ""];
  if (has_account()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->account(), target);
  }
  
  // required int32 GroupID = 3 [default = 0];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->groupid(), target);
  }
  
  // required bytes RoleName = 4 [default = ""];
  if (has_rolename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->rolename(), target);
  }
  
  // required .T3DB.KPBRoleBaseInfo BaseInfo = 5;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->baseinfo(), target);
  }
  
  // required int32 CanRename = 6 [default = 0];
  if (has_canrename()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->canrename(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBROLE_LIST_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 PlayerID = 1 [default = 0];
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->playerid());
    }
    
    // required bytes Account = 2 [default = ""];
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->account());
    }
    
    // required int32 GroupID = 3 [default = 0];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }
    
    // required bytes RoleName = 4 [default = ""];
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rolename());
    }
    
    // required .T3DB.KPBRoleBaseInfo BaseInfo = 5;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }
    
    // required int32 CanRename = 6 [default = 0];
    if (has_canrename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canrename());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBROLE_LIST_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBROLE_LIST_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBROLE_LIST_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBROLE_LIST_INFO::MergeFrom(const KPBROLE_LIST_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::T3DB::KPBRoleBaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_canrename()) {
      set_canrename(from.canrename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBROLE_LIST_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBROLE_LIST_INFO::CopyFrom(const KPBROLE_LIST_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBROLE_LIST_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  return true;
}

void KPBROLE_LIST_INFO::Swap(KPBROLE_LIST_INFO* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(account_, other->account_);
    std::swap(groupid_, other->groupid_);
    std::swap(rolename_, other->rolename_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(canrename_, other->canrename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBROLE_LIST_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBROLE_LIST_INFO_descriptor_;
  metadata.reflection = KPBROLE_LIST_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBRoleDataHeader::kVerFieldNumber;
const int KPBRoleDataHeader::kCRCFieldNumber;
const int KPBRoleDataHeader::kLenFieldNumber;
#endif  // !_MSC_VER

KPBRoleDataHeader::KPBRoleDataHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBRoleDataHeader::InitAsDefaultInstance() {
}

KPBRoleDataHeader::KPBRoleDataHeader(const KPBRoleDataHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBRoleDataHeader::SharedCtor() {
  _cached_size_ = 0;
  ver_ = 0u;
  crc_ = 0u;
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBRoleDataHeader::~KPBRoleDataHeader() {
  SharedDtor();
}

void KPBRoleDataHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPBRoleDataHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBRoleDataHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBRoleDataHeader_descriptor_;
}

const KPBRoleDataHeader& KPBRoleDataHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBRoleDataHeader* KPBRoleDataHeader::default_instance_ = NULL;

KPBRoleDataHeader* KPBRoleDataHeader::New() const {
  return new KPBRoleDataHeader;
}

void KPBRoleDataHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ver_ = 0u;
    crc_ = 0u;
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBRoleDataHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Ver = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CRC;
        break;
      }
      
      // required uint32 CRC = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CRC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &crc_)));
          set_has_crc();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Len;
        break;
      }
      
      // required uint32 Len = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBRoleDataHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Ver = 1 [default = 0];
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ver(), output);
  }
  
  // required uint32 CRC = 2 [default = 0];
  if (has_crc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->crc(), output);
  }
  
  // required uint32 Len = 3 [default = 0];
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->len(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBRoleDataHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Ver = 1 [default = 0];
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ver(), target);
  }
  
  // required uint32 CRC = 2 [default = 0];
  if (has_crc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->crc(), target);
  }
  
  // required uint32 Len = 3 [default = 0];
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->len(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBRoleDataHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Ver = 1 [default = 0];
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }
    
    // required uint32 CRC = 2 [default = 0];
    if (has_crc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->crc());
    }
    
    // required uint32 Len = 3 [default = 0];
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBRoleDataHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBRoleDataHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBRoleDataHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBRoleDataHeader::MergeFrom(const KPBRoleDataHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_crc()) {
      set_crc(from.crc());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBRoleDataHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBRoleDataHeader::CopyFrom(const KPBRoleDataHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBRoleDataHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void KPBRoleDataHeader::Swap(KPBRoleDataHeader* other) {
  if (other != this) {
    std::swap(ver_, other->ver_);
    std::swap(crc_, other->crc_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBRoleDataHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBRoleDataHeader_descriptor_;
  metadata.reflection = KPBRoleDataHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBRoleBlockHeader::kTypeFieldNumber;
const int KPBRoleBlockHeader::kVerFieldNumber;
const int KPBRoleBlockHeader::kLenFieldNumber;
#endif  // !_MSC_VER

KPBRoleBlockHeader::KPBRoleBlockHeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBRoleBlockHeader::InitAsDefaultInstance() {
}

KPBRoleBlockHeader::KPBRoleBlockHeader(const KPBRoleBlockHeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBRoleBlockHeader::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ver_ = 0u;
  len_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBRoleBlockHeader::~KPBRoleBlockHeader() {
  SharedDtor();
}

void KPBRoleBlockHeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPBRoleBlockHeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBRoleBlockHeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBRoleBlockHeader_descriptor_;
}

const KPBRoleBlockHeader& KPBRoleBlockHeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBRoleBlockHeader* KPBRoleBlockHeader::default_instance_ = NULL;

KPBRoleBlockHeader* KPBRoleBlockHeader::New() const {
  return new KPBRoleBlockHeader;
}

void KPBRoleBlockHeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    ver_ = 0u;
    len_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBRoleBlockHeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Ver;
        break;
      }
      
      // required uint32 Ver = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ver:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ver_)));
          set_has_ver();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Len;
        break;
      }
      
      // required uint32 Len = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Len:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &len_)));
          set_has_len();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBRoleBlockHeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }
  
  // required uint32 Ver = 2 [default = 0];
  if (has_ver()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ver(), output);
  }
  
  // required uint32 Len = 3 [default = 0];
  if (has_len()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->len(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBRoleBlockHeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }
  
  // required uint32 Ver = 2 [default = 0];
  if (has_ver()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ver(), target);
  }
  
  // required uint32 Len = 3 [default = 0];
  if (has_len()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->len(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBRoleBlockHeader::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }
    
    // required uint32 Ver = 2 [default = 0];
    if (has_ver()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ver());
    }
    
    // required uint32 Len = 3 [default = 0];
    if (has_len()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->len());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBRoleBlockHeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBRoleBlockHeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBRoleBlockHeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBRoleBlockHeader::MergeFrom(const KPBRoleBlockHeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ver()) {
      set_ver(from.ver());
    }
    if (from.has_len()) {
      set_len(from.len());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBRoleBlockHeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBRoleBlockHeader::CopyFrom(const KPBRoleBlockHeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBRoleBlockHeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void KPBRoleBlockHeader::Swap(KPBRoleBlockHeader* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ver_, other->ver_);
    std::swap(len_, other->len_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBRoleBlockHeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBRoleBlockHeader_descriptor_;
  metadata.reflection = KPBRoleBlockHeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_ROLE_STATE_INFO::kLadderLosingStreakCountFieldNumber;
const int KPB_ROLE_STATE_INFO::kTalkWorldDailyCountFieldNumber;
const int KPB_ROLE_STATE_INFO::kLastHeroExpDecreasedTimeFieldNumber;
const int KPB_ROLE_STATE_INFO::kAILevelCoeFieldNumber;
const int KPB_ROLE_STATE_INFO::kCurFatiguePointFieldNumber;
const int KPB_ROLE_STATE_INFO::kVIPEndTimeFieldNumber;
const int KPB_ROLE_STATE_INFO::kTodayBuyFatiguePointTimesFieldNumber;
const int KPB_ROLE_STATE_INFO::kLastDailyRefreshTimeFieldNumber;
const int KPB_ROLE_STATE_INFO::kByVIPAutoRepairFlagFieldNumber;
const int KPB_ROLE_STATE_INFO::kNLastChallengeStep1FieldNumber;
const int KPB_ROLE_STATE_INFO::kNStartChallengeStep1FieldNumber;
const int KPB_ROLE_STATE_INFO::kClubApplyNumFieldNumber;
const int KPB_ROLE_STATE_INFO::kNOnlineGetAwardTimesFieldNumber;
const int KPB_ROLE_STATE_INFO::kLastDailyRefreshTimeZeroFieldNumber;
const int KPB_ROLE_STATE_INFO::kQuitClubTimeFieldNumber;
const int KPB_ROLE_STATE_INFO::kNRandomQuestIndexFieldNumber;
const int KPB_ROLE_STATE_INFO::kNSkipRandomQuestTimeFieldNumber;
const int KPB_ROLE_STATE_INFO::kFirstPvPFieldNumber;
const int KPB_ROLE_STATE_INFO::kRefuseStrangerFieldNumber;
const int KPB_ROLE_STATE_INFO::kNLastChallengeStep2FieldNumber;
const int KPB_ROLE_STATE_INFO::kNStartChallengeStep2FieldNumber;
const int KPB_ROLE_STATE_INFO::kNCurrentCityFieldNumber;
#endif  // !_MSC_VER

KPB_ROLE_STATE_INFO::KPB_ROLE_STATE_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_ROLE_STATE_INFO::InitAsDefaultInstance() {
}

KPB_ROLE_STATE_INFO::KPB_ROLE_STATE_INFO(const KPB_ROLE_STATE_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_ROLE_STATE_INFO::SharedCtor() {
  _cached_size_ = 0;
  ladderlosingstreakcount_ = 0u;
  talkworlddailycount_ = 0u;
  lastheroexpdecreasedtime_ = 0;
  ailevelcoe_ = 0;
  curfatiguepoint_ = 0u;
  vipendtime_ = 0;
  todaybuyfatiguepointtimes_ = 0u;
  lastdailyrefreshtime_ = 0;
  byvipautorepairflag_ = 0;
  nlastchallengestep1_ = 0;
  nstartchallengestep1_ = 0;
  clubapplynum_ = 0;
  nonlinegetawardtimes_ = 0;
  lastdailyrefreshtimezero_ = 0;
  quitclubtime_ = 0;
  nrandomquestindex_ = 0;
  nskiprandomquesttime_ = 0;
  firstpvp_ = 0;
  refusestranger_ = 0;
  nlastchallengestep2_ = 0;
  nstartchallengestep2_ = 0;
  ncurrentcity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_ROLE_STATE_INFO::~KPB_ROLE_STATE_INFO() {
  SharedDtor();
}

void KPB_ROLE_STATE_INFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_ROLE_STATE_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_ROLE_STATE_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_ROLE_STATE_INFO_descriptor_;
}

const KPB_ROLE_STATE_INFO& KPB_ROLE_STATE_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_ROLE_STATE_INFO* KPB_ROLE_STATE_INFO::default_instance_ = NULL;

KPB_ROLE_STATE_INFO* KPB_ROLE_STATE_INFO::New() const {
  return new KPB_ROLE_STATE_INFO;
}

void KPB_ROLE_STATE_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ladderlosingstreakcount_ = 0u;
    talkworlddailycount_ = 0u;
    lastheroexpdecreasedtime_ = 0;
    ailevelcoe_ = 0;
    curfatiguepoint_ = 0u;
    vipendtime_ = 0;
    todaybuyfatiguepointtimes_ = 0u;
    lastdailyrefreshtime_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    byvipautorepairflag_ = 0;
    nlastchallengestep1_ = 0;
    nstartchallengestep1_ = 0;
    clubapplynum_ = 0;
    nonlinegetawardtimes_ = 0;
    lastdailyrefreshtimezero_ = 0;
    quitclubtime_ = 0;
    nrandomquestindex_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    nskiprandomquesttime_ = 0;
    firstpvp_ = 0;
    refusestranger_ = 0;
    nlastchallengestep2_ = 0;
    nstartchallengestep2_ = 0;
    ncurrentcity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_ROLE_STATE_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 LadderLosingStreakCount = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ladderlosingstreakcount_)));
          set_has_ladderlosingstreakcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_TalkWorldDailyCount;
        break;
      }
      
      // required uint32 TalkWorldDailyCount = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TalkWorldDailyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &talkworlddailycount_)));
          set_has_talkworlddailycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_LastHeroExpDecreasedTime;
        break;
      }
      
      // required int32 LastHeroExpDecreasedTime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastHeroExpDecreasedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastheroexpdecreasedtime_)));
          set_has_lastheroexpdecreasedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_AILevelCoe;
        break;
      }
      
      // required int32 AILevelCoe = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AILevelCoe:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ailevelcoe_)));
          set_has_ailevelcoe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_CurFatiguePoint;
        break;
      }
      
      // required uint32 CurFatiguePoint = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurFatiguePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curfatiguepoint_)));
          set_has_curfatiguepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_VIPEndTime;
        break;
      }
      
      // required int32 VIPEndTime = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_VIPEndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipendtime_)));
          set_has_vipendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_TodayBuyFatiguePointTimes;
        break;
      }
      
      // required uint32 TodayBuyFatiguePointTimes = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TodayBuyFatiguePointTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaybuyfatiguepointtimes_)));
          set_has_todaybuyfatiguepointtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_LastDailyRefreshTime;
        break;
      }
      
      // required int32 LastDailyRefreshTime = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastDailyRefreshTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastdailyrefreshtime_)));
          set_has_lastdailyrefreshtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_byVIPAutoRepairFlag;
        break;
      }
      
      // required int32 byVIPAutoRepairFlag = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_byVIPAutoRepairFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &byvipautorepairflag_)));
          set_has_byvipautorepairflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_nLastChallengeStep1;
        break;
      }
      
      // required int32 nLastChallengeStep1 = 13 [default = 0];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLastChallengeStep1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlastchallengestep1_)));
          set_has_nlastchallengestep1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_nStartChallengeStep1;
        break;
      }
      
      // required int32 nStartChallengeStep1 = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nStartChallengeStep1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nstartchallengestep1_)));
          set_has_nstartchallengestep1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ClubApplyNum;
        break;
      }
      
      // required int32 ClubApplyNum = 15 [default = 0];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ClubApplyNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clubapplynum_)));
          set_has_clubapplynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_nOnlineGetAwardTimes;
        break;
      }
      
      // required int32 nOnlineGetAwardTimes = 16 [default = 0];
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nOnlineGetAwardTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nonlinegetawardtimes_)));
          set_has_nonlinegetawardtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_LastDailyRefreshTimeZero;
        break;
      }
      
      // required int32 LastDailyRefreshTimeZero = 17 [default = 0];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LastDailyRefreshTimeZero:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastdailyrefreshtimezero_)));
          set_has_lastdailyrefreshtimezero();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_QuitClubTime;
        break;
      }
      
      // required int32 QuitClubTime = 18 [default = 0];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuitClubTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quitclubtime_)));
          set_has_quitclubtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_nRandomQuestIndex;
        break;
      }
      
      // required int32 nRandomQuestIndex = 19 [default = 0];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nRandomQuestIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrandomquestindex_)));
          set_has_nrandomquestindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_nSkipRandomQuestTime;
        break;
      }
      
      // required int32 nSkipRandomQuestTime = 20 [default = 0];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nSkipRandomQuestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nskiprandomquesttime_)));
          set_has_nskiprandomquesttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_FirstPvP;
        break;
      }
      
      // required int32 FirstPvP = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FirstPvP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstpvp_)));
          set_has_firstpvp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_RefuseStranger;
        break;
      }
      
      // required int32 RefuseStranger = 22 [default = 0];
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RefuseStranger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refusestranger_)));
          set_has_refusestranger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_nLastChallengeStep2;
        break;
      }
      
      // required int32 nLastChallengeStep2 = 23 [default = 0];
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLastChallengeStep2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlastchallengestep2_)));
          set_has_nlastchallengestep2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_nStartChallengeStep2;
        break;
      }
      
      // required int32 nStartChallengeStep2 = 24 [default = 0];
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nStartChallengeStep2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nstartchallengestep2_)));
          set_has_nstartchallengestep2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_nCurrentCity;
        break;
      }
      
      // required int32 nCurrentCity = 25 [default = 0];
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nCurrentCity:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncurrentcity_)));
          set_has_ncurrentcity();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_ROLE_STATE_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 LadderLosingStreakCount = 1 [default = 0];
  if (has_ladderlosingstreakcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->ladderlosingstreakcount(), output);
  }
  
  // required uint32 TalkWorldDailyCount = 4 [default = 0];
  if (has_talkworlddailycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->talkworlddailycount(), output);
  }
  
  // required int32 LastHeroExpDecreasedTime = 5 [default = 0];
  if (has_lastheroexpdecreasedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lastheroexpdecreasedtime(), output);
  }
  
  // required int32 AILevelCoe = 6 [default = 0];
  if (has_ailevelcoe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ailevelcoe(), output);
  }
  
  // required uint32 CurFatiguePoint = 7 [default = 0];
  if (has_curfatiguepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->curfatiguepoint(), output);
  }
  
  // required int32 VIPEndTime = 9 [default = 0];
  if (has_vipendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vipendtime(), output);
  }
  
  // required uint32 TodayBuyFatiguePointTimes = 10 [default = 0];
  if (has_todaybuyfatiguepointtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->todaybuyfatiguepointtimes(), output);
  }
  
  // required int32 LastDailyRefreshTime = 11 [default = 0];
  if (has_lastdailyrefreshtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->lastdailyrefreshtime(), output);
  }
  
  // required int32 byVIPAutoRepairFlag = 12 [default = 0];
  if (has_byvipautorepairflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->byvipautorepairflag(), output);
  }
  
  // required int32 nLastChallengeStep1 = 13 [default = 0];
  if (has_nlastchallengestep1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->nlastchallengestep1(), output);
  }
  
  // required int32 nStartChallengeStep1 = 14 [default = 0];
  if (has_nstartchallengestep1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->nstartchallengestep1(), output);
  }
  
  // required int32 ClubApplyNum = 15 [default = 0];
  if (has_clubapplynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->clubapplynum(), output);
  }
  
  // required int32 nOnlineGetAwardTimes = 16 [default = 0];
  if (has_nonlinegetawardtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->nonlinegetawardtimes(), output);
  }
  
  // required int32 LastDailyRefreshTimeZero = 17 [default = 0];
  if (has_lastdailyrefreshtimezero()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->lastdailyrefreshtimezero(), output);
  }
  
  // required int32 QuitClubTime = 18 [default = 0];
  if (has_quitclubtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->quitclubtime(), output);
  }
  
  // required int32 nRandomQuestIndex = 19 [default = 0];
  if (has_nrandomquestindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->nrandomquestindex(), output);
  }
  
  // required int32 nSkipRandomQuestTime = 20 [default = 0];
  if (has_nskiprandomquesttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->nskiprandomquesttime(), output);
  }
  
  // required int32 FirstPvP = 21 [default = 0];
  if (has_firstpvp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->firstpvp(), output);
  }
  
  // required int32 RefuseStranger = 22 [default = 0];
  if (has_refusestranger()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->refusestranger(), output);
  }
  
  // required int32 nLastChallengeStep2 = 23 [default = 0];
  if (has_nlastchallengestep2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->nlastchallengestep2(), output);
  }
  
  // required int32 nStartChallengeStep2 = 24 [default = 0];
  if (has_nstartchallengestep2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->nstartchallengestep2(), output);
  }
  
  // required int32 nCurrentCity = 25 [default = 0];
  if (has_ncurrentcity()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->ncurrentcity(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_ROLE_STATE_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 LadderLosingStreakCount = 1 [default = 0];
  if (has_ladderlosingstreakcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->ladderlosingstreakcount(), target);
  }
  
  // required uint32 TalkWorldDailyCount = 4 [default = 0];
  if (has_talkworlddailycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->talkworlddailycount(), target);
  }
  
  // required int32 LastHeroExpDecreasedTime = 5 [default = 0];
  if (has_lastheroexpdecreasedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lastheroexpdecreasedtime(), target);
  }
  
  // required int32 AILevelCoe = 6 [default = 0];
  if (has_ailevelcoe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ailevelcoe(), target);
  }
  
  // required uint32 CurFatiguePoint = 7 [default = 0];
  if (has_curfatiguepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->curfatiguepoint(), target);
  }
  
  // required int32 VIPEndTime = 9 [default = 0];
  if (has_vipendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vipendtime(), target);
  }
  
  // required uint32 TodayBuyFatiguePointTimes = 10 [default = 0];
  if (has_todaybuyfatiguepointtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->todaybuyfatiguepointtimes(), target);
  }
  
  // required int32 LastDailyRefreshTime = 11 [default = 0];
  if (has_lastdailyrefreshtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->lastdailyrefreshtime(), target);
  }
  
  // required int32 byVIPAutoRepairFlag = 12 [default = 0];
  if (has_byvipautorepairflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->byvipautorepairflag(), target);
  }
  
  // required int32 nLastChallengeStep1 = 13 [default = 0];
  if (has_nlastchallengestep1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->nlastchallengestep1(), target);
  }
  
  // required int32 nStartChallengeStep1 = 14 [default = 0];
  if (has_nstartchallengestep1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->nstartchallengestep1(), target);
  }
  
  // required int32 ClubApplyNum = 15 [default = 0];
  if (has_clubapplynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->clubapplynum(), target);
  }
  
  // required int32 nOnlineGetAwardTimes = 16 [default = 0];
  if (has_nonlinegetawardtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->nonlinegetawardtimes(), target);
  }
  
  // required int32 LastDailyRefreshTimeZero = 17 [default = 0];
  if (has_lastdailyrefreshtimezero()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->lastdailyrefreshtimezero(), target);
  }
  
  // required int32 QuitClubTime = 18 [default = 0];
  if (has_quitclubtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->quitclubtime(), target);
  }
  
  // required int32 nRandomQuestIndex = 19 [default = 0];
  if (has_nrandomquestindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->nrandomquestindex(), target);
  }
  
  // required int32 nSkipRandomQuestTime = 20 [default = 0];
  if (has_nskiprandomquesttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->nskiprandomquesttime(), target);
  }
  
  // required int32 FirstPvP = 21 [default = 0];
  if (has_firstpvp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->firstpvp(), target);
  }
  
  // required int32 RefuseStranger = 22 [default = 0];
  if (has_refusestranger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->refusestranger(), target);
  }
  
  // required int32 nLastChallengeStep2 = 23 [default = 0];
  if (has_nlastchallengestep2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->nlastchallengestep2(), target);
  }
  
  // required int32 nStartChallengeStep2 = 24 [default = 0];
  if (has_nstartchallengestep2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->nstartchallengestep2(), target);
  }
  
  // required int32 nCurrentCity = 25 [default = 0];
  if (has_ncurrentcity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->ncurrentcity(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_ROLE_STATE_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 LadderLosingStreakCount = 1 [default = 0];
    if (has_ladderlosingstreakcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ladderlosingstreakcount());
    }
    
    // required uint32 TalkWorldDailyCount = 4 [default = 0];
    if (has_talkworlddailycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->talkworlddailycount());
    }
    
    // required int32 LastHeroExpDecreasedTime = 5 [default = 0];
    if (has_lastheroexpdecreasedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastheroexpdecreasedtime());
    }
    
    // required int32 AILevelCoe = 6 [default = 0];
    if (has_ailevelcoe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ailevelcoe());
    }
    
    // required uint32 CurFatiguePoint = 7 [default = 0];
    if (has_curfatiguepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curfatiguepoint());
    }
    
    // required int32 VIPEndTime = 9 [default = 0];
    if (has_vipendtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipendtime());
    }
    
    // required uint32 TodayBuyFatiguePointTimes = 10 [default = 0];
    if (has_todaybuyfatiguepointtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaybuyfatiguepointtimes());
    }
    
    // required int32 LastDailyRefreshTime = 11 [default = 0];
    if (has_lastdailyrefreshtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastdailyrefreshtime());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 byVIPAutoRepairFlag = 12 [default = 0];
    if (has_byvipautorepairflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->byvipautorepairflag());
    }
    
    // required int32 nLastChallengeStep1 = 13 [default = 0];
    if (has_nlastchallengestep1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlastchallengestep1());
    }
    
    // required int32 nStartChallengeStep1 = 14 [default = 0];
    if (has_nstartchallengestep1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nstartchallengestep1());
    }
    
    // required int32 ClubApplyNum = 15 [default = 0];
    if (has_clubapplynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clubapplynum());
    }
    
    // required int32 nOnlineGetAwardTimes = 16 [default = 0];
    if (has_nonlinegetawardtimes()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nonlinegetawardtimes());
    }
    
    // required int32 LastDailyRefreshTimeZero = 17 [default = 0];
    if (has_lastdailyrefreshtimezero()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastdailyrefreshtimezero());
    }
    
    // required int32 QuitClubTime = 18 [default = 0];
    if (has_quitclubtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quitclubtime());
    }
    
    // required int32 nRandomQuestIndex = 19 [default = 0];
    if (has_nrandomquestindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrandomquestindex());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 nSkipRandomQuestTime = 20 [default = 0];
    if (has_nskiprandomquesttime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nskiprandomquesttime());
    }
    
    // required int32 FirstPvP = 21 [default = 0];
    if (has_firstpvp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstpvp());
    }
    
    // required int32 RefuseStranger = 22 [default = 0];
    if (has_refusestranger()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refusestranger());
    }
    
    // required int32 nLastChallengeStep2 = 23 [default = 0];
    if (has_nlastchallengestep2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlastchallengestep2());
    }
    
    // required int32 nStartChallengeStep2 = 24 [default = 0];
    if (has_nstartchallengestep2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nstartchallengestep2());
    }
    
    // required int32 nCurrentCity = 25 [default = 0];
    if (has_ncurrentcity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncurrentcity());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_ROLE_STATE_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_ROLE_STATE_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_ROLE_STATE_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_ROLE_STATE_INFO::MergeFrom(const KPB_ROLE_STATE_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ladderlosingstreakcount()) {
      set_ladderlosingstreakcount(from.ladderlosingstreakcount());
    }
    if (from.has_talkworlddailycount()) {
      set_talkworlddailycount(from.talkworlddailycount());
    }
    if (from.has_lastheroexpdecreasedtime()) {
      set_lastheroexpdecreasedtime(from.lastheroexpdecreasedtime());
    }
    if (from.has_ailevelcoe()) {
      set_ailevelcoe(from.ailevelcoe());
    }
    if (from.has_curfatiguepoint()) {
      set_curfatiguepoint(from.curfatiguepoint());
    }
    if (from.has_vipendtime()) {
      set_vipendtime(from.vipendtime());
    }
    if (from.has_todaybuyfatiguepointtimes()) {
      set_todaybuyfatiguepointtimes(from.todaybuyfatiguepointtimes());
    }
    if (from.has_lastdailyrefreshtime()) {
      set_lastdailyrefreshtime(from.lastdailyrefreshtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_byvipautorepairflag()) {
      set_byvipautorepairflag(from.byvipautorepairflag());
    }
    if (from.has_nlastchallengestep1()) {
      set_nlastchallengestep1(from.nlastchallengestep1());
    }
    if (from.has_nstartchallengestep1()) {
      set_nstartchallengestep1(from.nstartchallengestep1());
    }
    if (from.has_clubapplynum()) {
      set_clubapplynum(from.clubapplynum());
    }
    if (from.has_nonlinegetawardtimes()) {
      set_nonlinegetawardtimes(from.nonlinegetawardtimes());
    }
    if (from.has_lastdailyrefreshtimezero()) {
      set_lastdailyrefreshtimezero(from.lastdailyrefreshtimezero());
    }
    if (from.has_quitclubtime()) {
      set_quitclubtime(from.quitclubtime());
    }
    if (from.has_nrandomquestindex()) {
      set_nrandomquestindex(from.nrandomquestindex());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_nskiprandomquesttime()) {
      set_nskiprandomquesttime(from.nskiprandomquesttime());
    }
    if (from.has_firstpvp()) {
      set_firstpvp(from.firstpvp());
    }
    if (from.has_refusestranger()) {
      set_refusestranger(from.refusestranger());
    }
    if (from.has_nlastchallengestep2()) {
      set_nlastchallengestep2(from.nlastchallengestep2());
    }
    if (from.has_nstartchallengestep2()) {
      set_nstartchallengestep2(from.nstartchallengestep2());
    }
    if (from.has_ncurrentcity()) {
      set_ncurrentcity(from.ncurrentcity());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_ROLE_STATE_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_ROLE_STATE_INFO::CopyFrom(const KPB_ROLE_STATE_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_ROLE_STATE_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;
  
  return true;
}

void KPB_ROLE_STATE_INFO::Swap(KPB_ROLE_STATE_INFO* other) {
  if (other != this) {
    std::swap(ladderlosingstreakcount_, other->ladderlosingstreakcount_);
    std::swap(talkworlddailycount_, other->talkworlddailycount_);
    std::swap(lastheroexpdecreasedtime_, other->lastheroexpdecreasedtime_);
    std::swap(ailevelcoe_, other->ailevelcoe_);
    std::swap(curfatiguepoint_, other->curfatiguepoint_);
    std::swap(vipendtime_, other->vipendtime_);
    std::swap(todaybuyfatiguepointtimes_, other->todaybuyfatiguepointtimes_);
    std::swap(lastdailyrefreshtime_, other->lastdailyrefreshtime_);
    std::swap(byvipautorepairflag_, other->byvipautorepairflag_);
    std::swap(nlastchallengestep1_, other->nlastchallengestep1_);
    std::swap(nstartchallengestep1_, other->nstartchallengestep1_);
    std::swap(clubapplynum_, other->clubapplynum_);
    std::swap(nonlinegetawardtimes_, other->nonlinegetawardtimes_);
    std::swap(lastdailyrefreshtimezero_, other->lastdailyrefreshtimezero_);
    std::swap(quitclubtime_, other->quitclubtime_);
    std::swap(nrandomquestindex_, other->nrandomquestindex_);
    std::swap(nskiprandomquesttime_, other->nskiprandomquesttime_);
    std::swap(firstpvp_, other->firstpvp_);
    std::swap(refusestranger_, other->refusestranger_);
    std::swap(nlastchallengestep2_, other->nlastchallengestep2_);
    std::swap(nstartchallengestep2_, other->nstartchallengestep2_);
    std::swap(ncurrentcity_, other->ncurrentcity_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_ROLE_STATE_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_ROLE_STATE_INFO_descriptor_;
  metadata.reflection = KPB_ROLE_STATE_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_USER_ROLE_GENERATOR_PARAM::kRoleNameFieldNumber;
const int KPB_USER_ROLE_GENERATOR_PARAM::kRoleTypeFieldNumber;
#endif  // !_MSC_VER

KPB_USER_ROLE_GENERATOR_PARAM::KPB_USER_ROLE_GENERATOR_PARAM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_USER_ROLE_GENERATOR_PARAM::InitAsDefaultInstance() {
}

KPB_USER_ROLE_GENERATOR_PARAM::KPB_USER_ROLE_GENERATOR_PARAM(const KPB_USER_ROLE_GENERATOR_PARAM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_USER_ROLE_GENERATOR_PARAM::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  roletype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_USER_ROLE_GENERATOR_PARAM::~KPB_USER_ROLE_GENERATOR_PARAM() {
  SharedDtor();
}

void KPB_USER_ROLE_GENERATOR_PARAM::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void KPB_USER_ROLE_GENERATOR_PARAM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_USER_ROLE_GENERATOR_PARAM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_USER_ROLE_GENERATOR_PARAM_descriptor_;
}

const KPB_USER_ROLE_GENERATOR_PARAM& KPB_USER_ROLE_GENERATOR_PARAM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_USER_ROLE_GENERATOR_PARAM* KPB_USER_ROLE_GENERATOR_PARAM::default_instance_ = NULL;

KPB_USER_ROLE_GENERATOR_PARAM* KPB_USER_ROLE_GENERATOR_PARAM::New() const {
  return new KPB_USER_ROLE_GENERATOR_PARAM;
}

void KPB_USER_ROLE_GENERATOR_PARAM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    roletype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_USER_ROLE_GENERATOR_PARAM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes RoleName = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_rolename()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RoleType;
        break;
      }
      
      // required int32 RoleType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RoleType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roletype_)));
          set_has_roletype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_USER_ROLE_GENERATOR_PARAM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes RoleName = 1 [default = ""];
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->rolename(), output);
  }
  
  // required int32 RoleType = 2 [default = 0];
  if (has_roletype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->roletype(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_USER_ROLE_GENERATOR_PARAM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes RoleName = 1 [default = ""];
  if (has_rolename()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->rolename(), target);
  }
  
  // required int32 RoleType = 2 [default = 0];
  if (has_roletype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->roletype(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_USER_ROLE_GENERATOR_PARAM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes RoleName = 1 [default = ""];
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->rolename());
    }
    
    // required int32 RoleType = 2 [default = 0];
    if (has_roletype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roletype());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_USER_ROLE_GENERATOR_PARAM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_USER_ROLE_GENERATOR_PARAM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_USER_ROLE_GENERATOR_PARAM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_USER_ROLE_GENERATOR_PARAM::MergeFrom(const KPB_USER_ROLE_GENERATOR_PARAM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_roletype()) {
      set_roletype(from.roletype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_USER_ROLE_GENERATOR_PARAM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_USER_ROLE_GENERATOR_PARAM::CopyFrom(const KPB_USER_ROLE_GENERATOR_PARAM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_USER_ROLE_GENERATOR_PARAM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KPB_USER_ROLE_GENERATOR_PARAM::Swap(KPB_USER_ROLE_GENERATOR_PARAM* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(roletype_, other->roletype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_USER_ROLE_GENERATOR_PARAM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_USER_ROLE_GENERATOR_PARAM_descriptor_;
  metadata.reflection = KPB_USER_ROLE_GENERATOR_PARAM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_ROLE_GENERATOR_PARAM::kAccountNameFieldNumber;
const int KPB_ROLE_GENERATOR_PARAM::kGroupIDFieldNumber;
const int KPB_ROLE_GENERATOR_PARAM::kUserParamFieldNumber;
#endif  // !_MSC_VER

KPB_ROLE_GENERATOR_PARAM::KPB_ROLE_GENERATOR_PARAM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_ROLE_GENERATOR_PARAM::InitAsDefaultInstance() {
  userparam_ = const_cast< ::T3DB::KPB_USER_ROLE_GENERATOR_PARAM*>(&::T3DB::KPB_USER_ROLE_GENERATOR_PARAM::default_instance());
}

KPB_ROLE_GENERATOR_PARAM::KPB_ROLE_GENERATOR_PARAM(const KPB_ROLE_GENERATOR_PARAM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_ROLE_GENERATOR_PARAM::SharedCtor() {
  _cached_size_ = 0;
  accountname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  groupid_ = 0;
  userparam_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_ROLE_GENERATOR_PARAM::~KPB_ROLE_GENERATOR_PARAM() {
  SharedDtor();
}

void KPB_ROLE_GENERATOR_PARAM::SharedDtor() {
  if (accountname_ != &::google::protobuf::internal::kEmptyString) {
    delete accountname_;
  }
  if (this != default_instance_) {
    delete userparam_;
  }
}

void KPB_ROLE_GENERATOR_PARAM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_ROLE_GENERATOR_PARAM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_ROLE_GENERATOR_PARAM_descriptor_;
}

const KPB_ROLE_GENERATOR_PARAM& KPB_ROLE_GENERATOR_PARAM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_ROLE_GENERATOR_PARAM* KPB_ROLE_GENERATOR_PARAM::default_instance_ = NULL;

KPB_ROLE_GENERATOR_PARAM* KPB_ROLE_GENERATOR_PARAM::New() const {
  return new KPB_ROLE_GENERATOR_PARAM;
}

void KPB_ROLE_GENERATOR_PARAM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_accountname()) {
      if (accountname_ != &::google::protobuf::internal::kEmptyString) {
        accountname_->clear();
      }
    }
    groupid_ = 0;
    if (has_userparam()) {
      if (userparam_ != NULL) userparam_->::T3DB::KPB_USER_ROLE_GENERATOR_PARAM::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_ROLE_GENERATOR_PARAM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes AccountName = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_accountname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_GroupID;
        break;
      }
      
      // required int32 GroupID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GroupID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_UserParam;
        break;
      }
      
      // required .T3DB.KPB_USER_ROLE_GENERATOR_PARAM UserParam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_ROLE_GENERATOR_PARAM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes AccountName = 1 [default = ""];
  if (has_accountname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->accountname(), output);
  }
  
  // required int32 GroupID = 2 [default = 0];
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->groupid(), output);
  }
  
  // required .T3DB.KPB_USER_ROLE_GENERATOR_PARAM UserParam = 3;
  if (has_userparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->userparam(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_ROLE_GENERATOR_PARAM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes AccountName = 1 [default = ""];
  if (has_accountname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->accountname(), target);
  }
  
  // required int32 GroupID = 2 [default = 0];
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->groupid(), target);
  }
  
  // required .T3DB.KPB_USER_ROLE_GENERATOR_PARAM UserParam = 3;
  if (has_userparam()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->userparam(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_ROLE_GENERATOR_PARAM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes AccountName = 1 [default = ""];
    if (has_accountname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->accountname());
    }
    
    // required int32 GroupID = 2 [default = 0];
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }
    
    // required .T3DB.KPB_USER_ROLE_GENERATOR_PARAM UserParam = 3;
    if (has_userparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userparam());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_ROLE_GENERATOR_PARAM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_ROLE_GENERATOR_PARAM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_ROLE_GENERATOR_PARAM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_ROLE_GENERATOR_PARAM::MergeFrom(const KPB_ROLE_GENERATOR_PARAM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accountname()) {
      set_accountname(from.accountname());
    }
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
    if (from.has_userparam()) {
      mutable_userparam()->::T3DB::KPB_USER_ROLE_GENERATOR_PARAM::MergeFrom(from.userparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_ROLE_GENERATOR_PARAM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_ROLE_GENERATOR_PARAM::CopyFrom(const KPB_ROLE_GENERATOR_PARAM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_ROLE_GENERATOR_PARAM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  if (has_userparam()) {
    if (!this->userparam().IsInitialized()) return false;
  }
  return true;
}

void KPB_ROLE_GENERATOR_PARAM::Swap(KPB_ROLE_GENERATOR_PARAM* other) {
  if (other != this) {
    std::swap(accountname_, other->accountname_);
    std::swap(groupid_, other->groupid_);
    std::swap(userparam_, other->userparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_ROLE_GENERATOR_PARAM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_ROLE_GENERATOR_PARAM_descriptor_;
  metadata.reflection = KPB_ROLE_GENERATOR_PARAM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_HERO_DATA_LIST::kMaxHeroCountFieldNumber;
#endif  // !_MSC_VER

KPB_HERO_DATA_LIST::KPB_HERO_DATA_LIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_HERO_DATA_LIST::InitAsDefaultInstance() {
}

KPB_HERO_DATA_LIST::KPB_HERO_DATA_LIST(const KPB_HERO_DATA_LIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_HERO_DATA_LIST::SharedCtor() {
  _cached_size_ = 0;
  maxherocount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_HERO_DATA_LIST::~KPB_HERO_DATA_LIST() {
  SharedDtor();
}

void KPB_HERO_DATA_LIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_HERO_DATA_LIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_HERO_DATA_LIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_HERO_DATA_LIST_descriptor_;
}

const KPB_HERO_DATA_LIST& KPB_HERO_DATA_LIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_HERO_DATA_LIST* KPB_HERO_DATA_LIST::default_instance_ = NULL;

KPB_HERO_DATA_LIST* KPB_HERO_DATA_LIST::New() const {
  return new KPB_HERO_DATA_LIST;
}

void KPB_HERO_DATA_LIST::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxherocount_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_HERO_DATA_LIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 MaxHeroCount = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxherocount_)));
          set_has_maxherocount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_HERO_DATA_LIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 MaxHeroCount = 1 [default = 0];
  if (has_maxherocount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxherocount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_HERO_DATA_LIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 MaxHeroCount = 1 [default = 0];
  if (has_maxherocount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxherocount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_HERO_DATA_LIST::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 MaxHeroCount = 1 [default = 0];
    if (has_maxherocount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxherocount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_HERO_DATA_LIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_HERO_DATA_LIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_HERO_DATA_LIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_HERO_DATA_LIST::MergeFrom(const KPB_HERO_DATA_LIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxherocount()) {
      set_maxherocount(from.maxherocount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_HERO_DATA_LIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_HERO_DATA_LIST::CopyFrom(const KPB_HERO_DATA_LIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_HERO_DATA_LIST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void KPB_HERO_DATA_LIST::Swap(KPB_HERO_DATA_LIST* other) {
  if (other != this) {
    std::swap(maxherocount_, other->maxherocount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_HERO_DATA_LIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_HERO_DATA_LIST_descriptor_;
  metadata.reflection = KPB_HERO_DATA_LIST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_HERO_DATA::kIndexFieldNumber;
const int KPB_HERO_DATA::kTemplateIDFieldNumber;
const int KPB_HERO_DATA::kLevelFieldNumber;
const int KPB_HERO_DATA::kExpFieldNumber;
const int KPB_HERO_DATA::kEolFieldNumber;
const int KPB_HERO_DATA::kLadderLevelFieldNumber;
const int KPB_HERO_DATA::kLadderExpFieldNumber;
const int KPB_HERO_DATA::kLadderWinCountFieldNumber;
const int KPB_HERO_DATA::kLadderLoseCountFieldNumber;
const int KPB_HERO_DATA::kLadderDrawCountFieldNumber;
const int KPB_HERO_DATA::kFreeTalentFieldNumber;
const int KPB_HERO_DATA::kTalentFieldNumber;
const int KPB_HERO_DATA::kFashionIDFieldNumber;
const int KPB_HERO_DATA::kFiredFieldNumber;
const int KPB_HERO_DATA::kSelectedActiveSkillFieldNumber;
const int KPB_HERO_DATA::kSelectedPassiveSkillFieldNumber;
const int KPB_HERO_DATA::kSelectedNirvanaSkillFieldNumber;
const int KPB_HERO_DATA::kSelectedSlamballSkillFieldNumber;
const int KPB_HERO_DATA::kEquipScoreFieldNumber;
#endif  // !_MSC_VER

KPB_HERO_DATA::KPB_HERO_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_HERO_DATA::InitAsDefaultInstance() {
}

KPB_HERO_DATA::KPB_HERO_DATA(const KPB_HERO_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_HERO_DATA::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  templateid_ = 0u;
  level_ = 0;
  exp_ = 0;
  eol_ = 0;
  ladderlevel_ = 0;
  ladderexp_ = 0;
  ladderwincount_ = 0;
  ladderlosecount_ = 0;
  ladderdrawcount_ = 0;
  freetalent_ = 0u;
  fashionid_ = 0u;
  fired_ = false;
  equipscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_HERO_DATA::~KPB_HERO_DATA() {
  SharedDtor();
}

void KPB_HERO_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_HERO_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_HERO_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_HERO_DATA_descriptor_;
}

const KPB_HERO_DATA& KPB_HERO_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_HERO_DATA* KPB_HERO_DATA::default_instance_ = NULL;

KPB_HERO_DATA* KPB_HERO_DATA::New() const {
  return new KPB_HERO_DATA;
}

void KPB_HERO_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    templateid_ = 0u;
    level_ = 0;
    exp_ = 0;
    eol_ = 0;
    ladderlevel_ = 0;
    ladderexp_ = 0;
    ladderwincount_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ladderlosecount_ = 0;
    ladderdrawcount_ = 0;
    freetalent_ = 0u;
    fashionid_ = 0u;
    fired_ = false;
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    equipscore_ = 0u;
  }
  talent_.Clear();
  selectedactiveskill_.Clear();
  selectedpassiveskill_.Clear();
  selectednirvanaskill_.Clear();
  selectedslamballskill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_HERO_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Index = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TemplateID;
        break;
      }
      
      // required uint32 TemplateID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TemplateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &templateid_)));
          set_has_templateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }
      
      // required int32 Level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Exp;
        break;
      }
      
      // required int32 Exp = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_Eol;
        break;
      }
      
      // required int32 Eol = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Eol:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eol_)));
          set_has_eol();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_LadderLevel;
        break;
      }
      
      // required int32 LadderLevel = 7 [default = 0];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LadderLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ladderlevel_)));
          set_has_ladderlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_LadderExp;
        break;
      }
      
      // required int32 LadderExp = 8 [default = 0];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LadderExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ladderexp_)));
          set_has_ladderexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_LadderWinCount;
        break;
      }
      
      // required int32 LadderWinCount = 9 [default = 0];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LadderWinCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ladderwincount_)));
          set_has_ladderwincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_LadderLoseCount;
        break;
      }
      
      // required int32 LadderLoseCount = 10 [default = 0];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LadderLoseCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ladderlosecount_)));
          set_has_ladderlosecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_LadderDrawCount;
        break;
      }
      
      // required int32 LadderDrawCount = 11 [default = 0];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LadderDrawCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ladderdrawcount_)));
          set_has_ladderdrawcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_FreeTalent;
        break;
      }
      
      // required uint32 FreeTalent = 12 [default = 0];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FreeTalent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &freetalent_)));
          set_has_freetalent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_Talent;
        break;
      }
      
      // repeated uint32 Talent = 13 [packed = true];
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Talent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_talent())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 106, input, this->mutable_talent())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_FashionID;
        break;
      }
      
      // required uint32 FashionID = 14 [default = 0];
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FashionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionid_)));
          set_has_fashionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_Fired;
        break;
      }
      
      // required bool Fired = 15 [default = false];
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Fired:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fired_)));
          set_has_fired();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_SelectedActiveSkill;
        break;
      }
      
      // repeated uint32 SelectedActiveSkill = 17 [packed = true];
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SelectedActiveSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_selectedactiveskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 138, input, this->mutable_selectedactiveskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_SelectedPassiveSkill;
        break;
      }
      
      // repeated uint32 SelectedPassiveSkill = 18 [packed = true];
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SelectedPassiveSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_selectedpassiveskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 146, input, this->mutable_selectedpassiveskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_SelectedNirvanaSkill;
        break;
      }
      
      // repeated uint32 SelectedNirvanaSkill = 19 [packed = true];
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SelectedNirvanaSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_selectednirvanaskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 154, input, this->mutable_selectednirvanaskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_SelectedSlamballSkill;
        break;
      }
      
      // repeated uint32 SelectedSlamballSkill = 20 [packed = true];
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SelectedSlamballSkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_selectedslamballskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 2, 162, input, this->mutable_selectedslamballskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_EquipScore;
        break;
      }
      
      // required uint32 EquipScore = 21 [default = 0];
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EquipScore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equipscore_)));
          set_has_equipscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_HERO_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Index = 1 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // required uint32 TemplateID = 2 [default = 0];
  if (has_templateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->templateid(), output);
  }
  
  // required int32 Level = 3 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }
  
  // required int32 Exp = 4 [default = 0];
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->exp(), output);
  }
  
  // required int32 Eol = 6 [default = 0];
  if (has_eol()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->eol(), output);
  }
  
  // required int32 LadderLevel = 7 [default = 0];
  if (has_ladderlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ladderlevel(), output);
  }
  
  // required int32 LadderExp = 8 [default = 0];
  if (has_ladderexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ladderexp(), output);
  }
  
  // required int32 LadderWinCount = 9 [default = 0];
  if (has_ladderwincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ladderwincount(), output);
  }
  
  // required int32 LadderLoseCount = 10 [default = 0];
  if (has_ladderlosecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ladderlosecount(), output);
  }
  
  // required int32 LadderDrawCount = 11 [default = 0];
  if (has_ladderdrawcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ladderdrawcount(), output);
  }
  
  // required uint32 FreeTalent = 12 [default = 0];
  if (has_freetalent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->freetalent(), output);
  }
  
  // repeated uint32 Talent = 13 [packed = true];
  if (this->talent_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(13, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_talent_cached_byte_size_);
  }
  for (int i = 0; i < this->talent_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->talent(i), output);
  }
  
  // required uint32 FashionID = 14 [default = 0];
  if (has_fashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->fashionid(), output);
  }
  
  // required bool Fired = 15 [default = false];
  if (has_fired()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->fired(), output);
  }
  
  // repeated uint32 SelectedActiveSkill = 17 [packed = true];
  if (this->selectedactiveskill_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(17, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_selectedactiveskill_cached_byte_size_);
  }
  for (int i = 0; i < this->selectedactiveskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->selectedactiveskill(i), output);
  }
  
  // repeated uint32 SelectedPassiveSkill = 18 [packed = true];
  if (this->selectedpassiveskill_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(18, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_selectedpassiveskill_cached_byte_size_);
  }
  for (int i = 0; i < this->selectedpassiveskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->selectedpassiveskill(i), output);
  }
  
  // repeated uint32 SelectedNirvanaSkill = 19 [packed = true];
  if (this->selectednirvanaskill_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(19, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_selectednirvanaskill_cached_byte_size_);
  }
  for (int i = 0; i < this->selectednirvanaskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->selectednirvanaskill(i), output);
  }
  
  // repeated uint32 SelectedSlamballSkill = 20 [packed = true];
  if (this->selectedslamballskill_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(20, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_selectedslamballskill_cached_byte_size_);
  }
  for (int i = 0; i < this->selectedslamballskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->selectedslamballskill(i), output);
  }
  
  // required uint32 EquipScore = 21 [default = 0];
  if (has_equipscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->equipscore(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_HERO_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Index = 1 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // required uint32 TemplateID = 2 [default = 0];
  if (has_templateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->templateid(), target);
  }
  
  // required int32 Level = 3 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }
  
  // required int32 Exp = 4 [default = 0];
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->exp(), target);
  }
  
  // required int32 Eol = 6 [default = 0];
  if (has_eol()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->eol(), target);
  }
  
  // required int32 LadderLevel = 7 [default = 0];
  if (has_ladderlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ladderlevel(), target);
  }
  
  // required int32 LadderExp = 8 [default = 0];
  if (has_ladderexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ladderexp(), target);
  }
  
  // required int32 LadderWinCount = 9 [default = 0];
  if (has_ladderwincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ladderwincount(), target);
  }
  
  // required int32 LadderLoseCount = 10 [default = 0];
  if (has_ladderlosecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->ladderlosecount(), target);
  }
  
  // required int32 LadderDrawCount = 11 [default = 0];
  if (has_ladderdrawcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ladderdrawcount(), target);
  }
  
  // required uint32 FreeTalent = 12 [default = 0];
  if (has_freetalent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->freetalent(), target);
  }
  
  // repeated uint32 Talent = 13 [packed = true];
  if (this->talent_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      13,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _talent_cached_byte_size_, target);
  }
  for (int i = 0; i < this->talent_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->talent(i), target);
  }
  
  // required uint32 FashionID = 14 [default = 0];
  if (has_fashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->fashionid(), target);
  }
  
  // required bool Fired = 15 [default = false];
  if (has_fired()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->fired(), target);
  }
  
  // repeated uint32 SelectedActiveSkill = 17 [packed = true];
  if (this->selectedactiveskill_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      17,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _selectedactiveskill_cached_byte_size_, target);
  }
  for (int i = 0; i < this->selectedactiveskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->selectedactiveskill(i), target);
  }
  
  // repeated uint32 SelectedPassiveSkill = 18 [packed = true];
  if (this->selectedpassiveskill_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      18,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _selectedpassiveskill_cached_byte_size_, target);
  }
  for (int i = 0; i < this->selectedpassiveskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->selectedpassiveskill(i), target);
  }
  
  // repeated uint32 SelectedNirvanaSkill = 19 [packed = true];
  if (this->selectednirvanaskill_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      19,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _selectednirvanaskill_cached_byte_size_, target);
  }
  for (int i = 0; i < this->selectednirvanaskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->selectednirvanaskill(i), target);
  }
  
  // repeated uint32 SelectedSlamballSkill = 20 [packed = true];
  if (this->selectedslamballskill_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      20,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _selectedslamballskill_cached_byte_size_, target);
  }
  for (int i = 0; i < this->selectedslamballskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->selectedslamballskill(i), target);
  }
  
  // required uint32 EquipScore = 21 [default = 0];
  if (has_equipscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->equipscore(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_HERO_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Index = 1 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // required uint32 TemplateID = 2 [default = 0];
    if (has_templateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->templateid());
    }
    
    // required int32 Level = 3 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }
    
    // required int32 Exp = 4 [default = 0];
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }
    
    // required int32 Eol = 6 [default = 0];
    if (has_eol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eol());
    }
    
    // required int32 LadderLevel = 7 [default = 0];
    if (has_ladderlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ladderlevel());
    }
    
    // required int32 LadderExp = 8 [default = 0];
    if (has_ladderexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ladderexp());
    }
    
    // required int32 LadderWinCount = 9 [default = 0];
    if (has_ladderwincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ladderwincount());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 LadderLoseCount = 10 [default = 0];
    if (has_ladderlosecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ladderlosecount());
    }
    
    // required int32 LadderDrawCount = 11 [default = 0];
    if (has_ladderdrawcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ladderdrawcount());
    }
    
    // required uint32 FreeTalent = 12 [default = 0];
    if (has_freetalent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->freetalent());
    }
    
    // required uint32 FashionID = 14 [default = 0];
    if (has_fashionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionid());
    }
    
    // required bool Fired = 15 [default = false];
    if (has_fired()) {
      total_size += 1 + 1;
    }
    
  }
  if (_has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    // required uint32 EquipScore = 21 [default = 0];
    if (has_equipscore()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equipscore());
    }
    
  }
  // repeated uint32 Talent = 13 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->talent_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->talent(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _talent_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated uint32 SelectedActiveSkill = 17 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->selectedactiveskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->selectedactiveskill(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _selectedactiveskill_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated uint32 SelectedPassiveSkill = 18 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->selectedpassiveskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->selectedpassiveskill(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _selectedpassiveskill_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated uint32 SelectedNirvanaSkill = 19 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->selectednirvanaskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->selectednirvanaskill(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _selectednirvanaskill_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated uint32 SelectedSlamballSkill = 20 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->selectedslamballskill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->selectedslamballskill(i));
    }
    if (data_size > 0) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _selectedslamballskill_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_HERO_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_HERO_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_HERO_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_HERO_DATA::MergeFrom(const KPB_HERO_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  talent_.MergeFrom(from.talent_);
  selectedactiveskill_.MergeFrom(from.selectedactiveskill_);
  selectedpassiveskill_.MergeFrom(from.selectedpassiveskill_);
  selectednirvanaskill_.MergeFrom(from.selectednirvanaskill_);
  selectedslamballskill_.MergeFrom(from.selectedslamballskill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_templateid()) {
      set_templateid(from.templateid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_eol()) {
      set_eol(from.eol());
    }
    if (from.has_ladderlevel()) {
      set_ladderlevel(from.ladderlevel());
    }
    if (from.has_ladderexp()) {
      set_ladderexp(from.ladderexp());
    }
    if (from.has_ladderwincount()) {
      set_ladderwincount(from.ladderwincount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ladderlosecount()) {
      set_ladderlosecount(from.ladderlosecount());
    }
    if (from.has_ladderdrawcount()) {
      set_ladderdrawcount(from.ladderdrawcount());
    }
    if (from.has_freetalent()) {
      set_freetalent(from.freetalent());
    }
    if (from.has_fashionid()) {
      set_fashionid(from.fashionid());
    }
    if (from.has_fired()) {
      set_fired(from.fired());
    }
  }
  if (from._has_bits_[18 / 32] & (0xffu << (18 % 32))) {
    if (from.has_equipscore()) {
      set_equipscore(from.equipscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_HERO_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_HERO_DATA::CopyFrom(const KPB_HERO_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_HERO_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x000437ff) != 0x000437ff) return false;
  
  return true;
}

void KPB_HERO_DATA::Swap(KPB_HERO_DATA* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(templateid_, other->templateid_);
    std::swap(level_, other->level_);
    std::swap(exp_, other->exp_);
    std::swap(eol_, other->eol_);
    std::swap(ladderlevel_, other->ladderlevel_);
    std::swap(ladderexp_, other->ladderexp_);
    std::swap(ladderwincount_, other->ladderwincount_);
    std::swap(ladderlosecount_, other->ladderlosecount_);
    std::swap(ladderdrawcount_, other->ladderdrawcount_);
    std::swap(freetalent_, other->freetalent_);
    talent_.Swap(&other->talent_);
    std::swap(fashionid_, other->fashionid_);
    std::swap(fired_, other->fired_);
    selectedactiveskill_.Swap(&other->selectedactiveskill_);
    selectedpassiveskill_.Swap(&other->selectedpassiveskill_);
    selectednirvanaskill_.Swap(&other->selectednirvanaskill_);
    selectedslamballskill_.Swap(&other->selectedslamballskill_);
    std::swap(equipscore_, other->equipscore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_HERO_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_HERO_DATA_descriptor_;
  metadata.reflection = KPB_HERO_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_BUFF_DATA::kBuffIDFieldNumber;
const int KPB_BUFF_DATA::kLeftFrameFieldNumber;
const int KPB_BUFF_DATA::kActiveCountFieldNumber;
#endif  // !_MSC_VER

KPB_BUFF_DATA::KPB_BUFF_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_BUFF_DATA::InitAsDefaultInstance() {
}

KPB_BUFF_DATA::KPB_BUFF_DATA(const KPB_BUFF_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_BUFF_DATA::SharedCtor() {
  _cached_size_ = 0;
  buffid_ = 0u;
  leftframe_ = 0;
  activecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_BUFF_DATA::~KPB_BUFF_DATA() {
  SharedDtor();
}

void KPB_BUFF_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_BUFF_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_BUFF_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_BUFF_DATA_descriptor_;
}

const KPB_BUFF_DATA& KPB_BUFF_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_BUFF_DATA* KPB_BUFF_DATA::default_instance_ = NULL;

KPB_BUFF_DATA* KPB_BUFF_DATA::New() const {
  return new KPB_BUFF_DATA;
}

void KPB_BUFF_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buffid_ = 0u;
    leftframe_ = 0;
    activecount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_BUFF_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 BuffID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buffid_)));
          set_has_buffid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_LeftFrame;
        break;
      }
      
      // required int32 LeftFrame = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_LeftFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftframe_)));
          set_has_leftframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ActiveCount;
        break;
      }
      
      // required int32 ActiveCount = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ActiveCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activecount_)));
          set_has_activecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_BUFF_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 BuffID = 1 [default = 0];
  if (has_buffid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buffid(), output);
  }
  
  // required int32 LeftFrame = 2 [default = 0];
  if (has_leftframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->leftframe(), output);
  }
  
  // required int32 ActiveCount = 3 [default = 0];
  if (has_activecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->activecount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_BUFF_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 BuffID = 1 [default = 0];
  if (has_buffid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buffid(), target);
  }
  
  // required int32 LeftFrame = 2 [default = 0];
  if (has_leftframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->leftframe(), target);
  }
  
  // required int32 ActiveCount = 3 [default = 0];
  if (has_activecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->activecount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_BUFF_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 BuffID = 1 [default = 0];
    if (has_buffid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buffid());
    }
    
    // required int32 LeftFrame = 2 [default = 0];
    if (has_leftframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftframe());
    }
    
    // required int32 ActiveCount = 3 [default = 0];
    if (has_activecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activecount());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_BUFF_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_BUFF_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_BUFF_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_BUFF_DATA::MergeFrom(const KPB_BUFF_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buffid()) {
      set_buffid(from.buffid());
    }
    if (from.has_leftframe()) {
      set_leftframe(from.leftframe());
    }
    if (from.has_activecount()) {
      set_activecount(from.activecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_BUFF_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_BUFF_DATA::CopyFrom(const KPB_BUFF_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_BUFF_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void KPB_BUFF_DATA::Swap(KPB_BUFF_DATA* other) {
  if (other != this) {
    std::swap(buffid_, other->buffid_);
    std::swap(leftframe_, other->leftframe_);
    std::swap(activecount_, other->activecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_BUFF_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_BUFF_DATA_descriptor_;
  metadata.reflection = KPB_BUFF_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_BUFF_DATA_LIST::kBuffDataFieldNumber;
#endif  // !_MSC_VER

KPB_BUFF_DATA_LIST::KPB_BUFF_DATA_LIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_BUFF_DATA_LIST::InitAsDefaultInstance() {
}

KPB_BUFF_DATA_LIST::KPB_BUFF_DATA_LIST(const KPB_BUFF_DATA_LIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_BUFF_DATA_LIST::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_BUFF_DATA_LIST::~KPB_BUFF_DATA_LIST() {
  SharedDtor();
}

void KPB_BUFF_DATA_LIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_BUFF_DATA_LIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_BUFF_DATA_LIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_BUFF_DATA_LIST_descriptor_;
}

const KPB_BUFF_DATA_LIST& KPB_BUFF_DATA_LIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_BUFF_DATA_LIST* KPB_BUFF_DATA_LIST::default_instance_ = NULL;

KPB_BUFF_DATA_LIST* KPB_BUFF_DATA_LIST::New() const {
  return new KPB_BUFF_DATA_LIST;
}

void KPB_BUFF_DATA_LIST::Clear() {
  buffdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_BUFF_DATA_LIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .T3DB.KPB_BUFF_DATA BuffData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuffData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buffdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_BuffData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_BUFF_DATA_LIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .T3DB.KPB_BUFF_DATA BuffData = 1;
  for (int i = 0; i < this->buffdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->buffdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_BUFF_DATA_LIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .T3DB.KPB_BUFF_DATA BuffData = 1;
  for (int i = 0; i < this->buffdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->buffdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_BUFF_DATA_LIST::ByteSize() const {
  int total_size = 0;
  
  // repeated .T3DB.KPB_BUFF_DATA BuffData = 1;
  total_size += 1 * this->buffdata_size();
  for (int i = 0; i < this->buffdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buffdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_BUFF_DATA_LIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_BUFF_DATA_LIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_BUFF_DATA_LIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_BUFF_DATA_LIST::MergeFrom(const KPB_BUFF_DATA_LIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  buffdata_.MergeFrom(from.buffdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_BUFF_DATA_LIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_BUFF_DATA_LIST::CopyFrom(const KPB_BUFF_DATA_LIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_BUFF_DATA_LIST::IsInitialized() const {
  
  for (int i = 0; i < buffdata_size(); i++) {
    if (!this->buffdata(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_BUFF_DATA_LIST::Swap(KPB_BUFF_DATA_LIST* other) {
  if (other != this) {
    buffdata_.Swap(&other->buffdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_BUFF_DATA_LIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_BUFF_DATA_LIST_descriptor_;
  metadata.reflection = KPB_BUFF_DATA_LIST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_ROLE_MONEY_DATA::kSafeBoxLevelFieldNumber;
const int KPB_ROLE_MONEY_DATA::kMoneyFieldNumber;
const int KPB_ROLE_MONEY_DATA::kFreeCoinFieldNumber;
#endif  // !_MSC_VER

KPB_ROLE_MONEY_DATA::KPB_ROLE_MONEY_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_ROLE_MONEY_DATA::InitAsDefaultInstance() {
}

KPB_ROLE_MONEY_DATA::KPB_ROLE_MONEY_DATA(const KPB_ROLE_MONEY_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_ROLE_MONEY_DATA::SharedCtor() {
  _cached_size_ = 0;
  safeboxlevel_ = 0;
  freecoin_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_ROLE_MONEY_DATA::~KPB_ROLE_MONEY_DATA() {
  SharedDtor();
}

void KPB_ROLE_MONEY_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_ROLE_MONEY_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_ROLE_MONEY_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_ROLE_MONEY_DATA_descriptor_;
}

const KPB_ROLE_MONEY_DATA& KPB_ROLE_MONEY_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_ROLE_MONEY_DATA* KPB_ROLE_MONEY_DATA::default_instance_ = NULL;

KPB_ROLE_MONEY_DATA* KPB_ROLE_MONEY_DATA::New() const {
  return new KPB_ROLE_MONEY_DATA;
}

void KPB_ROLE_MONEY_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    safeboxlevel_ = 0;
    freecoin_ = 0;
  }
  money_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_ROLE_MONEY_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 SafeBoxLevel = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &safeboxlevel_)));
          set_has_safeboxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Money;
        break;
      }
      
      // repeated int32 Money = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_money())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18, input, this->mutable_money())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FreeCoin;
        break;
      }
      
      // required int32 FreeCoin = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FreeCoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freecoin_)));
          set_has_freecoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_ROLE_MONEY_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 SafeBoxLevel = 1 [default = 0];
  if (has_safeboxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->safeboxlevel(), output);
  }
  
  // repeated int32 Money = 2 [packed = true];
  if (this->money_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_money_cached_byte_size_);
  }
  for (int i = 0; i < this->money_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->money(i), output);
  }
  
  // required int32 FreeCoin = 3 [default = 0];
  if (has_freecoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->freecoin(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_ROLE_MONEY_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 SafeBoxLevel = 1 [default = 0];
  if (has_safeboxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->safeboxlevel(), target);
  }
  
  // repeated int32 Money = 2 [packed = true];
  if (this->money_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _money_cached_byte_size_, target);
  }
  for (int i = 0; i < this->money_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->money(i), target);
  }
  
  // required int32 FreeCoin = 3 [default = 0];
  if (has_freecoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->freecoin(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_ROLE_MONEY_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 SafeBoxLevel = 1 [default = 0];
    if (has_safeboxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->safeboxlevel());
    }
    
    // required int32 FreeCoin = 3 [default = 0];
    if (has_freecoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freecoin());
    }
    
  }
  // repeated int32 Money = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->money_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->money(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _money_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_ROLE_MONEY_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_ROLE_MONEY_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_ROLE_MONEY_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_ROLE_MONEY_DATA::MergeFrom(const KPB_ROLE_MONEY_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  money_.MergeFrom(from.money_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_safeboxlevel()) {
      set_safeboxlevel(from.safeboxlevel());
    }
    if (from.has_freecoin()) {
      set_freecoin(from.freecoin());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_ROLE_MONEY_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_ROLE_MONEY_DATA::CopyFrom(const KPB_ROLE_MONEY_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_ROLE_MONEY_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  return true;
}

void KPB_ROLE_MONEY_DATA::Swap(KPB_ROLE_MONEY_DATA* other) {
  if (other != this) {
    std::swap(safeboxlevel_, other->safeboxlevel_);
    money_.Swap(&other->money_);
    std::swap(freecoin_, other->freecoin_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_ROLE_MONEY_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_ROLE_MONEY_DATA_descriptor_;
  metadata.reflection = KPB_ROLE_MONEY_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_ACCEPT_QUEST::kQuestIDFieldNumber;
const int KPB_ACCEPT_QUEST::kQuestIndexFieldNumber;
const int KPB_ACCEPT_QUEST::kQuestValueFieldNumber;
#endif  // !_MSC_VER

KPB_ACCEPT_QUEST::KPB_ACCEPT_QUEST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_ACCEPT_QUEST::InitAsDefaultInstance() {
}

KPB_ACCEPT_QUEST::KPB_ACCEPT_QUEST(const KPB_ACCEPT_QUEST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_ACCEPT_QUEST::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  questindex_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_ACCEPT_QUEST::~KPB_ACCEPT_QUEST() {
  SharedDtor();
}

void KPB_ACCEPT_QUEST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_ACCEPT_QUEST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_ACCEPT_QUEST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_ACCEPT_QUEST_descriptor_;
}

const KPB_ACCEPT_QUEST& KPB_ACCEPT_QUEST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_ACCEPT_QUEST* KPB_ACCEPT_QUEST::default_instance_ = NULL;

KPB_ACCEPT_QUEST* KPB_ACCEPT_QUEST::New() const {
  return new KPB_ACCEPT_QUEST;
}

void KPB_ACCEPT_QUEST::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
    questindex_ = 0u;
  }
  questvalue_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_ACCEPT_QUEST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 QuestID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_QuestIndex;
        break;
      }
      
      // required uint32 QuestIndex = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_QuestIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questindex_)));
          set_has_questindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_QuestValue;
        break;
      }
      
      // repeated int32 QuestValue = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuestValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_questvalue())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 26, input, this->mutable_questvalue())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_ACCEPT_QUEST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 QuestID = 1 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }
  
  // required uint32 QuestIndex = 2 [default = 0];
  if (has_questindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->questindex(), output);
  }
  
  // repeated int32 QuestValue = 3 [packed = true];
  if (this->questvalue_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_questvalue_cached_byte_size_);
  }
  for (int i = 0; i < this->questvalue_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->questvalue(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_ACCEPT_QUEST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 QuestID = 1 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }
  
  // required uint32 QuestIndex = 2 [default = 0];
  if (has_questindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->questindex(), target);
  }
  
  // repeated int32 QuestValue = 3 [packed = true];
  if (this->questvalue_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _questvalue_cached_byte_size_, target);
  }
  for (int i = 0; i < this->questvalue_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->questvalue(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_ACCEPT_QUEST::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 QuestID = 1 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
    // required uint32 QuestIndex = 2 [default = 0];
    if (has_questindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questindex());
    }
    
  }
  // repeated int32 QuestValue = 3 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->questvalue_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->questvalue(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _questvalue_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_ACCEPT_QUEST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_ACCEPT_QUEST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_ACCEPT_QUEST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_ACCEPT_QUEST::MergeFrom(const KPB_ACCEPT_QUEST& from) {
  GOOGLE_CHECK_NE(&from, this);
  questvalue_.MergeFrom(from.questvalue_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_questindex()) {
      set_questindex(from.questindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_ACCEPT_QUEST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_ACCEPT_QUEST::CopyFrom(const KPB_ACCEPT_QUEST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_ACCEPT_QUEST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KPB_ACCEPT_QUEST::Swap(KPB_ACCEPT_QUEST* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(questindex_, other->questindex_);
    questvalue_.Swap(&other->questvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_ACCEPT_QUEST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_ACCEPT_QUEST_descriptor_;
  metadata.reflection = KPB_ACCEPT_QUEST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_DAILY_QUEST::kQuestIDFieldNumber;
const int KPB_DAILY_QUEST::kNextAcceptTimeFieldNumber;
#endif  // !_MSC_VER

KPB_DAILY_QUEST::KPB_DAILY_QUEST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_DAILY_QUEST::InitAsDefaultInstance() {
}

KPB_DAILY_QUEST::KPB_DAILY_QUEST(const KPB_DAILY_QUEST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_DAILY_QUEST::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0u;
  nextaccepttime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_DAILY_QUEST::~KPB_DAILY_QUEST() {
  SharedDtor();
}

void KPB_DAILY_QUEST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_DAILY_QUEST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_DAILY_QUEST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_DAILY_QUEST_descriptor_;
}

const KPB_DAILY_QUEST& KPB_DAILY_QUEST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_DAILY_QUEST* KPB_DAILY_QUEST::default_instance_ = NULL;

KPB_DAILY_QUEST* KPB_DAILY_QUEST::New() const {
  return new KPB_DAILY_QUEST;
}

void KPB_DAILY_QUEST::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0u;
    nextaccepttime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_DAILY_QUEST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 QuestID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NextAcceptTime;
        break;
      }
      
      // required int32 NextAcceptTime = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextAcceptTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextaccepttime_)));
          set_has_nextaccepttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_DAILY_QUEST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 QuestID = 1 [default = 0];
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->questid(), output);
  }
  
  // required int32 NextAcceptTime = 2 [default = 0];
  if (has_nextaccepttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nextaccepttime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_DAILY_QUEST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 QuestID = 1 [default = 0];
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->questid(), target);
  }
  
  // required int32 NextAcceptTime = 2 [default = 0];
  if (has_nextaccepttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nextaccepttime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_DAILY_QUEST::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 QuestID = 1 [default = 0];
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questid());
    }
    
    // required int32 NextAcceptTime = 2 [default = 0];
    if (has_nextaccepttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextaccepttime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_DAILY_QUEST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_DAILY_QUEST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_DAILY_QUEST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_DAILY_QUEST::MergeFrom(const KPB_DAILY_QUEST& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_nextaccepttime()) {
      set_nextaccepttime(from.nextaccepttime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_DAILY_QUEST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_DAILY_QUEST::CopyFrom(const KPB_DAILY_QUEST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_DAILY_QUEST::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KPB_DAILY_QUEST::Swap(KPB_DAILY_QUEST* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(nextaccepttime_, other->nextaccepttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_DAILY_QUEST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_DAILY_QUEST_descriptor_;
  metadata.reflection = KPB_DAILY_QUEST_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_DAILY_QUEST_DATA::kDailyQuestFieldNumber;
#endif  // !_MSC_VER

KPB_DAILY_QUEST_DATA::KPB_DAILY_QUEST_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_DAILY_QUEST_DATA::InitAsDefaultInstance() {
}

KPB_DAILY_QUEST_DATA::KPB_DAILY_QUEST_DATA(const KPB_DAILY_QUEST_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_DAILY_QUEST_DATA::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_DAILY_QUEST_DATA::~KPB_DAILY_QUEST_DATA() {
  SharedDtor();
}

void KPB_DAILY_QUEST_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_DAILY_QUEST_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_DAILY_QUEST_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_DAILY_QUEST_DATA_descriptor_;
}

const KPB_DAILY_QUEST_DATA& KPB_DAILY_QUEST_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_DAILY_QUEST_DATA* KPB_DAILY_QUEST_DATA::default_instance_ = NULL;

KPB_DAILY_QUEST_DATA* KPB_DAILY_QUEST_DATA::New() const {
  return new KPB_DAILY_QUEST_DATA;
}

void KPB_DAILY_QUEST_DATA::Clear() {
  dailyquest_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_DAILY_QUEST_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .T3DB.KPB_DAILY_QUEST DailyQuest = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyQuest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dailyquest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_DailyQuest;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_DAILY_QUEST_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .T3DB.KPB_DAILY_QUEST DailyQuest = 1;
  for (int i = 0; i < this->dailyquest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dailyquest(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_DAILY_QUEST_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .T3DB.KPB_DAILY_QUEST DailyQuest = 1;
  for (int i = 0; i < this->dailyquest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dailyquest(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_DAILY_QUEST_DATA::ByteSize() const {
  int total_size = 0;
  
  // repeated .T3DB.KPB_DAILY_QUEST DailyQuest = 1;
  total_size += 1 * this->dailyquest_size();
  for (int i = 0; i < this->dailyquest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->dailyquest(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_DAILY_QUEST_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_DAILY_QUEST_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_DAILY_QUEST_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_DAILY_QUEST_DATA::MergeFrom(const KPB_DAILY_QUEST_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  dailyquest_.MergeFrom(from.dailyquest_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_DAILY_QUEST_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_DAILY_QUEST_DATA::CopyFrom(const KPB_DAILY_QUEST_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_DAILY_QUEST_DATA::IsInitialized() const {
  
  for (int i = 0; i < dailyquest_size(); i++) {
    if (!this->dailyquest(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_DAILY_QUEST_DATA::Swap(KPB_DAILY_QUEST_DATA* other) {
  if (other != this) {
    dailyquest_.Swap(&other->dailyquest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_DAILY_QUEST_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_DAILY_QUEST_DATA_descriptor_;
  metadata.reflection = KPB_DAILY_QUEST_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_HEROTRAINING_DATA_HEADER::kSlotCountFieldNumber;
const int KPB_HEROTRAINING_DATA_HEADER::kBuySlotTimesFieldNumber;
const int KPB_HEROTRAINING_DATA_HEADER::kTeacherLevelFieldNumber;
#endif  // !_MSC_VER

KPB_HEROTRAINING_DATA_HEADER::KPB_HEROTRAINING_DATA_HEADER()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_HEROTRAINING_DATA_HEADER::InitAsDefaultInstance() {
}

KPB_HEROTRAINING_DATA_HEADER::KPB_HEROTRAINING_DATA_HEADER(const KPB_HEROTRAINING_DATA_HEADER& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_HEROTRAINING_DATA_HEADER::SharedCtor() {
  _cached_size_ = 0;
  slotcount_ = 0u;
  buyslottimes_ = 0u;
  teacherlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_HEROTRAINING_DATA_HEADER::~KPB_HEROTRAINING_DATA_HEADER() {
  SharedDtor();
}

void KPB_HEROTRAINING_DATA_HEADER::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_HEROTRAINING_DATA_HEADER::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_HEROTRAINING_DATA_HEADER::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_HEROTRAINING_DATA_HEADER_descriptor_;
}

const KPB_HEROTRAINING_DATA_HEADER& KPB_HEROTRAINING_DATA_HEADER::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_HEROTRAINING_DATA_HEADER* KPB_HEROTRAINING_DATA_HEADER::default_instance_ = NULL;

KPB_HEROTRAINING_DATA_HEADER* KPB_HEROTRAINING_DATA_HEADER::New() const {
  return new KPB_HEROTRAINING_DATA_HEADER;
}

void KPB_HEROTRAINING_DATA_HEADER::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    slotcount_ = 0u;
    buyslottimes_ = 0u;
    teacherlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_HEROTRAINING_DATA_HEADER::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 SlotCount = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &slotcount_)));
          set_has_slotcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BuySlotTimes;
        break;
      }
      
      // required uint32 BuySlotTimes = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BuySlotTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyslottimes_)));
          set_has_buyslottimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TeacherLevel;
        break;
      }
      
      // required uint32 TeacherLevel = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeacherLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teacherlevel_)));
          set_has_teacherlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_HEROTRAINING_DATA_HEADER::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 SlotCount = 1 [default = 0];
  if (has_slotcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->slotcount(), output);
  }
  
  // required uint32 BuySlotTimes = 2 [default = 0];
  if (has_buyslottimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->buyslottimes(), output);
  }
  
  // required uint32 TeacherLevel = 3 [default = 0];
  if (has_teacherlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teacherlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_HEROTRAINING_DATA_HEADER::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 SlotCount = 1 [default = 0];
  if (has_slotcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->slotcount(), target);
  }
  
  // required uint32 BuySlotTimes = 2 [default = 0];
  if (has_buyslottimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->buyslottimes(), target);
  }
  
  // required uint32 TeacherLevel = 3 [default = 0];
  if (has_teacherlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teacherlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_HEROTRAINING_DATA_HEADER::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 SlotCount = 1 [default = 0];
    if (has_slotcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->slotcount());
    }
    
    // required uint32 BuySlotTimes = 2 [default = 0];
    if (has_buyslottimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyslottimes());
    }
    
    // required uint32 TeacherLevel = 3 [default = 0];
    if (has_teacherlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teacherlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_HEROTRAINING_DATA_HEADER::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_HEROTRAINING_DATA_HEADER* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_HEROTRAINING_DATA_HEADER*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_HEROTRAINING_DATA_HEADER::MergeFrom(const KPB_HEROTRAINING_DATA_HEADER& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_slotcount()) {
      set_slotcount(from.slotcount());
    }
    if (from.has_buyslottimes()) {
      set_buyslottimes(from.buyslottimes());
    }
    if (from.has_teacherlevel()) {
      set_teacherlevel(from.teacherlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_HEROTRAINING_DATA_HEADER::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_HEROTRAINING_DATA_HEADER::CopyFrom(const KPB_HEROTRAINING_DATA_HEADER& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_HEROTRAINING_DATA_HEADER::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void KPB_HEROTRAINING_DATA_HEADER::Swap(KPB_HEROTRAINING_DATA_HEADER* other) {
  if (other != this) {
    std::swap(slotcount_, other->slotcount_);
    std::swap(buyslottimes_, other->buyslottimes_);
    std::swap(teacherlevel_, other->teacherlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_HEROTRAINING_DATA_HEADER::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_HEROTRAINING_DATA_HEADER_descriptor_;
  metadata.reflection = KPB_HEROTRAINING_DATA_HEADER_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_HEROTRAINING_DATA::kHeroTemplateIDFieldNumber;
const int KPB_HEROTRAINING_DATA::kEndTimeFieldNumber;
const int KPB_HEROTRAINING_DATA::kTrainingIDFieldNumber;
#endif  // !_MSC_VER

KPB_HEROTRAINING_DATA::KPB_HEROTRAINING_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_HEROTRAINING_DATA::InitAsDefaultInstance() {
}

KPB_HEROTRAINING_DATA::KPB_HEROTRAINING_DATA(const KPB_HEROTRAINING_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_HEROTRAINING_DATA::SharedCtor() {
  _cached_size_ = 0;
  herotemplateid_ = 0u;
  endtime_ = 0;
  trainingid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_HEROTRAINING_DATA::~KPB_HEROTRAINING_DATA() {
  SharedDtor();
}

void KPB_HEROTRAINING_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_HEROTRAINING_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_HEROTRAINING_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_HEROTRAINING_DATA_descriptor_;
}

const KPB_HEROTRAINING_DATA& KPB_HEROTRAINING_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_HEROTRAINING_DATA* KPB_HEROTRAINING_DATA::default_instance_ = NULL;

KPB_HEROTRAINING_DATA* KPB_HEROTRAINING_DATA::New() const {
  return new KPB_HEROTRAINING_DATA;
}

void KPB_HEROTRAINING_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    herotemplateid_ = 0u;
    endtime_ = 0;
    trainingid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_HEROTRAINING_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 HeroTemplateID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herotemplateid_)));
          set_has_herotemplateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_EndTime;
        break;
      }
      
      // required int32 EndTime = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TrainingID;
        break;
      }
      
      // required uint32 TrainingID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TrainingID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &trainingid_)));
          set_has_trainingid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_HEROTRAINING_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 HeroTemplateID = 1 [default = 0];
  if (has_herotemplateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->herotemplateid(), output);
  }
  
  // required int32 EndTime = 2 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->endtime(), output);
  }
  
  // required uint32 TrainingID = 3 [default = 0];
  if (has_trainingid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->trainingid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_HEROTRAINING_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 HeroTemplateID = 1 [default = 0];
  if (has_herotemplateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->herotemplateid(), target);
  }
  
  // required int32 EndTime = 2 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->endtime(), target);
  }
  
  // required uint32 TrainingID = 3 [default = 0];
  if (has_trainingid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->trainingid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_HEROTRAINING_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 HeroTemplateID = 1 [default = 0];
    if (has_herotemplateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herotemplateid());
    }
    
    // required int32 EndTime = 2 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }
    
    // required uint32 TrainingID = 3 [default = 0];
    if (has_trainingid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->trainingid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_HEROTRAINING_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_HEROTRAINING_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_HEROTRAINING_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_HEROTRAINING_DATA::MergeFrom(const KPB_HEROTRAINING_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_herotemplateid()) {
      set_herotemplateid(from.herotemplateid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_trainingid()) {
      set_trainingid(from.trainingid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_HEROTRAINING_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_HEROTRAINING_DATA::CopyFrom(const KPB_HEROTRAINING_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_HEROTRAINING_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void KPB_HEROTRAINING_DATA::Swap(KPB_HEROTRAINING_DATA* other) {
  if (other != this) {
    std::swap(herotemplateid_, other->herotemplateid_);
    std::swap(endtime_, other->endtime_);
    std::swap(trainingid_, other->trainingid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_HEROTRAINING_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_HEROTRAINING_DATA_descriptor_;
  metadata.reflection = KPB_HEROTRAINING_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_ONE_MISSION_DATA::kTypeFieldNumber;
const int KPB_ONE_MISSION_DATA::kStepFieldNumber;
const int KPB_ONE_MISSION_DATA::kOpenedLevelFieldNumber;
const int KPB_ONE_MISSION_DATA::kFinishedLevelFieldNumber;
#endif  // !_MSC_VER

KPB_ONE_MISSION_DATA::KPB_ONE_MISSION_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_ONE_MISSION_DATA::InitAsDefaultInstance() {
}

KPB_ONE_MISSION_DATA::KPB_ONE_MISSION_DATA(const KPB_ONE_MISSION_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_ONE_MISSION_DATA::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0u;
  step_ = 0u;
  openedlevel_ = 0u;
  finishedlevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_ONE_MISSION_DATA::~KPB_ONE_MISSION_DATA() {
  SharedDtor();
}

void KPB_ONE_MISSION_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_ONE_MISSION_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_ONE_MISSION_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_ONE_MISSION_DATA_descriptor_;
}

const KPB_ONE_MISSION_DATA& KPB_ONE_MISSION_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_ONE_MISSION_DATA* KPB_ONE_MISSION_DATA::default_instance_ = NULL;

KPB_ONE_MISSION_DATA* KPB_ONE_MISSION_DATA::New() const {
  return new KPB_ONE_MISSION_DATA;
}

void KPB_ONE_MISSION_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0u;
    step_ = 0u;
    openedlevel_ = 0u;
    finishedlevel_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_ONE_MISSION_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Step;
        break;
      }
      
      // required uint32 Step = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Step:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &step_)));
          set_has_step();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_OpenedLevel;
        break;
      }
      
      // required uint32 OpenedLevel = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OpenedLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &openedlevel_)));
          set_has_openedlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_FinishedLevel;
        break;
      }
      
      // required uint32 FinishedLevel = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FinishedLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finishedlevel_)));
          set_has_finishedlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_ONE_MISSION_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Type = 1 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->type(), output);
  }
  
  // required uint32 Step = 2 [default = 0];
  if (has_step()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->step(), output);
  }
  
  // required uint32 OpenedLevel = 3 [default = 0];
  if (has_openedlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->openedlevel(), output);
  }
  
  // required uint32 FinishedLevel = 4 [default = 0];
  if (has_finishedlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->finishedlevel(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_ONE_MISSION_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Type = 1 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->type(), target);
  }
  
  // required uint32 Step = 2 [default = 0];
  if (has_step()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->step(), target);
  }
  
  // required uint32 OpenedLevel = 3 [default = 0];
  if (has_openedlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->openedlevel(), target);
  }
  
  // required uint32 FinishedLevel = 4 [default = 0];
  if (has_finishedlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->finishedlevel(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_ONE_MISSION_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Type = 1 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 Step = 2 [default = 0];
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->step());
    }
    
    // required uint32 OpenedLevel = 3 [default = 0];
    if (has_openedlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->openedlevel());
    }
    
    // required uint32 FinishedLevel = 4 [default = 0];
    if (has_finishedlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finishedlevel());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_ONE_MISSION_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_ONE_MISSION_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_ONE_MISSION_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_ONE_MISSION_DATA::MergeFrom(const KPB_ONE_MISSION_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
    if (from.has_openedlevel()) {
      set_openedlevel(from.openedlevel());
    }
    if (from.has_finishedlevel()) {
      set_finishedlevel(from.finishedlevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_ONE_MISSION_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_ONE_MISSION_DATA::CopyFrom(const KPB_ONE_MISSION_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_ONE_MISSION_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void KPB_ONE_MISSION_DATA::Swap(KPB_ONE_MISSION_DATA* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(step_, other->step_);
    std::swap(openedlevel_, other->openedlevel_);
    std::swap(finishedlevel_, other->finishedlevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_ONE_MISSION_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_ONE_MISSION_DATA_descriptor_;
  metadata.reflection = KPB_ONE_MISSION_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_MISSION_DATA::kMissionsFieldNumber;
#endif  // !_MSC_VER

KPB_MISSION_DATA::KPB_MISSION_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_MISSION_DATA::InitAsDefaultInstance() {
}

KPB_MISSION_DATA::KPB_MISSION_DATA(const KPB_MISSION_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_MISSION_DATA::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_MISSION_DATA::~KPB_MISSION_DATA() {
  SharedDtor();
}

void KPB_MISSION_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_MISSION_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_MISSION_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_MISSION_DATA_descriptor_;
}

const KPB_MISSION_DATA& KPB_MISSION_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_MISSION_DATA* KPB_MISSION_DATA::default_instance_ = NULL;

KPB_MISSION_DATA* KPB_MISSION_DATA::New() const {
  return new KPB_MISSION_DATA;
}

void KPB_MISSION_DATA::Clear() {
  missions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_MISSION_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .T3DB.KPB_ONE_MISSION_DATA Missions = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Missions:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_missions()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Missions;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_MISSION_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .T3DB.KPB_ONE_MISSION_DATA Missions = 1;
  for (int i = 0; i < this->missions_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missions(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_MISSION_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .T3DB.KPB_ONE_MISSION_DATA Missions = 1;
  for (int i = 0; i < this->missions_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missions(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_MISSION_DATA::ByteSize() const {
  int total_size = 0;
  
  // repeated .T3DB.KPB_ONE_MISSION_DATA Missions = 1;
  total_size += 1 * this->missions_size();
  for (int i = 0; i < this->missions_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->missions(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_MISSION_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_MISSION_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_MISSION_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_MISSION_DATA::MergeFrom(const KPB_MISSION_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  missions_.MergeFrom(from.missions_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_MISSION_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_MISSION_DATA::CopyFrom(const KPB_MISSION_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_MISSION_DATA::IsInitialized() const {
  
  for (int i = 0; i < missions_size(); i++) {
    if (!this->missions(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_MISSION_DATA::Swap(KPB_MISSION_DATA* other) {
  if (other != this) {
    missions_.Swap(&other->missions_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_MISSION_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_MISSION_DATA_descriptor_;
  metadata.reflection = KPB_MISSION_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_MAKING_MACHINE_DATA::kRecipeStateFieldNumber;
#endif  // !_MSC_VER

KPB_MAKING_MACHINE_DATA::KPB_MAKING_MACHINE_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_MAKING_MACHINE_DATA::InitAsDefaultInstance() {
}

KPB_MAKING_MACHINE_DATA::KPB_MAKING_MACHINE_DATA(const KPB_MAKING_MACHINE_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_MAKING_MACHINE_DATA::SharedCtor() {
  _cached_size_ = 0;
  recipestate_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_MAKING_MACHINE_DATA::~KPB_MAKING_MACHINE_DATA() {
  SharedDtor();
}

void KPB_MAKING_MACHINE_DATA::SharedDtor() {
  if (recipestate_ != &::google::protobuf::internal::kEmptyString) {
    delete recipestate_;
  }
  if (this != default_instance_) {
  }
}

void KPB_MAKING_MACHINE_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_MAKING_MACHINE_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_MAKING_MACHINE_DATA_descriptor_;
}

const KPB_MAKING_MACHINE_DATA& KPB_MAKING_MACHINE_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_MAKING_MACHINE_DATA* KPB_MAKING_MACHINE_DATA::default_instance_ = NULL;

KPB_MAKING_MACHINE_DATA* KPB_MAKING_MACHINE_DATA::New() const {
  return new KPB_MAKING_MACHINE_DATA;
}

void KPB_MAKING_MACHINE_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_recipestate()) {
      if (recipestate_ != &::google::protobuf::internal::kEmptyString) {
        recipestate_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_MAKING_MACHINE_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes RecipeState = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_recipestate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_MAKING_MACHINE_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes RecipeState = 2 [default = ""];
  if (has_recipestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->recipestate(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_MAKING_MACHINE_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes RecipeState = 2 [default = ""];
  if (has_recipestate()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->recipestate(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_MAKING_MACHINE_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes RecipeState = 2 [default = ""];
    if (has_recipestate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->recipestate());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_MAKING_MACHINE_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_MAKING_MACHINE_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_MAKING_MACHINE_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_MAKING_MACHINE_DATA::MergeFrom(const KPB_MAKING_MACHINE_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_recipestate()) {
      set_recipestate(from.recipestate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_MAKING_MACHINE_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_MAKING_MACHINE_DATA::CopyFrom(const KPB_MAKING_MACHINE_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_MAKING_MACHINE_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void KPB_MAKING_MACHINE_DATA::Swap(KPB_MAKING_MACHINE_DATA* other) {
  if (other != this) {
    std::swap(recipestate_, other->recipestate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_MAKING_MACHINE_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_MAKING_MACHINE_DATA_descriptor_;
  metadata.reflection = KPB_MAKING_MACHINE_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_UPGRADE_NODE::kEndTimeFieldNumber;
const int KPB_UPGRADE_NODE::kUpgradeTypeFieldNumber;
const int KPB_UPGRADE_NODE::kHeroTemplateIDFieldNumber;
#endif  // !_MSC_VER

KPB_UPGRADE_NODE::KPB_UPGRADE_NODE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_UPGRADE_NODE::InitAsDefaultInstance() {
}

KPB_UPGRADE_NODE::KPB_UPGRADE_NODE(const KPB_UPGRADE_NODE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_UPGRADE_NODE::SharedCtor() {
  _cached_size_ = 0;
  endtime_ = 0;
  upgradetype_ = 0u;
  herotemplateid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_UPGRADE_NODE::~KPB_UPGRADE_NODE() {
  SharedDtor();
}

void KPB_UPGRADE_NODE::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_UPGRADE_NODE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_UPGRADE_NODE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_UPGRADE_NODE_descriptor_;
}

const KPB_UPGRADE_NODE& KPB_UPGRADE_NODE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_UPGRADE_NODE* KPB_UPGRADE_NODE::default_instance_ = NULL;

KPB_UPGRADE_NODE* KPB_UPGRADE_NODE::New() const {
  return new KPB_UPGRADE_NODE;
}

void KPB_UPGRADE_NODE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    endtime_ = 0;
    upgradetype_ = 0u;
    herotemplateid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_UPGRADE_NODE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 EndTime = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UpgradeType;
        break;
      }
      
      // required uint32 UpgradeType = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UpgradeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &upgradetype_)));
          set_has_upgradetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_HeroTemplateID;
        break;
      }
      
      // required uint32 HeroTemplateID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_HeroTemplateID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herotemplateid_)));
          set_has_herotemplateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_UPGRADE_NODE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 EndTime = 1 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->endtime(), output);
  }
  
  // required uint32 UpgradeType = 2 [default = 0];
  if (has_upgradetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->upgradetype(), output);
  }
  
  // required uint32 HeroTemplateID = 3 [default = 0];
  if (has_herotemplateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->herotemplateid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_UPGRADE_NODE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 EndTime = 1 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->endtime(), target);
  }
  
  // required uint32 UpgradeType = 2 [default = 0];
  if (has_upgradetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->upgradetype(), target);
  }
  
  // required uint32 HeroTemplateID = 3 [default = 0];
  if (has_herotemplateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->herotemplateid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_UPGRADE_NODE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 EndTime = 1 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }
    
    // required uint32 UpgradeType = 2 [default = 0];
    if (has_upgradetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->upgradetype());
    }
    
    // required uint32 HeroTemplateID = 3 [default = 0];
    if (has_herotemplateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herotemplateid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_UPGRADE_NODE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_UPGRADE_NODE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_UPGRADE_NODE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_UPGRADE_NODE::MergeFrom(const KPB_UPGRADE_NODE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_upgradetype()) {
      set_upgradetype(from.upgradetype());
    }
    if (from.has_herotemplateid()) {
      set_herotemplateid(from.herotemplateid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_UPGRADE_NODE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_UPGRADE_NODE::CopyFrom(const KPB_UPGRADE_NODE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_UPGRADE_NODE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void KPB_UPGRADE_NODE::Swap(KPB_UPGRADE_NODE* other) {
  if (other != this) {
    std::swap(endtime_, other->endtime_);
    std::swap(upgradetype_, other->upgradetype_);
    std::swap(herotemplateid_, other->herotemplateid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_UPGRADE_NODE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_UPGRADE_NODE_descriptor_;
  metadata.reflection = KPB_UPGRADE_NODE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_UPGRADE_QUEUE_DATA::kCountFieldNumber;
const int KPB_UPGRADE_QUEUE_DATA::kFreeClearCDTimesFieldNumber;
const int KPB_UPGRADE_QUEUE_DATA::kNodeFieldNumber;
const int KPB_UPGRADE_QUEUE_DATA::kMaxSlotCountFieldNumber;
#endif  // !_MSC_VER

KPB_UPGRADE_QUEUE_DATA::KPB_UPGRADE_QUEUE_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_UPGRADE_QUEUE_DATA::InitAsDefaultInstance() {
}

KPB_UPGRADE_QUEUE_DATA::KPB_UPGRADE_QUEUE_DATA(const KPB_UPGRADE_QUEUE_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_UPGRADE_QUEUE_DATA::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0u;
  freeclearcdtimes_ = 0;
  maxslotcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_UPGRADE_QUEUE_DATA::~KPB_UPGRADE_QUEUE_DATA() {
  SharedDtor();
}

void KPB_UPGRADE_QUEUE_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_UPGRADE_QUEUE_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_UPGRADE_QUEUE_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_UPGRADE_QUEUE_DATA_descriptor_;
}

const KPB_UPGRADE_QUEUE_DATA& KPB_UPGRADE_QUEUE_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_UPGRADE_QUEUE_DATA* KPB_UPGRADE_QUEUE_DATA::default_instance_ = NULL;

KPB_UPGRADE_QUEUE_DATA* KPB_UPGRADE_QUEUE_DATA::New() const {
  return new KPB_UPGRADE_QUEUE_DATA;
}

void KPB_UPGRADE_QUEUE_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0u;
    freeclearcdtimes_ = 0;
    maxslotcount_ = 0u;
  }
  node_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_UPGRADE_QUEUE_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Count = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FreeClearCDTimes;
        break;
      }
      
      // required int32 FreeClearCDTimes = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FreeClearCDTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &freeclearcdtimes_)));
          set_has_freeclearcdtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node;
        break;
      }
      
      // repeated .T3DB.KPB_UPGRADE_NODE node = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_node;
        if (input->ExpectTag(32)) goto parse_MaxSlotCount;
        break;
      }
      
      // required uint32 MaxSlotCount = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MaxSlotCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxslotcount_)));
          set_has_maxslotcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_UPGRADE_QUEUE_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Count = 1 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->count(), output);
  }
  
  // required int32 FreeClearCDTimes = 2 [default = 0];
  if (has_freeclearcdtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->freeclearcdtimes(), output);
  }
  
  // repeated .T3DB.KPB_UPGRADE_NODE node = 3;
  for (int i = 0; i < this->node_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node(i), output);
  }
  
  // required uint32 MaxSlotCount = 4 [default = 0];
  if (has_maxslotcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->maxslotcount(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_UPGRADE_QUEUE_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Count = 1 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->count(), target);
  }
  
  // required int32 FreeClearCDTimes = 2 [default = 0];
  if (has_freeclearcdtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->freeclearcdtimes(), target);
  }
  
  // repeated .T3DB.KPB_UPGRADE_NODE node = 3;
  for (int i = 0; i < this->node_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->node(i), target);
  }
  
  // required uint32 MaxSlotCount = 4 [default = 0];
  if (has_maxslotcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->maxslotcount(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_UPGRADE_QUEUE_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Count = 1 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
    // required int32 FreeClearCDTimes = 2 [default = 0];
    if (has_freeclearcdtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->freeclearcdtimes());
    }
    
    // required uint32 MaxSlotCount = 4 [default = 0];
    if (has_maxslotcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxslotcount());
    }
    
  }
  // repeated .T3DB.KPB_UPGRADE_NODE node = 3;
  total_size += 1 * this->node_size();
  for (int i = 0; i < this->node_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_UPGRADE_QUEUE_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_UPGRADE_QUEUE_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_UPGRADE_QUEUE_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_UPGRADE_QUEUE_DATA::MergeFrom(const KPB_UPGRADE_QUEUE_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_.MergeFrom(from.node_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_freeclearcdtimes()) {
      set_freeclearcdtimes(from.freeclearcdtimes());
    }
    if (from.has_maxslotcount()) {
      set_maxslotcount(from.maxslotcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_UPGRADE_QUEUE_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_UPGRADE_QUEUE_DATA::CopyFrom(const KPB_UPGRADE_QUEUE_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_UPGRADE_QUEUE_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;
  
  for (int i = 0; i < node_size(); i++) {
    if (!this->node(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_UPGRADE_QUEUE_DATA::Swap(KPB_UPGRADE_QUEUE_DATA* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(freeclearcdtimes_, other->freeclearcdtimes_);
    node_.Swap(&other->node_);
    std::swap(maxslotcount_, other->maxslotcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_UPGRADE_QUEUE_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_UPGRADE_QUEUE_DATA_descriptor_;
  metadata.reflection = KPB_UPGRADE_QUEUE_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_USINGEQUIP_INFO::kHeroTemplateIDFieldNumber;
const int KPB_USINGEQUIP_INFO::kTypeFieldNumber;
const int KPB_USINGEQUIP_INFO::kEndTimeFieldNumber;
const int KPB_USINGEQUIP_INFO::kCountFieldNumber;
#endif  // !_MSC_VER

KPB_USINGEQUIP_INFO::KPB_USINGEQUIP_INFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_USINGEQUIP_INFO::InitAsDefaultInstance() {
}

KPB_USINGEQUIP_INFO::KPB_USINGEQUIP_INFO(const KPB_USINGEQUIP_INFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_USINGEQUIP_INFO::SharedCtor() {
  _cached_size_ = 0;
  herotemplateid_ = 0u;
  type_ = 0u;
  endtime_ = 0;
  count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_USINGEQUIP_INFO::~KPB_USINGEQUIP_INFO() {
  SharedDtor();
}

void KPB_USINGEQUIP_INFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_USINGEQUIP_INFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_USINGEQUIP_INFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_USINGEQUIP_INFO_descriptor_;
}

const KPB_USINGEQUIP_INFO& KPB_USINGEQUIP_INFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_USINGEQUIP_INFO* KPB_USINGEQUIP_INFO::default_instance_ = NULL;

KPB_USINGEQUIP_INFO* KPB_USINGEQUIP_INFO::New() const {
  return new KPB_USINGEQUIP_INFO;
}

void KPB_USINGEQUIP_INFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    herotemplateid_ = 0u;
    type_ = 0u;
    endtime_ = 0;
    count_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_USINGEQUIP_INFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 HeroTemplateID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herotemplateid_)));
          set_has_herotemplateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // required uint32 Type = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }
      
      // required int32 EndTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Count;
        break;
      }
      
      // required uint32 Count = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_USINGEQUIP_INFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 HeroTemplateID = 1 [default = 0];
  if (has_herotemplateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->herotemplateid(), output);
  }
  
  // required uint32 Type = 2 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // required int32 EndTime = 3 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endtime(), output);
  }
  
  // required uint32 Count = 4 [default = 0];
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->count(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_USINGEQUIP_INFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 HeroTemplateID = 1 [default = 0];
  if (has_herotemplateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->herotemplateid(), target);
  }
  
  // required uint32 Type = 2 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // required int32 EndTime = 3 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endtime(), target);
  }
  
  // required uint32 Count = 4 [default = 0];
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->count(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_USINGEQUIP_INFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 HeroTemplateID = 1 [default = 0];
    if (has_herotemplateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herotemplateid());
    }
    
    // required uint32 Type = 2 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required int32 EndTime = 3 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }
    
    // required uint32 Count = 4 [default = 0];
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->count());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_USINGEQUIP_INFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_USINGEQUIP_INFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_USINGEQUIP_INFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_USINGEQUIP_INFO::MergeFrom(const KPB_USINGEQUIP_INFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_herotemplateid()) {
      set_herotemplateid(from.herotemplateid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_USINGEQUIP_INFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_USINGEQUIP_INFO::CopyFrom(const KPB_USINGEQUIP_INFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_USINGEQUIP_INFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;
  
  return true;
}

void KPB_USINGEQUIP_INFO::Swap(KPB_USINGEQUIP_INFO* other) {
  if (other != this) {
    std::swap(herotemplateid_, other->herotemplateid_);
    std::swap(type_, other->type_);
    std::swap(endtime_, other->endtime_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_USINGEQUIP_INFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_USINGEQUIP_INFO_descriptor_;
  metadata.reflection = KPB_USINGEQUIP_INFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_GYM_DATA::kEquipLevelFieldNumber;
const int KPB_GYM_DATA::kInfoFieldNumber;
#endif  // !_MSC_VER

KPB_GYM_DATA::KPB_GYM_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_GYM_DATA::InitAsDefaultInstance() {
}

KPB_GYM_DATA::KPB_GYM_DATA(const KPB_GYM_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_GYM_DATA::SharedCtor() {
  _cached_size_ = 0;
  equiplevel_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_GYM_DATA::~KPB_GYM_DATA() {
  SharedDtor();
}

void KPB_GYM_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_GYM_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_GYM_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_GYM_DATA_descriptor_;
}

const KPB_GYM_DATA& KPB_GYM_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_GYM_DATA* KPB_GYM_DATA::default_instance_ = NULL;

KPB_GYM_DATA* KPB_GYM_DATA::New() const {
  return new KPB_GYM_DATA;
}

void KPB_GYM_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    equiplevel_ = 0u;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_GYM_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 EquipLevel = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &equiplevel_)));
          set_has_equiplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }
      
      // repeated .T3DB.KPB_USINGEQUIP_INFO info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_GYM_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 EquipLevel = 1 [default = 0];
  if (has_equiplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->equiplevel(), output);
  }
  
  // repeated .T3DB.KPB_USINGEQUIP_INFO info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_GYM_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 EquipLevel = 1 [default = 0];
  if (has_equiplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->equiplevel(), target);
  }
  
  // repeated .T3DB.KPB_USINGEQUIP_INFO info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_GYM_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 EquipLevel = 1 [default = 0];
    if (has_equiplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->equiplevel());
    }
    
  }
  // repeated .T3DB.KPB_USINGEQUIP_INFO info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_GYM_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_GYM_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_GYM_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_GYM_DATA::MergeFrom(const KPB_GYM_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_equiplevel()) {
      set_equiplevel(from.equiplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_GYM_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_GYM_DATA::CopyFrom(const KPB_GYM_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_GYM_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_GYM_DATA::Swap(KPB_GYM_DATA* other) {
  if (other != this) {
    std::swap(equiplevel_, other->equiplevel_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_GYM_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_GYM_DATA_descriptor_;
  metadata.reflection = KPB_GYM_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_STORE_DATA::kIDFieldNumber;
const int KPB_STORE_DATA::kTypeFieldNumber;
const int KPB_STORE_DATA::kLevelFieldNumber;
const int KPB_STORE_DATA::kGetMoneyTimesFieldNumber;
const int KPB_STORE_DATA::kNextGetMoneyTimeFieldNumber;
const int KPB_STORE_DATA::kStateFieldNumber;
#endif  // !_MSC_VER

KPB_STORE_DATA::KPB_STORE_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_STORE_DATA::InitAsDefaultInstance() {
}

KPB_STORE_DATA::KPB_STORE_DATA(const KPB_STORE_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_STORE_DATA::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  type_ = 0u;
  level_ = 0u;
  getmoneytimes_ = 0u;
  nextgetmoneytime_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_STORE_DATA::~KPB_STORE_DATA() {
  SharedDtor();
}

void KPB_STORE_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_STORE_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_STORE_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_STORE_DATA_descriptor_;
}

const KPB_STORE_DATA& KPB_STORE_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_STORE_DATA* KPB_STORE_DATA::default_instance_ = NULL;

KPB_STORE_DATA* KPB_STORE_DATA::New() const {
  return new KPB_STORE_DATA;
}

void KPB_STORE_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    type_ = 0u;
    level_ = 0u;
    getmoneytimes_ = 0u;
    nextgetmoneytime_ = 0;
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_STORE_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 ID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Type;
        break;
      }
      
      // required uint32 Type = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Level;
        break;
      }
      
      // required uint32 Level = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_GetMoneyTimes;
        break;
      }
      
      // required uint32 GetMoneyTimes = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GetMoneyTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &getmoneytimes_)));
          set_has_getmoneytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_NextGetMoneyTime;
        break;
      }
      
      // required int32 NextGetMoneyTime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextGetMoneyTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nextgetmoneytime_)));
          set_has_nextgetmoneytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_State;
        break;
      }
      
      // required int32 State = 6 [default = 0];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_State:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_STORE_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 ID = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }
  
  // required uint32 Type = 2 [default = 0];
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }
  
  // required uint32 Level = 3 [default = 0];
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }
  
  // required uint32 GetMoneyTimes = 4 [default = 0];
  if (has_getmoneytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->getmoneytimes(), output);
  }
  
  // required int32 NextGetMoneyTime = 5 [default = 0];
  if (has_nextgetmoneytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nextgetmoneytime(), output);
  }
  
  // required int32 State = 6 [default = 0];
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->state(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_STORE_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 ID = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }
  
  // required uint32 Type = 2 [default = 0];
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }
  
  // required uint32 Level = 3 [default = 0];
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }
  
  // required uint32 GetMoneyTimes = 4 [default = 0];
  if (has_getmoneytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->getmoneytimes(), target);
  }
  
  // required int32 NextGetMoneyTime = 5 [default = 0];
  if (has_nextgetmoneytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nextgetmoneytime(), target);
  }
  
  // required int32 State = 6 [default = 0];
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->state(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_STORE_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 ID = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required uint32 Type = 2 [default = 0];
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }
    
    // required uint32 Level = 3 [default = 0];
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }
    
    // required uint32 GetMoneyTimes = 4 [default = 0];
    if (has_getmoneytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->getmoneytimes());
    }
    
    // required int32 NextGetMoneyTime = 5 [default = 0];
    if (has_nextgetmoneytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nextgetmoneytime());
    }
    
    // required int32 State = 6 [default = 0];
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_STORE_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_STORE_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_STORE_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_STORE_DATA::MergeFrom(const KPB_STORE_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_getmoneytimes()) {
      set_getmoneytimes(from.getmoneytimes());
    }
    if (from.has_nextgetmoneytime()) {
      set_nextgetmoneytime(from.nextgetmoneytime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_STORE_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_STORE_DATA::CopyFrom(const KPB_STORE_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_STORE_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;
  
  return true;
}

void KPB_STORE_DATA::Swap(KPB_STORE_DATA* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(type_, other->type_);
    std::swap(level_, other->level_);
    std::swap(getmoneytimes_, other->getmoneytimes_);
    std::swap(nextgetmoneytime_, other->nextgetmoneytime_);
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_STORE_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_STORE_DATA_descriptor_;
  metadata.reflection = KPB_STORE_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_BUSINESSSTREET_DATA::kBuyLandTimesFieldNumber;
const int KPB_BUSINESSSTREET_DATA::kStoreFieldNumber;
const int KPB_BUSINESSSTREET_DATA::kFreelandIDsFieldNumber;
#endif  // !_MSC_VER

KPB_BUSINESSSTREET_DATA::KPB_BUSINESSSTREET_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_BUSINESSSTREET_DATA::InitAsDefaultInstance() {
}

KPB_BUSINESSSTREET_DATA::KPB_BUSINESSSTREET_DATA(const KPB_BUSINESSSTREET_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_BUSINESSSTREET_DATA::SharedCtor() {
  _cached_size_ = 0;
  buylandtimes_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_BUSINESSSTREET_DATA::~KPB_BUSINESSSTREET_DATA() {
  SharedDtor();
}

void KPB_BUSINESSSTREET_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_BUSINESSSTREET_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_BUSINESSSTREET_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_BUSINESSSTREET_DATA_descriptor_;
}

const KPB_BUSINESSSTREET_DATA& KPB_BUSINESSSTREET_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_BUSINESSSTREET_DATA* KPB_BUSINESSSTREET_DATA::default_instance_ = NULL;

KPB_BUSINESSSTREET_DATA* KPB_BUSINESSSTREET_DATA::New() const {
  return new KPB_BUSINESSSTREET_DATA;
}

void KPB_BUSINESSSTREET_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buylandtimes_ = 0u;
  }
  store_.Clear();
  freelandids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_BUSINESSSTREET_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 BuyLandTimes = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buylandtimes_)));
          set_has_buylandtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Store;
        break;
      }
      
      // repeated .T3DB.KPB_STORE_DATA Store = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Store:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_store()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_Store;
        if (input->ExpectTag(42)) goto parse_FreelandIDs;
        break;
      }
      
      // repeated uint32 FreelandIDs = 5 [packed = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FreelandIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_freelandids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 42, input, this->mutable_freelandids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_BUSINESSSTREET_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 BuyLandTimes = 3 [default = 0];
  if (has_buylandtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->buylandtimes(), output);
  }
  
  // repeated .T3DB.KPB_STORE_DATA Store = 4;
  for (int i = 0; i < this->store_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->store(i), output);
  }
  
  // repeated uint32 FreelandIDs = 5 [packed = true];
  if (this->freelandids_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(5, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_freelandids_cached_byte_size_);
  }
  for (int i = 0; i < this->freelandids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->freelandids(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_BUSINESSSTREET_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 BuyLandTimes = 3 [default = 0];
  if (has_buylandtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->buylandtimes(), target);
  }
  
  // repeated .T3DB.KPB_STORE_DATA Store = 4;
  for (int i = 0; i < this->store_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->store(i), target);
  }
  
  // repeated uint32 FreelandIDs = 5 [packed = true];
  if (this->freelandids_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      5,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _freelandids_cached_byte_size_, target);
  }
  for (int i = 0; i < this->freelandids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->freelandids(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_BUSINESSSTREET_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 BuyLandTimes = 3 [default = 0];
    if (has_buylandtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buylandtimes());
    }
    
  }
  // repeated .T3DB.KPB_STORE_DATA Store = 4;
  total_size += 1 * this->store_size();
  for (int i = 0; i < this->store_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->store(i));
  }
  
  // repeated uint32 FreelandIDs = 5 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->freelandids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->freelandids(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _freelandids_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_BUSINESSSTREET_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_BUSINESSSTREET_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_BUSINESSSTREET_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_BUSINESSSTREET_DATA::MergeFrom(const KPB_BUSINESSSTREET_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  store_.MergeFrom(from.store_);
  freelandids_.MergeFrom(from.freelandids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buylandtimes()) {
      set_buylandtimes(from.buylandtimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_BUSINESSSTREET_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_BUSINESSSTREET_DATA::CopyFrom(const KPB_BUSINESSSTREET_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_BUSINESSSTREET_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < store_size(); i++) {
    if (!this->store(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_BUSINESSSTREET_DATA::Swap(KPB_BUSINESSSTREET_DATA* other) {
  if (other != this) {
    std::swap(buylandtimes_, other->buylandtimes_);
    store_.Swap(&other->store_);
    freelandids_.Swap(&other->freelandids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_BUSINESSSTREET_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_BUSINESSSTREET_DATA_descriptor_;
  metadata.reflection = KPB_BUSINESSSTREET_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_REPORT_ITEM::kReportTimeFieldNumber;
const int KPB_REPORT_ITEM::kReportIndexFieldNumber;
const int KPB_REPORT_ITEM::kReportEventFieldNumber;
const int KPB_REPORT_ITEM::kIsNewReportFieldNumber;
const int KPB_REPORT_ITEM::kReportParamFieldNumber;
#endif  // !_MSC_VER

KPB_REPORT_ITEM::KPB_REPORT_ITEM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_REPORT_ITEM::InitAsDefaultInstance() {
}

KPB_REPORT_ITEM::KPB_REPORT_ITEM(const KPB_REPORT_ITEM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_REPORT_ITEM::SharedCtor() {
  _cached_size_ = 0;
  reporttime_ = 0;
  reportindex_ = 0u;
  reportevent_ = 0u;
  isnewreport_ = 0u;
  reportparam_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_REPORT_ITEM::~KPB_REPORT_ITEM() {
  SharedDtor();
}

void KPB_REPORT_ITEM::SharedDtor() {
  if (reportparam_ != &::google::protobuf::internal::kEmptyString) {
    delete reportparam_;
  }
  if (this != default_instance_) {
  }
}

void KPB_REPORT_ITEM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_REPORT_ITEM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_REPORT_ITEM_descriptor_;
}

const KPB_REPORT_ITEM& KPB_REPORT_ITEM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_REPORT_ITEM* KPB_REPORT_ITEM::default_instance_ = NULL;

KPB_REPORT_ITEM* KPB_REPORT_ITEM::New() const {
  return new KPB_REPORT_ITEM;
}

void KPB_REPORT_ITEM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reporttime_ = 0;
    reportindex_ = 0u;
    reportevent_ = 0u;
    isnewreport_ = 0u;
    if (has_reportparam()) {
      if (reportparam_ != &::google::protobuf::internal::kEmptyString) {
        reportparam_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_REPORT_ITEM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ReportTime = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reporttime_)));
          set_has_reporttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ReportIndex;
        break;
      }
      
      // required uint32 ReportIndex = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReportIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportindex_)));
          set_has_reportindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ReportEvent;
        break;
      }
      
      // required uint32 ReportEvent = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ReportEvent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reportevent_)));
          set_has_reportevent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsNewReport;
        break;
      }
      
      // required uint32 IsNewReport = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsNewReport:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isnewreport_)));
          set_has_isnewreport();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ReportParam;
        break;
      }
      
      // required bytes ReportParam = 5 [default = ""];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReportParam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_reportparam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_REPORT_ITEM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ReportTime = 1 [default = 0];
  if (has_reporttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reporttime(), output);
  }
  
  // required uint32 ReportIndex = 2 [default = 0];
  if (has_reportindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->reportindex(), output);
  }
  
  // required uint32 ReportEvent = 3 [default = 0];
  if (has_reportevent()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->reportevent(), output);
  }
  
  // required uint32 IsNewReport = 4 [default = 0];
  if (has_isnewreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->isnewreport(), output);
  }
  
  // required bytes ReportParam = 5 [default = ""];
  if (has_reportparam()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->reportparam(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_REPORT_ITEM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ReportTime = 1 [default = 0];
  if (has_reporttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reporttime(), target);
  }
  
  // required uint32 ReportIndex = 2 [default = 0];
  if (has_reportindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->reportindex(), target);
  }
  
  // required uint32 ReportEvent = 3 [default = 0];
  if (has_reportevent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->reportevent(), target);
  }
  
  // required uint32 IsNewReport = 4 [default = 0];
  if (has_isnewreport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->isnewreport(), target);
  }
  
  // required bytes ReportParam = 5 [default = ""];
  if (has_reportparam()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->reportparam(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_REPORT_ITEM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ReportTime = 1 [default = 0];
    if (has_reporttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reporttime());
    }
    
    // required uint32 ReportIndex = 2 [default = 0];
    if (has_reportindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reportindex());
    }
    
    // required uint32 ReportEvent = 3 [default = 0];
    if (has_reportevent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reportevent());
    }
    
    // required uint32 IsNewReport = 4 [default = 0];
    if (has_isnewreport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isnewreport());
    }
    
    // required bytes ReportParam = 5 [default = ""];
    if (has_reportparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->reportparam());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_REPORT_ITEM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_REPORT_ITEM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_REPORT_ITEM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_REPORT_ITEM::MergeFrom(const KPB_REPORT_ITEM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reporttime()) {
      set_reporttime(from.reporttime());
    }
    if (from.has_reportindex()) {
      set_reportindex(from.reportindex());
    }
    if (from.has_reportevent()) {
      set_reportevent(from.reportevent());
    }
    if (from.has_isnewreport()) {
      set_isnewreport(from.isnewreport());
    }
    if (from.has_reportparam()) {
      set_reportparam(from.reportparam());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_REPORT_ITEM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_REPORT_ITEM::CopyFrom(const KPB_REPORT_ITEM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_REPORT_ITEM::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void KPB_REPORT_ITEM::Swap(KPB_REPORT_ITEM* other) {
  if (other != this) {
    std::swap(reporttime_, other->reporttime_);
    std::swap(reportindex_, other->reportindex_);
    std::swap(reportevent_, other->reportevent_);
    std::swap(isnewreport_, other->isnewreport_);
    std::swap(reportparam_, other->reportparam_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_REPORT_ITEM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_REPORT_ITEM_descriptor_;
  metadata.reflection = KPB_REPORT_ITEM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_CHEERLEADING_ITEM::kIndexFieldNumber;
const int KPB_CHEERLEADING_ITEM::kIDFieldNumber;
const int KPB_CHEERLEADING_ITEM::kEndTimeFieldNumber;
#endif  // !_MSC_VER

KPB_CHEERLEADING_ITEM::KPB_CHEERLEADING_ITEM()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_CHEERLEADING_ITEM::InitAsDefaultInstance() {
}

KPB_CHEERLEADING_ITEM::KPB_CHEERLEADING_ITEM(const KPB_CHEERLEADING_ITEM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_CHEERLEADING_ITEM::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  id_ = 0u;
  endtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_CHEERLEADING_ITEM::~KPB_CHEERLEADING_ITEM() {
  SharedDtor();
}

void KPB_CHEERLEADING_ITEM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_CHEERLEADING_ITEM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_CHEERLEADING_ITEM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_CHEERLEADING_ITEM_descriptor_;
}

const KPB_CHEERLEADING_ITEM& KPB_CHEERLEADING_ITEM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_CHEERLEADING_ITEM* KPB_CHEERLEADING_ITEM::default_instance_ = NULL;

KPB_CHEERLEADING_ITEM* KPB_CHEERLEADING_ITEM::New() const {
  return new KPB_CHEERLEADING_ITEM;
}

void KPB_CHEERLEADING_ITEM::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    id_ = 0u;
    endtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_CHEERLEADING_ITEM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Index = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ID;
        break;
      }
      
      // required uint32 ID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_EndTime;
        break;
      }
      
      // required int32 EndTime = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_EndTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_CHEERLEADING_ITEM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Index = 1 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // required uint32 ID = 2 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }
  
  // required int32 EndTime = 3 [default = 0];
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endtime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_CHEERLEADING_ITEM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Index = 1 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // required uint32 ID = 2 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }
  
  // required int32 EndTime = 3 [default = 0];
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endtime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_CHEERLEADING_ITEM::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Index = 1 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // required uint32 ID = 2 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }
    
    // required int32 EndTime = 3 [default = 0];
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endtime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_CHEERLEADING_ITEM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_CHEERLEADING_ITEM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_CHEERLEADING_ITEM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_CHEERLEADING_ITEM::MergeFrom(const KPB_CHEERLEADING_ITEM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_CHEERLEADING_ITEM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_CHEERLEADING_ITEM::CopyFrom(const KPB_CHEERLEADING_ITEM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_CHEERLEADING_ITEM::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void KPB_CHEERLEADING_ITEM::Swap(KPB_CHEERLEADING_ITEM* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(id_, other->id_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_CHEERLEADING_ITEM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_CHEERLEADING_ITEM_descriptor_;
  metadata.reflection = KPB_CHEERLEADING_ITEM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_CHEERLEADING_SLOTINFO::kIndexFieldNumber;
const int KPB_CHEERLEADING_SLOTINFO::kOffsetXFieldNumber;
const int KPB_CHEERLEADING_SLOTINFO::kFaceToFieldNumber;
#endif  // !_MSC_VER

KPB_CHEERLEADING_SLOTINFO::KPB_CHEERLEADING_SLOTINFO()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_CHEERLEADING_SLOTINFO::InitAsDefaultInstance() {
}

KPB_CHEERLEADING_SLOTINFO::KPB_CHEERLEADING_SLOTINFO(const KPB_CHEERLEADING_SLOTINFO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_CHEERLEADING_SLOTINFO::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0u;
  offsetx_ = 0;
  faceto_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_CHEERLEADING_SLOTINFO::~KPB_CHEERLEADING_SLOTINFO() {
  SharedDtor();
}

void KPB_CHEERLEADING_SLOTINFO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_CHEERLEADING_SLOTINFO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_CHEERLEADING_SLOTINFO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_CHEERLEADING_SLOTINFO_descriptor_;
}

const KPB_CHEERLEADING_SLOTINFO& KPB_CHEERLEADING_SLOTINFO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_CHEERLEADING_SLOTINFO* KPB_CHEERLEADING_SLOTINFO::default_instance_ = NULL;

KPB_CHEERLEADING_SLOTINFO* KPB_CHEERLEADING_SLOTINFO::New() const {
  return new KPB_CHEERLEADING_SLOTINFO;
}

void KPB_CHEERLEADING_SLOTINFO::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0u;
    offsetx_ = 0;
    faceto_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_CHEERLEADING_SLOTINFO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Index = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OffsetX;
        break;
      }
      
      // required int32 OffsetX = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OffsetX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offsetx_)));
          set_has_offsetx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_FaceTo;
        break;
      }
      
      // required int32 FaceTo = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FaceTo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faceto_)));
          set_has_faceto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_CHEERLEADING_SLOTINFO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Index = 1 [default = 0];
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }
  
  // required int32 OffsetX = 2 [default = 0];
  if (has_offsetx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->offsetx(), output);
  }
  
  // required int32 FaceTo = 3 [default = 0];
  if (has_faceto()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->faceto(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_CHEERLEADING_SLOTINFO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Index = 1 [default = 0];
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }
  
  // required int32 OffsetX = 2 [default = 0];
  if (has_offsetx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->offsetx(), target);
  }
  
  // required int32 FaceTo = 3 [default = 0];
  if (has_faceto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->faceto(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_CHEERLEADING_SLOTINFO::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Index = 1 [default = 0];
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }
    
    // required int32 OffsetX = 2 [default = 0];
    if (has_offsetx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offsetx());
    }
    
    // required int32 FaceTo = 3 [default = 0];
    if (has_faceto()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faceto());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_CHEERLEADING_SLOTINFO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_CHEERLEADING_SLOTINFO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_CHEERLEADING_SLOTINFO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_CHEERLEADING_SLOTINFO::MergeFrom(const KPB_CHEERLEADING_SLOTINFO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_offsetx()) {
      set_offsetx(from.offsetx());
    }
    if (from.has_faceto()) {
      set_faceto(from.faceto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_CHEERLEADING_SLOTINFO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_CHEERLEADING_SLOTINFO::CopyFrom(const KPB_CHEERLEADING_SLOTINFO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_CHEERLEADING_SLOTINFO::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void KPB_CHEERLEADING_SLOTINFO::Swap(KPB_CHEERLEADING_SLOTINFO* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(offsetx_, other->offsetx_);
    std::swap(faceto_, other->faceto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_CHEERLEADING_SLOTINFO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_CHEERLEADING_SLOTINFO_descriptor_;
  metadata.reflection = KPB_CHEERLEADING_SLOTINFO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_CHEERLEADING_DATA::kBuySlotTimesFieldNumber;
const int KPB_CHEERLEADING_DATA::kValidSlotCountFieldNumber;
const int KPB_CHEERLEADING_DATA::kSlotInfoFieldNumber;
const int KPB_CHEERLEADING_DATA::kCheerleadingItemsFieldNumber;
#endif  // !_MSC_VER

KPB_CHEERLEADING_DATA::KPB_CHEERLEADING_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_CHEERLEADING_DATA::InitAsDefaultInstance() {
}

KPB_CHEERLEADING_DATA::KPB_CHEERLEADING_DATA(const KPB_CHEERLEADING_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_CHEERLEADING_DATA::SharedCtor() {
  _cached_size_ = 0;
  buyslottimes_ = 0u;
  validslotcount_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_CHEERLEADING_DATA::~KPB_CHEERLEADING_DATA() {
  SharedDtor();
}

void KPB_CHEERLEADING_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_CHEERLEADING_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_CHEERLEADING_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_CHEERLEADING_DATA_descriptor_;
}

const KPB_CHEERLEADING_DATA& KPB_CHEERLEADING_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_CHEERLEADING_DATA* KPB_CHEERLEADING_DATA::default_instance_ = NULL;

KPB_CHEERLEADING_DATA* KPB_CHEERLEADING_DATA::New() const {
  return new KPB_CHEERLEADING_DATA;
}

void KPB_CHEERLEADING_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buyslottimes_ = 0u;
    validslotcount_ = 0u;
  }
  slotinfo_.Clear();
  cheerleadingitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_CHEERLEADING_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 BuySlotTimes = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &buyslottimes_)));
          set_has_buyslottimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ValidSlotCount;
        break;
      }
      
      // required uint32 ValidSlotCount = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ValidSlotCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &validslotcount_)));
          set_has_validslotcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slotInfo;
        break;
      }
      
      // repeated .T3DB.KPB_CHEERLEADING_SLOTINFO slotInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_slotInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_slotinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_slotInfo;
        if (input->ExpectTag(34)) goto parse_CheerleadingItems;
        break;
      }
      
      // repeated .T3DB.KPB_CHEERLEADING_ITEM CheerleadingItems = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CheerleadingItems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cheerleadingitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_CheerleadingItems;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_CHEERLEADING_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 BuySlotTimes = 1 [default = 0];
  if (has_buyslottimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->buyslottimes(), output);
  }
  
  // required uint32 ValidSlotCount = 2 [default = 0];
  if (has_validslotcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->validslotcount(), output);
  }
  
  // repeated .T3DB.KPB_CHEERLEADING_SLOTINFO slotInfo = 3;
  for (int i = 0; i < this->slotinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->slotinfo(i), output);
  }
  
  // repeated .T3DB.KPB_CHEERLEADING_ITEM CheerleadingItems = 4;
  for (int i = 0; i < this->cheerleadingitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->cheerleadingitems(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_CHEERLEADING_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 BuySlotTimes = 1 [default = 0];
  if (has_buyslottimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->buyslottimes(), target);
  }
  
  // required uint32 ValidSlotCount = 2 [default = 0];
  if (has_validslotcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->validslotcount(), target);
  }
  
  // repeated .T3DB.KPB_CHEERLEADING_SLOTINFO slotInfo = 3;
  for (int i = 0; i < this->slotinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->slotinfo(i), target);
  }
  
  // repeated .T3DB.KPB_CHEERLEADING_ITEM CheerleadingItems = 4;
  for (int i = 0; i < this->cheerleadingitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->cheerleadingitems(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_CHEERLEADING_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 BuySlotTimes = 1 [default = 0];
    if (has_buyslottimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->buyslottimes());
    }
    
    // required uint32 ValidSlotCount = 2 [default = 0];
    if (has_validslotcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->validslotcount());
    }
    
  }
  // repeated .T3DB.KPB_CHEERLEADING_SLOTINFO slotInfo = 3;
  total_size += 1 * this->slotinfo_size();
  for (int i = 0; i < this->slotinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->slotinfo(i));
  }
  
  // repeated .T3DB.KPB_CHEERLEADING_ITEM CheerleadingItems = 4;
  total_size += 1 * this->cheerleadingitems_size();
  for (int i = 0; i < this->cheerleadingitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cheerleadingitems(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_CHEERLEADING_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_CHEERLEADING_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_CHEERLEADING_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_CHEERLEADING_DATA::MergeFrom(const KPB_CHEERLEADING_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  slotinfo_.MergeFrom(from.slotinfo_);
  cheerleadingitems_.MergeFrom(from.cheerleadingitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buyslottimes()) {
      set_buyslottimes(from.buyslottimes());
    }
    if (from.has_validslotcount()) {
      set_validslotcount(from.validslotcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_CHEERLEADING_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_CHEERLEADING_DATA::CopyFrom(const KPB_CHEERLEADING_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_CHEERLEADING_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < slotinfo_size(); i++) {
    if (!this->slotinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < cheerleadingitems_size(); i++) {
    if (!this->cheerleadingitems(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_CHEERLEADING_DATA::Swap(KPB_CHEERLEADING_DATA* other) {
  if (other != this) {
    std::swap(buyslottimes_, other->buyslottimes_);
    std::swap(validslotcount_, other->validslotcount_);
    slotinfo_.Swap(&other->slotinfo_);
    cheerleadingitems_.Swap(&other->cheerleadingitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_CHEERLEADING_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_CHEERLEADING_DATA_descriptor_;
  metadata.reflection = KPB_CHEERLEADING_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBCommonItemData::kTabTypeFieldNumber;
const int KPBCommonItemData::kTabIndexFieldNumber;
const int KPBCommonItemData::kBindFieldNumber;
const int KPBCommonItemData::kDurabilityFieldNumber;
const int KPBCommonItemData::kGenTimeFieldNumber;
#endif  // !_MSC_VER

KPBCommonItemData::KPBCommonItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBCommonItemData::InitAsDefaultInstance() {
}

KPBCommonItemData::KPBCommonItemData(const KPBCommonItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBCommonItemData::SharedCtor() {
  _cached_size_ = 0;
  tabtype_ = 0u;
  tabindex_ = 0u;
  bind_ = 0u;
  durability_ = 0u;
  gentime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBCommonItemData::~KPBCommonItemData() {
  SharedDtor();
}

void KPBCommonItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPBCommonItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBCommonItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBCommonItemData_descriptor_;
}

const KPBCommonItemData& KPBCommonItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBCommonItemData* KPBCommonItemData::default_instance_ = NULL;

KPBCommonItemData* KPBCommonItemData::New() const {
  return new KPBCommonItemData;
}

void KPBCommonItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tabtype_ = 0u;
    tabindex_ = 0u;
    bind_ = 0u;
    durability_ = 0u;
    gentime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBCommonItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TabType = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tabtype_)));
          set_has_tabtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TabIndex;
        break;
      }
      
      // required uint32 TabIndex = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TabIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tabindex_)));
          set_has_tabindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Bind;
        break;
      }
      
      // required uint32 Bind = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Durability;
        break;
      }
      
      // required uint32 Durability = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Durability:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &durability_)));
          set_has_durability();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_GenTime;
        break;
      }
      
      // required int32 GenTime = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_GenTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gentime_)));
          set_has_gentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBCommonItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TabType = 1 [default = 0];
  if (has_tabtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->tabtype(), output);
  }
  
  // required uint32 TabIndex = 2 [default = 0];
  if (has_tabindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tabindex(), output);
  }
  
  // required uint32 Bind = 3 [default = 0];
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->bind(), output);
  }
  
  // required uint32 Durability = 4 [default = 0];
  if (has_durability()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->durability(), output);
  }
  
  // required int32 GenTime = 5 [default = 0];
  if (has_gentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gentime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBCommonItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 TabType = 1 [default = 0];
  if (has_tabtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->tabtype(), target);
  }
  
  // required uint32 TabIndex = 2 [default = 0];
  if (has_tabindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tabindex(), target);
  }
  
  // required uint32 Bind = 3 [default = 0];
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->bind(), target);
  }
  
  // required uint32 Durability = 4 [default = 0];
  if (has_durability()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->durability(), target);
  }
  
  // required int32 GenTime = 5 [default = 0];
  if (has_gentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gentime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBCommonItemData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TabType = 1 [default = 0];
    if (has_tabtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tabtype());
    }
    
    // required uint32 TabIndex = 2 [default = 0];
    if (has_tabindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tabindex());
    }
    
    // required uint32 Bind = 3 [default = 0];
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->bind());
    }
    
    // required uint32 Durability = 4 [default = 0];
    if (has_durability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->durability());
    }
    
    // required int32 GenTime = 5 [default = 0];
    if (has_gentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gentime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBCommonItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBCommonItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBCommonItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBCommonItemData::MergeFrom(const KPBCommonItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tabtype()) {
      set_tabtype(from.tabtype());
    }
    if (from.has_tabindex()) {
      set_tabindex(from.tabindex());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
    if (from.has_durability()) {
      set_durability(from.durability());
    }
    if (from.has_gentime()) {
      set_gentime(from.gentime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBCommonItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBCommonItemData::CopyFrom(const KPBCommonItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBCommonItemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  return true;
}

void KPBCommonItemData::Swap(KPBCommonItemData* other) {
  if (other != this) {
    std::swap(tabtype_, other->tabtype_);
    std::swap(tabindex_, other->tabindex_);
    std::swap(bind_, other->bind_);
    std::swap(durability_, other->durability_);
    std::swap(gentime_, other->gentime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBCommonItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBCommonItemData_descriptor_;
  metadata.reflection = KPBCommonItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_EQUI_DATA::kCommonItemDataFieldNumber;
const int KPB_EQUI_DATA::kRandSeedFieldNumber;
const int KPB_EQUI_DATA::kValuePointFieldNumber;
const int KPB_EQUI_DATA::kStrengthenLevelFieldNumber;
const int KPB_EQUI_DATA::kPosFieldNumber;
#endif  // !_MSC_VER

KPB_EQUI_DATA::KPB_EQUI_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_EQUI_DATA::InitAsDefaultInstance() {
  commonitemdata_ = const_cast< ::T3DB::KPBCommonItemData*>(&::T3DB::KPBCommonItemData::default_instance());
}

KPB_EQUI_DATA::KPB_EQUI_DATA(const KPB_EQUI_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_EQUI_DATA::SharedCtor() {
  _cached_size_ = 0;
  commonitemdata_ = NULL;
  randseed_ = 0u;
  valuepoint_ = 0;
  strengthenlevel_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_EQUI_DATA::~KPB_EQUI_DATA() {
  SharedDtor();
}

void KPB_EQUI_DATA::SharedDtor() {
  if (this != default_instance_) {
    delete commonitemdata_;
  }
}

void KPB_EQUI_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_EQUI_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_EQUI_DATA_descriptor_;
}

const KPB_EQUI_DATA& KPB_EQUI_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_EQUI_DATA* KPB_EQUI_DATA::default_instance_ = NULL;

KPB_EQUI_DATA* KPB_EQUI_DATA::New() const {
  return new KPB_EQUI_DATA;
}

void KPB_EQUI_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_commonitemdata()) {
      if (commonitemdata_ != NULL) commonitemdata_->::T3DB::KPBCommonItemData::Clear();
    }
    randseed_ = 0u;
    valuepoint_ = 0;
    strengthenlevel_ = 0;
    pos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_EQUI_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPBCommonItemData CommonItemData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_commonitemdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_RandSeed;
        break;
      }
      
      // required uint32 RandSeed = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_RandSeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &randseed_)));
          set_has_randseed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ValuePoint;
        break;
      }
      
      // required int32 ValuePoint = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ValuePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valuepoint_)));
          set_has_valuepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_StrengthenLevel;
        break;
      }
      
      // required int32 StrengthenLevel = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_StrengthenLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strengthenlevel_)));
          set_has_strengthenlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_Pos;
        break;
      }
      
      // required int32 Pos = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_EQUI_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPBCommonItemData CommonItemData = 1;
  if (has_commonitemdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->commonitemdata(), output);
  }
  
  // required uint32 RandSeed = 2 [default = 0];
  if (has_randseed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->randseed(), output);
  }
  
  // required int32 ValuePoint = 3 [default = 0];
  if (has_valuepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->valuepoint(), output);
  }
  
  // required int32 StrengthenLevel = 4 [default = 0];
  if (has_strengthenlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->strengthenlevel(), output);
  }
  
  // required int32 Pos = 5 [default = 0];
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pos(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_EQUI_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPBCommonItemData CommonItemData = 1;
  if (has_commonitemdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->commonitemdata(), target);
  }
  
  // required uint32 RandSeed = 2 [default = 0];
  if (has_randseed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->randseed(), target);
  }
  
  // required int32 ValuePoint = 3 [default = 0];
  if (has_valuepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->valuepoint(), target);
  }
  
  // required int32 StrengthenLevel = 4 [default = 0];
  if (has_strengthenlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->strengthenlevel(), target);
  }
  
  // required int32 Pos = 5 [default = 0];
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pos(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_EQUI_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPBCommonItemData CommonItemData = 1;
    if (has_commonitemdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->commonitemdata());
    }
    
    // required uint32 RandSeed = 2 [default = 0];
    if (has_randseed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->randseed());
    }
    
    // required int32 ValuePoint = 3 [default = 0];
    if (has_valuepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valuepoint());
    }
    
    // required int32 StrengthenLevel = 4 [default = 0];
    if (has_strengthenlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strengthenlevel());
    }
    
    // required int32 Pos = 5 [default = 0];
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_EQUI_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_EQUI_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_EQUI_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_EQUI_DATA::MergeFrom(const KPB_EQUI_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_commonitemdata()) {
      mutable_commonitemdata()->::T3DB::KPBCommonItemData::MergeFrom(from.commonitemdata());
    }
    if (from.has_randseed()) {
      set_randseed(from.randseed());
    }
    if (from.has_valuepoint()) {
      set_valuepoint(from.valuepoint());
    }
    if (from.has_strengthenlevel()) {
      set_strengthenlevel(from.strengthenlevel());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_EQUI_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_EQUI_DATA::CopyFrom(const KPB_EQUI_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_EQUI_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_commonitemdata()) {
    if (!this->commonitemdata().IsInitialized()) return false;
  }
  return true;
}

void KPB_EQUI_DATA::Swap(KPB_EQUI_DATA* other) {
  if (other != this) {
    std::swap(commonitemdata_, other->commonitemdata_);
    std::swap(randseed_, other->randseed_);
    std::swap(valuepoint_, other->valuepoint_);
    std::swap(strengthenlevel_, other->strengthenlevel_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_EQUI_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_EQUI_DATA_descriptor_;
  metadata.reflection = KPB_EQUI_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBCustomData::kByfferFieldNumber;
#endif  // !_MSC_VER

KPBCustomData::KPBCustomData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBCustomData::InitAsDefaultInstance() {
}

KPBCustomData::KPBCustomData(const KPBCustomData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBCustomData::SharedCtor() {
  _cached_size_ = 0;
  byffer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBCustomData::~KPBCustomData() {
  SharedDtor();
}

void KPBCustomData::SharedDtor() {
  if (byffer_ != &::google::protobuf::internal::kEmptyString) {
    delete byffer_;
  }
  if (this != default_instance_) {
  }
}

void KPBCustomData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBCustomData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBCustomData_descriptor_;
}

const KPBCustomData& KPBCustomData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBCustomData* KPBCustomData::default_instance_ = NULL;

KPBCustomData* KPBCustomData::New() const {
  return new KPBCustomData;
}

void KPBCustomData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_byffer()) {
      if (byffer_ != &::google::protobuf::internal::kEmptyString) {
        byffer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBCustomData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes Byffer = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byffer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBCustomData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes Byffer = 1 [default = ""];
  if (has_byffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->byffer(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBCustomData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes Byffer = 1 [default = ""];
  if (has_byffer()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->byffer(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBCustomData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes Byffer = 1 [default = ""];
    if (has_byffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->byffer());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBCustomData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBCustomData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBCustomData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBCustomData::MergeFrom(const KPBCustomData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_byffer()) {
      set_byffer(from.byffer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBCustomData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBCustomData::CopyFrom(const KPBCustomData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBCustomData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void KPBCustomData::Swap(KPBCustomData* other) {
  if (other != this) {
    std::swap(byffer_, other->byffer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBCustomData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBCustomData_descriptor_;
  metadata.reflection = KPBCustomData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBHeroDataList::kHeroDataListDBFieldNumber;
const int KPBHeroDataList::kHeroDataFieldNumber;
const int KPBHeroDataList::kBuffDataListDBFieldNumber;
#endif  // !_MSC_VER

KPBHeroDataList::KPBHeroDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBHeroDataList::InitAsDefaultInstance() {
  herodatalistdb_ = const_cast< ::T3DB::KPB_HERO_DATA_LIST*>(&::T3DB::KPB_HERO_DATA_LIST::default_instance());
  buffdatalistdb_ = const_cast< ::T3DB::KPB_BUFF_DATA_LIST*>(&::T3DB::KPB_BUFF_DATA_LIST::default_instance());
}

KPBHeroDataList::KPBHeroDataList(const KPBHeroDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBHeroDataList::SharedCtor() {
  _cached_size_ = 0;
  herodatalistdb_ = NULL;
  buffdatalistdb_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBHeroDataList::~KPBHeroDataList() {
  SharedDtor();
}

void KPBHeroDataList::SharedDtor() {
  if (this != default_instance_) {
    delete herodatalistdb_;
    delete buffdatalistdb_;
  }
}

void KPBHeroDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBHeroDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBHeroDataList_descriptor_;
}

const KPBHeroDataList& KPBHeroDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBHeroDataList* KPBHeroDataList::default_instance_ = NULL;

KPBHeroDataList* KPBHeroDataList::New() const {
  return new KPBHeroDataList;
}

void KPBHeroDataList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_herodatalistdb()) {
      if (herodatalistdb_ != NULL) herodatalistdb_->::T3DB::KPB_HERO_DATA_LIST::Clear();
    }
    if (has_buffdatalistdb()) {
      if (buffdatalistdb_ != NULL) buffdatalistdb_->::T3DB::KPB_BUFF_DATA_LIST::Clear();
    }
  }
  herodata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBHeroDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPB_HERO_DATA_LIST HeroDataListDB = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_herodatalistdb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HeroData;
        break;
      }
      
      // repeated .T3DB.KPB_HERO_DATA HeroData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeroData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herodata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HeroData;
        if (input->ExpectTag(26)) goto parse_BuffDataListDB;
        break;
      }
      
      // required .T3DB.KPB_BUFF_DATA_LIST BuffDataListDB = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuffDataListDB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffdatalistdb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBHeroDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPB_HERO_DATA_LIST HeroDataListDB = 1;
  if (has_herodatalistdb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->herodatalistdb(), output);
  }
  
  // repeated .T3DB.KPB_HERO_DATA HeroData = 2;
  for (int i = 0; i < this->herodata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->herodata(i), output);
  }
  
  // required .T3DB.KPB_BUFF_DATA_LIST BuffDataListDB = 3;
  if (has_buffdatalistdb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->buffdatalistdb(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBHeroDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPB_HERO_DATA_LIST HeroDataListDB = 1;
  if (has_herodatalistdb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->herodatalistdb(), target);
  }
  
  // repeated .T3DB.KPB_HERO_DATA HeroData = 2;
  for (int i = 0; i < this->herodata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->herodata(i), target);
  }
  
  // required .T3DB.KPB_BUFF_DATA_LIST BuffDataListDB = 3;
  if (has_buffdatalistdb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->buffdatalistdb(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBHeroDataList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPB_HERO_DATA_LIST HeroDataListDB = 1;
    if (has_herodatalistdb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herodatalistdb());
    }
    
    // required .T3DB.KPB_BUFF_DATA_LIST BuffDataListDB = 3;
    if (has_buffdatalistdb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffdatalistdb());
    }
    
  }
  // repeated .T3DB.KPB_HERO_DATA HeroData = 2;
  total_size += 1 * this->herodata_size();
  for (int i = 0; i < this->herodata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herodata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBHeroDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBHeroDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBHeroDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBHeroDataList::MergeFrom(const KPBHeroDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  herodata_.MergeFrom(from.herodata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_herodatalistdb()) {
      mutable_herodatalistdb()->::T3DB::KPB_HERO_DATA_LIST::MergeFrom(from.herodatalistdb());
    }
    if (from.has_buffdatalistdb()) {
      mutable_buffdatalistdb()->::T3DB::KPB_BUFF_DATA_LIST::MergeFrom(from.buffdatalistdb());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBHeroDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBHeroDataList::CopyFrom(const KPBHeroDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBHeroDataList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  if (has_herodatalistdb()) {
    if (!this->herodatalistdb().IsInitialized()) return false;
  }
  for (int i = 0; i < herodata_size(); i++) {
    if (!this->herodata(i).IsInitialized()) return false;
  }
  if (has_buffdatalistdb()) {
    if (!this->buffdatalistdb().IsInitialized()) return false;
  }
  return true;
}

void KPBHeroDataList::Swap(KPBHeroDataList* other) {
  if (other != this) {
    std::swap(herodatalistdb_, other->herodatalistdb_);
    herodata_.Swap(&other->herodata_);
    std::swap(buffdatalistdb_, other->buffdatalistdb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBHeroDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBHeroDataList_descriptor_;
  metadata.reflection = KPBHeroDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBPackage::kEquiDataFieldNumber;
const int KPBPackage::kSizeFieldNumber;
#endif  // !_MSC_VER

KPBPackage::KPBPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBPackage::InitAsDefaultInstance() {
}

KPBPackage::KPBPackage(const KPBPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBPackage::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBPackage::~KPBPackage() {
  SharedDtor();
}

void KPBPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPBPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBPackage_descriptor_;
}

const KPBPackage& KPBPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBPackage* KPBPackage::default_instance_ = NULL;

KPBPackage* KPBPackage::New() const {
  return new KPBPackage;
}

void KPBPackage::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    size_ = 0u;
  }
  equidata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .T3DB.KPB_EQUI_DATA EquiData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_EquiData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equidata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_EquiData;
        if (input->ExpectTag(16)) goto parse_Size;
        break;
      }
      
      // required uint32 Size = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .T3DB.KPB_EQUI_DATA EquiData = 1;
  for (int i = 0; i < this->equidata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equidata(i), output);
  }
  
  // required uint32 Size = 2 [default = 0];
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->size(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .T3DB.KPB_EQUI_DATA EquiData = 1;
  for (int i = 0; i < this->equidata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equidata(i), target);
  }
  
  // required uint32 Size = 2 [default = 0];
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->size(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBPackage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 Size = 2 [default = 0];
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->size());
    }
    
  }
  // repeated .T3DB.KPB_EQUI_DATA EquiData = 1;
  total_size += 1 * this->equidata_size();
  for (int i = 0; i < this->equidata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equidata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBPackage::MergeFrom(const KPBPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  equidata_.MergeFrom(from.equidata_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBPackage::CopyFrom(const KPBPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;
  
  for (int i = 0; i < equidata_size(); i++) {
    if (!this->equidata(i).IsInitialized()) return false;
  }
  return true;
}

void KPBPackage::Swap(KPBPackage* other) {
  if (other != this) {
    equidata_.Swap(&other->equidata_);
    std::swap(size_, other->size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBPackage_descriptor_;
  metadata.reflection = KPBPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBPlayerPackage::kPackageFieldNumber;
#endif  // !_MSC_VER

KPBPlayerPackage::KPBPlayerPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBPlayerPackage::InitAsDefaultInstance() {
}

KPBPlayerPackage::KPBPlayerPackage(const KPBPlayerPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBPlayerPackage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBPlayerPackage::~KPBPlayerPackage() {
  SharedDtor();
}

void KPBPlayerPackage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPBPlayerPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBPlayerPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBPlayerPackage_descriptor_;
}

const KPBPlayerPackage& KPBPlayerPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBPlayerPackage* KPBPlayerPackage::default_instance_ = NULL;

KPBPlayerPackage* KPBPlayerPackage::New() const {
  return new KPBPlayerPackage;
}

void KPBPlayerPackage::Clear() {
  package_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBPlayerPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .T3DB.KPBPackage Package = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_package()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_Package;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBPlayerPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .T3DB.KPBPackage Package = 1;
  for (int i = 0; i < this->package_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->package(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBPlayerPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .T3DB.KPBPackage Package = 1;
  for (int i = 0; i < this->package_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->package(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBPlayerPackage::ByteSize() const {
  int total_size = 0;
  
  // repeated .T3DB.KPBPackage Package = 1;
  total_size += 1 * this->package_size();
  for (int i = 0; i < this->package_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->package(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBPlayerPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBPlayerPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBPlayerPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBPlayerPackage::MergeFrom(const KPBPlayerPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  package_.MergeFrom(from.package_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBPlayerPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBPlayerPackage::CopyFrom(const KPBPlayerPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBPlayerPackage::IsInitialized() const {
  
  for (int i = 0; i < package_size(); i++) {
    if (!this->package(i).IsInitialized()) return false;
  }
  return true;
}

void KPBPlayerPackage::Swap(KPBPlayerPackage* other) {
  if (other != this) {
    package_.Swap(&other->package_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBPlayerPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBPlayerPackage_descriptor_;
  metadata.reflection = KPBPlayerPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBHeroPackage::kHeroTemplateIDFieldNumber;
const int KPBHeroPackage::kPackageFieldNumber;
#endif  // !_MSC_VER

KPBHeroPackage::KPBHeroPackage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBHeroPackage::InitAsDefaultInstance() {
  package_ = const_cast< ::T3DB::KPBPackage*>(&::T3DB::KPBPackage::default_instance());
}

KPBHeroPackage::KPBHeroPackage(const KPBHeroPackage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBHeroPackage::SharedCtor() {
  _cached_size_ = 0;
  herotemplateid_ = 0u;
  package_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBHeroPackage::~KPBHeroPackage() {
  SharedDtor();
}

void KPBHeroPackage::SharedDtor() {
  if (this != default_instance_) {
    delete package_;
  }
}

void KPBHeroPackage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBHeroPackage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBHeroPackage_descriptor_;
}

const KPBHeroPackage& KPBHeroPackage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBHeroPackage* KPBHeroPackage::default_instance_ = NULL;

KPBHeroPackage* KPBHeroPackage::New() const {
  return new KPBHeroPackage;
}

void KPBHeroPackage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    herotemplateid_ = 0u;
    if (has_package()) {
      if (package_ != NULL) package_->::T3DB::KPBPackage::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBHeroPackage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 HeroTemplateID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herotemplateid_)));
          set_has_herotemplateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_Package;
        break;
      }
      
      // required .T3DB.KPBPackage Package = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_package()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBHeroPackage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 HeroTemplateID = 1 [default = 0];
  if (has_herotemplateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->herotemplateid(), output);
  }
  
  // required .T3DB.KPBPackage Package = 2;
  if (has_package()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->package(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBHeroPackage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 HeroTemplateID = 1 [default = 0];
  if (has_herotemplateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->herotemplateid(), target);
  }
  
  // required .T3DB.KPBPackage Package = 2;
  if (has_package()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->package(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBHeroPackage::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 HeroTemplateID = 1 [default = 0];
    if (has_herotemplateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herotemplateid());
    }
    
    // required .T3DB.KPBPackage Package = 2;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->package());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBHeroPackage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBHeroPackage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBHeroPackage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBHeroPackage::MergeFrom(const KPBHeroPackage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_herotemplateid()) {
      set_herotemplateid(from.herotemplateid());
    }
    if (from.has_package()) {
      mutable_package()->::T3DB::KPBPackage::MergeFrom(from.package());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBHeroPackage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBHeroPackage::CopyFrom(const KPBHeroPackage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBHeroPackage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  if (has_package()) {
    if (!this->package().IsInitialized()) return false;
  }
  return true;
}

void KPBHeroPackage::Swap(KPBHeroPackage* other) {
  if (other != this) {
    std::swap(herotemplateid_, other->herotemplateid_);
    std::swap(package_, other->package_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBHeroPackage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBHeroPackage_descriptor_;
  metadata.reflection = KPBHeroPackage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBItemList::kPlayerPackageFieldNumber;
const int KPBItemList::kHeroPackageFieldNumber;
#endif  // !_MSC_VER

KPBItemList::KPBItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBItemList::InitAsDefaultInstance() {
  playerpackage_ = const_cast< ::T3DB::KPBPlayerPackage*>(&::T3DB::KPBPlayerPackage::default_instance());
}

KPBItemList::KPBItemList(const KPBItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBItemList::SharedCtor() {
  _cached_size_ = 0;
  playerpackage_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBItemList::~KPBItemList() {
  SharedDtor();
}

void KPBItemList::SharedDtor() {
  if (this != default_instance_) {
    delete playerpackage_;
  }
}

void KPBItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBItemList_descriptor_;
}

const KPBItemList& KPBItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBItemList* KPBItemList::default_instance_ = NULL;

KPBItemList* KPBItemList::New() const {
  return new KPBItemList;
}

void KPBItemList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playerpackage()) {
      if (playerpackage_ != NULL) playerpackage_->::T3DB::KPBPlayerPackage::Clear();
    }
  }
  heropackage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPBPlayerPackage PlayerPackage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playerpackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HeroPackage;
        break;
      }
      
      // repeated .T3DB.KPBHeroPackage HeroPackage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeroPackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_heropackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HeroPackage;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPBPlayerPackage PlayerPackage = 1;
  if (has_playerpackage()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerpackage(), output);
  }
  
  // repeated .T3DB.KPBHeroPackage HeroPackage = 2;
  for (int i = 0; i < this->heropackage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->heropackage(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPBPlayerPackage PlayerPackage = 1;
  if (has_playerpackage()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerpackage(), target);
  }
  
  // repeated .T3DB.KPBHeroPackage HeroPackage = 2;
  for (int i = 0; i < this->heropackage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->heropackage(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBItemList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPBPlayerPackage PlayerPackage = 1;
    if (has_playerpackage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playerpackage());
    }
    
  }
  // repeated .T3DB.KPBHeroPackage HeroPackage = 2;
  total_size += 1 * this->heropackage_size();
  for (int i = 0; i < this->heropackage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->heropackage(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBItemList::MergeFrom(const KPBItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  heropackage_.MergeFrom(from.heropackage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerpackage()) {
      mutable_playerpackage()->::T3DB::KPBPlayerPackage::MergeFrom(from.playerpackage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBItemList::CopyFrom(const KPBItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBItemList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_playerpackage()) {
    if (!this->playerpackage().IsInitialized()) return false;
  }
  for (int i = 0; i < heropackage_size(); i++) {
    if (!this->heropackage(i).IsInitialized()) return false;
  }
  return true;
}

void KPBItemList::Swap(KPBItemList* other) {
  if (other != this) {
    std::swap(playerpackage_, other->playerpackage_);
    heropackage_.Swap(&other->heropackage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBItemList_descriptor_;
  metadata.reflection = KPBItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBMoneyMgr::kRoleMoneyInfoFieldNumber;
#endif  // !_MSC_VER

KPBMoneyMgr::KPBMoneyMgr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBMoneyMgr::InitAsDefaultInstance() {
  rolemoneyinfo_ = const_cast< ::T3DB::KPB_ROLE_MONEY_DATA*>(&::T3DB::KPB_ROLE_MONEY_DATA::default_instance());
}

KPBMoneyMgr::KPBMoneyMgr(const KPBMoneyMgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBMoneyMgr::SharedCtor() {
  _cached_size_ = 0;
  rolemoneyinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBMoneyMgr::~KPBMoneyMgr() {
  SharedDtor();
}

void KPBMoneyMgr::SharedDtor() {
  if (this != default_instance_) {
    delete rolemoneyinfo_;
  }
}

void KPBMoneyMgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBMoneyMgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBMoneyMgr_descriptor_;
}

const KPBMoneyMgr& KPBMoneyMgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBMoneyMgr* KPBMoneyMgr::default_instance_ = NULL;

KPBMoneyMgr* KPBMoneyMgr::New() const {
  return new KPBMoneyMgr;
}

void KPBMoneyMgr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolemoneyinfo()) {
      if (rolemoneyinfo_ != NULL) rolemoneyinfo_->::T3DB::KPB_ROLE_MONEY_DATA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBMoneyMgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPB_ROLE_MONEY_DATA RoleMoneyInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rolemoneyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBMoneyMgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPB_ROLE_MONEY_DATA RoleMoneyInfo = 1;
  if (has_rolemoneyinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->rolemoneyinfo(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBMoneyMgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPB_ROLE_MONEY_DATA RoleMoneyInfo = 1;
  if (has_rolemoneyinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->rolemoneyinfo(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBMoneyMgr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPB_ROLE_MONEY_DATA RoleMoneyInfo = 1;
    if (has_rolemoneyinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rolemoneyinfo());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBMoneyMgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBMoneyMgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBMoneyMgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBMoneyMgr::MergeFrom(const KPBMoneyMgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolemoneyinfo()) {
      mutable_rolemoneyinfo()->::T3DB::KPB_ROLE_MONEY_DATA::MergeFrom(from.rolemoneyinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBMoneyMgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBMoneyMgr::CopyFrom(const KPBMoneyMgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBMoneyMgr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_rolemoneyinfo()) {
    if (!this->rolemoneyinfo().IsInitialized()) return false;
  }
  return true;
}

void KPBMoneyMgr::Swap(KPBMoneyMgr* other) {
  if (other != this) {
    std::swap(rolemoneyinfo_, other->rolemoneyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBMoneyMgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBMoneyMgr_descriptor_;
  metadata.reflection = KPBMoneyMgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBUserPreferences::kUserPrefencesFieldNumber;
#endif  // !_MSC_VER

KPBUserPreferences::KPBUserPreferences()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBUserPreferences::InitAsDefaultInstance() {
}

KPBUserPreferences::KPBUserPreferences(const KPBUserPreferences& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBUserPreferences::SharedCtor() {
  _cached_size_ = 0;
  userprefences_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBUserPreferences::~KPBUserPreferences() {
  SharedDtor();
}

void KPBUserPreferences::SharedDtor() {
  if (userprefences_ != &::google::protobuf::internal::kEmptyString) {
    delete userprefences_;
  }
  if (this != default_instance_) {
  }
}

void KPBUserPreferences::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBUserPreferences::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBUserPreferences_descriptor_;
}

const KPBUserPreferences& KPBUserPreferences::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBUserPreferences* KPBUserPreferences::default_instance_ = NULL;

KPBUserPreferences* KPBUserPreferences::New() const {
  return new KPBUserPreferences;
}

void KPBUserPreferences::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_userprefences()) {
      if (userprefences_ != &::google::protobuf::internal::kEmptyString) {
        userprefences_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBUserPreferences::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes UserPrefences = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_userprefences()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBUserPreferences::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes UserPrefences = 1 [default = ""];
  if (has_userprefences()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->userprefences(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBUserPreferences::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes UserPrefences = 1 [default = ""];
  if (has_userprefences()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->userprefences(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBUserPreferences::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes UserPrefences = 1 [default = ""];
    if (has_userprefences()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->userprefences());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBUserPreferences::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBUserPreferences* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBUserPreferences*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBUserPreferences::MergeFrom(const KPBUserPreferences& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_userprefences()) {
      set_userprefences(from.userprefences());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBUserPreferences::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBUserPreferences::CopyFrom(const KPBUserPreferences& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBUserPreferences::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void KPBUserPreferences::Swap(KPBUserPreferences* other) {
  if (other != this) {
    std::swap(userprefences_, other->userprefences_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBUserPreferences::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBUserPreferences_descriptor_;
  metadata.reflection = KPBUserPreferences_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_COOLDOWN_DATA::kTimerIDFieldNumber;
const int KPB_COOLDOWN_DATA::kTimeFieldNumber;
const int KPB_COOLDOWN_DATA::kIntervalFieldNumber;
#endif  // !_MSC_VER

KPB_COOLDOWN_DATA::KPB_COOLDOWN_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_COOLDOWN_DATA::InitAsDefaultInstance() {
}

KPB_COOLDOWN_DATA::KPB_COOLDOWN_DATA(const KPB_COOLDOWN_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_COOLDOWN_DATA::SharedCtor() {
  _cached_size_ = 0;
  timerid_ = 0u;
  time_ = 0;
  interval_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_COOLDOWN_DATA::~KPB_COOLDOWN_DATA() {
  SharedDtor();
}

void KPB_COOLDOWN_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_COOLDOWN_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_COOLDOWN_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_COOLDOWN_DATA_descriptor_;
}

const KPB_COOLDOWN_DATA& KPB_COOLDOWN_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_COOLDOWN_DATA* KPB_COOLDOWN_DATA::default_instance_ = NULL;

KPB_COOLDOWN_DATA* KPB_COOLDOWN_DATA::New() const {
  return new KPB_COOLDOWN_DATA;
}

void KPB_COOLDOWN_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timerid_ = 0u;
    time_ = 0;
    interval_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_COOLDOWN_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 TimerID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timerid_)));
          set_has_timerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Time;
        break;
      }
      
      // required int32 Time = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Interval;
        break;
      }
      
      // required int32 Interval = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &interval_)));
          set_has_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_COOLDOWN_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 TimerID = 1 [default = 0];
  if (has_timerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->timerid(), output);
  }
  
  // required int32 Time = 2 [default = 0];
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }
  
  // required int32 Interval = 3 [default = 0];
  if (has_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->interval(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_COOLDOWN_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 TimerID = 1 [default = 0];
  if (has_timerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->timerid(), target);
  }
  
  // required int32 Time = 2 [default = 0];
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }
  
  // required int32 Interval = 3 [default = 0];
  if (has_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->interval(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_COOLDOWN_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 TimerID = 1 [default = 0];
    if (has_timerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->timerid());
    }
    
    // required int32 Time = 2 [default = 0];
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }
    
    // required int32 Interval = 3 [default = 0];
    if (has_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->interval());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_COOLDOWN_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_COOLDOWN_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_COOLDOWN_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_COOLDOWN_DATA::MergeFrom(const KPB_COOLDOWN_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timerid()) {
      set_timerid(from.timerid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_interval()) {
      set_interval(from.interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_COOLDOWN_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_COOLDOWN_DATA::CopyFrom(const KPB_COOLDOWN_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_COOLDOWN_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void KPB_COOLDOWN_DATA::Swap(KPB_COOLDOWN_DATA* other) {
  if (other != this) {
    std::swap(timerid_, other->timerid_);
    std::swap(time_, other->time_);
    std::swap(interval_, other->interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_COOLDOWN_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_COOLDOWN_DATA_descriptor_;
  metadata.reflection = KPB_COOLDOWN_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_COOLDOWN_LIST_DATA::kCoolDownDataFieldNumber;
#endif  // !_MSC_VER

KPB_COOLDOWN_LIST_DATA::KPB_COOLDOWN_LIST_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_COOLDOWN_LIST_DATA::InitAsDefaultInstance() {
}

KPB_COOLDOWN_LIST_DATA::KPB_COOLDOWN_LIST_DATA(const KPB_COOLDOWN_LIST_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_COOLDOWN_LIST_DATA::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_COOLDOWN_LIST_DATA::~KPB_COOLDOWN_LIST_DATA() {
  SharedDtor();
}

void KPB_COOLDOWN_LIST_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_COOLDOWN_LIST_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_COOLDOWN_LIST_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_COOLDOWN_LIST_DATA_descriptor_;
}

const KPB_COOLDOWN_LIST_DATA& KPB_COOLDOWN_LIST_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_COOLDOWN_LIST_DATA* KPB_COOLDOWN_LIST_DATA::default_instance_ = NULL;

KPB_COOLDOWN_LIST_DATA* KPB_COOLDOWN_LIST_DATA::New() const {
  return new KPB_COOLDOWN_LIST_DATA;
}

void KPB_COOLDOWN_LIST_DATA::Clear() {
  cooldowndata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_COOLDOWN_LIST_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .T3DB.KPB_COOLDOWN_DATA CoolDownData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CoolDownData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cooldowndata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_CoolDownData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_COOLDOWN_LIST_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .T3DB.KPB_COOLDOWN_DATA CoolDownData = 2;
  for (int i = 0; i < this->cooldowndata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->cooldowndata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_COOLDOWN_LIST_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .T3DB.KPB_COOLDOWN_DATA CoolDownData = 2;
  for (int i = 0; i < this->cooldowndata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->cooldowndata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_COOLDOWN_LIST_DATA::ByteSize() const {
  int total_size = 0;
  
  // repeated .T3DB.KPB_COOLDOWN_DATA CoolDownData = 2;
  total_size += 1 * this->cooldowndata_size();
  for (int i = 0; i < this->cooldowndata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cooldowndata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_COOLDOWN_LIST_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_COOLDOWN_LIST_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_COOLDOWN_LIST_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_COOLDOWN_LIST_DATA::MergeFrom(const KPB_COOLDOWN_LIST_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  cooldowndata_.MergeFrom(from.cooldowndata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_COOLDOWN_LIST_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_COOLDOWN_LIST_DATA::CopyFrom(const KPB_COOLDOWN_LIST_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_COOLDOWN_LIST_DATA::IsInitialized() const {
  
  for (int i = 0; i < cooldowndata_size(); i++) {
    if (!this->cooldowndata(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_COOLDOWN_LIST_DATA::Swap(KPB_COOLDOWN_LIST_DATA* other) {
  if (other != this) {
    cooldowndata_.Swap(&other->cooldowndata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_COOLDOWN_LIST_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_COOLDOWN_LIST_DATA_descriptor_;
  metadata.reflection = KPB_COOLDOWN_LIST_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBCDTimerList::kCoolDownListFieldNumber;
#endif  // !_MSC_VER

KPBCDTimerList::KPBCDTimerList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBCDTimerList::InitAsDefaultInstance() {
  cooldownlist_ = const_cast< ::T3DB::KPB_COOLDOWN_LIST_DATA*>(&::T3DB::KPB_COOLDOWN_LIST_DATA::default_instance());
}

KPBCDTimerList::KPBCDTimerList(const KPBCDTimerList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBCDTimerList::SharedCtor() {
  _cached_size_ = 0;
  cooldownlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBCDTimerList::~KPBCDTimerList() {
  SharedDtor();
}

void KPBCDTimerList::SharedDtor() {
  if (this != default_instance_) {
    delete cooldownlist_;
  }
}

void KPBCDTimerList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBCDTimerList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBCDTimerList_descriptor_;
}

const KPBCDTimerList& KPBCDTimerList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBCDTimerList* KPBCDTimerList::default_instance_ = NULL;

KPBCDTimerList* KPBCDTimerList::New() const {
  return new KPBCDTimerList;
}

void KPBCDTimerList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cooldownlist()) {
      if (cooldownlist_ != NULL) cooldownlist_->::T3DB::KPB_COOLDOWN_LIST_DATA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBCDTimerList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPB_COOLDOWN_LIST_DATA CoolDownList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cooldownlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBCDTimerList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPB_COOLDOWN_LIST_DATA CoolDownList = 1;
  if (has_cooldownlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cooldownlist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBCDTimerList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPB_COOLDOWN_LIST_DATA CoolDownList = 1;
  if (has_cooldownlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cooldownlist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBCDTimerList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPB_COOLDOWN_LIST_DATA CoolDownList = 1;
    if (has_cooldownlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cooldownlist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBCDTimerList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBCDTimerList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBCDTimerList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBCDTimerList::MergeFrom(const KPBCDTimerList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cooldownlist()) {
      mutable_cooldownlist()->::T3DB::KPB_COOLDOWN_LIST_DATA::MergeFrom(from.cooldownlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBCDTimerList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBCDTimerList::CopyFrom(const KPBCDTimerList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBCDTimerList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_cooldownlist()) {
    if (!this->cooldownlist().IsInitialized()) return false;
  }
  return true;
}

void KPBCDTimerList::Swap(KPBCDTimerList* other) {
  if (other != this) {
    std::swap(cooldownlist_, other->cooldownlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBCDTimerList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBCDTimerList_descriptor_;
  metadata.reflection = KPBCDTimerList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBQuestList::kQuestStateListFieldNumber;
const int KPBQuestList::kAcceptedQuestListFieldNumber;
const int KPBQuestList::kDailyQuestFieldNumber;
#endif  // !_MSC_VER

KPBQuestList::KPBQuestList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBQuestList::InitAsDefaultInstance() {
  dailyquest_ = const_cast< ::T3DB::KPB_DAILY_QUEST_DATA*>(&::T3DB::KPB_DAILY_QUEST_DATA::default_instance());
}

KPBQuestList::KPBQuestList(const KPBQuestList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBQuestList::SharedCtor() {
  _cached_size_ = 0;
  queststatelist_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dailyquest_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBQuestList::~KPBQuestList() {
  SharedDtor();
}

void KPBQuestList::SharedDtor() {
  if (queststatelist_ != &::google::protobuf::internal::kEmptyString) {
    delete queststatelist_;
  }
  if (this != default_instance_) {
    delete dailyquest_;
  }
}

void KPBQuestList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBQuestList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBQuestList_descriptor_;
}

const KPBQuestList& KPBQuestList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBQuestList* KPBQuestList::default_instance_ = NULL;

KPBQuestList* KPBQuestList::New() const {
  return new KPBQuestList;
}

void KPBQuestList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_queststatelist()) {
      if (queststatelist_ != &::google::protobuf::internal::kEmptyString) {
        queststatelist_->clear();
      }
    }
    if (has_dailyquest()) {
      if (dailyquest_ != NULL) dailyquest_->::T3DB::KPB_DAILY_QUEST_DATA::Clear();
    }
  }
  acceptedquestlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBQuestList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes QuestStateList = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_queststatelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AcceptedQuestList;
        break;
      }
      
      // repeated .T3DB.KPB_ACCEPT_QUEST AcceptedQuestList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AcceptedQuestList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_acceptedquestlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AcceptedQuestList;
        if (input->ExpectTag(26)) goto parse_DailyQuest;
        break;
      }
      
      // required .T3DB.KPB_DAILY_QUEST_DATA DailyQuest = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DailyQuest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dailyquest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBQuestList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes QuestStateList = 1 [default = ""];
  if (has_queststatelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->queststatelist(), output);
  }
  
  // repeated .T3DB.KPB_ACCEPT_QUEST AcceptedQuestList = 2;
  for (int i = 0; i < this->acceptedquestlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->acceptedquestlist(i), output);
  }
  
  // required .T3DB.KPB_DAILY_QUEST_DATA DailyQuest = 3;
  if (has_dailyquest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->dailyquest(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBQuestList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes QuestStateList = 1 [default = ""];
  if (has_queststatelist()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->queststatelist(), target);
  }
  
  // repeated .T3DB.KPB_ACCEPT_QUEST AcceptedQuestList = 2;
  for (int i = 0; i < this->acceptedquestlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->acceptedquestlist(i), target);
  }
  
  // required .T3DB.KPB_DAILY_QUEST_DATA DailyQuest = 3;
  if (has_dailyquest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->dailyquest(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBQuestList::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes QuestStateList = 1 [default = ""];
    if (has_queststatelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->queststatelist());
    }
    
    // required .T3DB.KPB_DAILY_QUEST_DATA DailyQuest = 3;
    if (has_dailyquest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dailyquest());
    }
    
  }
  // repeated .T3DB.KPB_ACCEPT_QUEST AcceptedQuestList = 2;
  total_size += 1 * this->acceptedquestlist_size();
  for (int i = 0; i < this->acceptedquestlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->acceptedquestlist(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBQuestList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBQuestList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBQuestList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBQuestList::MergeFrom(const KPBQuestList& from) {
  GOOGLE_CHECK_NE(&from, this);
  acceptedquestlist_.MergeFrom(from.acceptedquestlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_queststatelist()) {
      set_queststatelist(from.queststatelist());
    }
    if (from.has_dailyquest()) {
      mutable_dailyquest()->::T3DB::KPB_DAILY_QUEST_DATA::MergeFrom(from.dailyquest());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBQuestList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBQuestList::CopyFrom(const KPBQuestList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBQuestList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  
  for (int i = 0; i < acceptedquestlist_size(); i++) {
    if (!this->acceptedquestlist(i).IsInitialized()) return false;
  }
  if (has_dailyquest()) {
    if (!this->dailyquest().IsInitialized()) return false;
  }
  return true;
}

void KPBQuestList::Swap(KPBQuestList* other) {
  if (other != this) {
    std::swap(queststatelist_, other->queststatelist_);
    acceptedquestlist_.Swap(&other->acceptedquestlist_);
    std::swap(dailyquest_, other->dailyquest_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBQuestList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBQuestList_descriptor_;
  metadata.reflection = KPBQuestList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBHeroTrainingMgr::kTrainingDataHeaderFieldNumber;
const int KPBHeroTrainingMgr::kTrainingDataFieldNumber;
#endif  // !_MSC_VER

KPBHeroTrainingMgr::KPBHeroTrainingMgr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBHeroTrainingMgr::InitAsDefaultInstance() {
  trainingdataheader_ = const_cast< ::T3DB::KPB_HEROTRAINING_DATA_HEADER*>(&::T3DB::KPB_HEROTRAINING_DATA_HEADER::default_instance());
}

KPBHeroTrainingMgr::KPBHeroTrainingMgr(const KPBHeroTrainingMgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBHeroTrainingMgr::SharedCtor() {
  _cached_size_ = 0;
  trainingdataheader_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBHeroTrainingMgr::~KPBHeroTrainingMgr() {
  SharedDtor();
}

void KPBHeroTrainingMgr::SharedDtor() {
  if (this != default_instance_) {
    delete trainingdataheader_;
  }
}

void KPBHeroTrainingMgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBHeroTrainingMgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBHeroTrainingMgr_descriptor_;
}

const KPBHeroTrainingMgr& KPBHeroTrainingMgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBHeroTrainingMgr* KPBHeroTrainingMgr::default_instance_ = NULL;

KPBHeroTrainingMgr* KPBHeroTrainingMgr::New() const {
  return new KPBHeroTrainingMgr;
}

void KPBHeroTrainingMgr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_trainingdataheader()) {
      if (trainingdataheader_ != NULL) trainingdataheader_->::T3DB::KPB_HEROTRAINING_DATA_HEADER::Clear();
    }
  }
  trainingdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBHeroTrainingMgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPB_HEROTRAINING_DATA_HEADER TrainingDataHeader = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_trainingdataheader()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TrainingData;
        break;
      }
      
      // repeated .T3DB.KPB_HEROTRAINING_DATA TrainingData = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TrainingData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trainingdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_TrainingData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBHeroTrainingMgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPB_HEROTRAINING_DATA_HEADER TrainingDataHeader = 1;
  if (has_trainingdataheader()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->trainingdataheader(), output);
  }
  
  // repeated .T3DB.KPB_HEROTRAINING_DATA TrainingData = 2;
  for (int i = 0; i < this->trainingdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->trainingdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBHeroTrainingMgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPB_HEROTRAINING_DATA_HEADER TrainingDataHeader = 1;
  if (has_trainingdataheader()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->trainingdataheader(), target);
  }
  
  // repeated .T3DB.KPB_HEROTRAINING_DATA TrainingData = 2;
  for (int i = 0; i < this->trainingdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->trainingdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBHeroTrainingMgr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPB_HEROTRAINING_DATA_HEADER TrainingDataHeader = 1;
    if (has_trainingdataheader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trainingdataheader());
    }
    
  }
  // repeated .T3DB.KPB_HEROTRAINING_DATA TrainingData = 2;
  total_size += 1 * this->trainingdata_size();
  for (int i = 0; i < this->trainingdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trainingdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBHeroTrainingMgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBHeroTrainingMgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBHeroTrainingMgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBHeroTrainingMgr::MergeFrom(const KPBHeroTrainingMgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  trainingdata_.MergeFrom(from.trainingdata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trainingdataheader()) {
      mutable_trainingdataheader()->::T3DB::KPB_HEROTRAINING_DATA_HEADER::MergeFrom(from.trainingdataheader());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBHeroTrainingMgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBHeroTrainingMgr::CopyFrom(const KPBHeroTrainingMgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBHeroTrainingMgr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_trainingdataheader()) {
    if (!this->trainingdataheader().IsInitialized()) return false;
  }
  for (int i = 0; i < trainingdata_size(); i++) {
    if (!this->trainingdata(i).IsInitialized()) return false;
  }
  return true;
}

void KPBHeroTrainingMgr::Swap(KPBHeroTrainingMgr* other) {
  if (other != this) {
    std::swap(trainingdataheader_, other->trainingdataheader_);
    trainingdata_.Swap(&other->trainingdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBHeroTrainingMgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBHeroTrainingMgr_descriptor_;
  metadata.reflection = KPBHeroTrainingMgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBMissionData::kMissionDataFieldNumber;
#endif  // !_MSC_VER

KPBMissionData::KPBMissionData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBMissionData::InitAsDefaultInstance() {
  missiondata_ = const_cast< ::T3DB::KPB_MISSION_DATA*>(&::T3DB::KPB_MISSION_DATA::default_instance());
}

KPBMissionData::KPBMissionData(const KPBMissionData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBMissionData::SharedCtor() {
  _cached_size_ = 0;
  missiondata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBMissionData::~KPBMissionData() {
  SharedDtor();
}

void KPBMissionData::SharedDtor() {
  if (this != default_instance_) {
    delete missiondata_;
  }
}

void KPBMissionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBMissionData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBMissionData_descriptor_;
}

const KPBMissionData& KPBMissionData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBMissionData* KPBMissionData::default_instance_ = NULL;

KPBMissionData* KPBMissionData::New() const {
  return new KPBMissionData;
}

void KPBMissionData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_missiondata()) {
      if (missiondata_ != NULL) missiondata_->::T3DB::KPB_MISSION_DATA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBMissionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPB_MISSION_DATA MissionData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missiondata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBMissionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPB_MISSION_DATA MissionData = 1;
  if (has_missiondata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->missiondata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBMissionData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPB_MISSION_DATA MissionData = 1;
  if (has_missiondata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->missiondata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBMissionData::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPB_MISSION_DATA MissionData = 1;
    if (has_missiondata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missiondata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBMissionData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBMissionData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBMissionData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBMissionData::MergeFrom(const KPBMissionData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_missiondata()) {
      mutable_missiondata()->::T3DB::KPB_MISSION_DATA::MergeFrom(from.missiondata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBMissionData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBMissionData::CopyFrom(const KPBMissionData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBMissionData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_missiondata()) {
    if (!this->missiondata().IsInitialized()) return false;
  }
  return true;
}

void KPBMissionData::Swap(KPBMissionData* other) {
  if (other != this) {
    std::swap(missiondata_, other->missiondata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBMissionData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBMissionData_descriptor_;
  metadata.reflection = KPBMissionData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBMakingMachine::kMakingMachineDataFieldNumber;
#endif  // !_MSC_VER

KPBMakingMachine::KPBMakingMachine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBMakingMachine::InitAsDefaultInstance() {
  makingmachinedata_ = const_cast< ::T3DB::KPB_MAKING_MACHINE_DATA*>(&::T3DB::KPB_MAKING_MACHINE_DATA::default_instance());
}

KPBMakingMachine::KPBMakingMachine(const KPBMakingMachine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBMakingMachine::SharedCtor() {
  _cached_size_ = 0;
  makingmachinedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBMakingMachine::~KPBMakingMachine() {
  SharedDtor();
}

void KPBMakingMachine::SharedDtor() {
  if (this != default_instance_) {
    delete makingmachinedata_;
  }
}

void KPBMakingMachine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBMakingMachine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBMakingMachine_descriptor_;
}

const KPBMakingMachine& KPBMakingMachine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBMakingMachine* KPBMakingMachine::default_instance_ = NULL;

KPBMakingMachine* KPBMakingMachine::New() const {
  return new KPBMakingMachine;
}

void KPBMakingMachine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_makingmachinedata()) {
      if (makingmachinedata_ != NULL) makingmachinedata_->::T3DB::KPB_MAKING_MACHINE_DATA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBMakingMachine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPB_MAKING_MACHINE_DATA MakingMachineData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_makingmachinedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBMakingMachine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPB_MAKING_MACHINE_DATA MakingMachineData = 1;
  if (has_makingmachinedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->makingmachinedata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBMakingMachine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPB_MAKING_MACHINE_DATA MakingMachineData = 1;
  if (has_makingmachinedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->makingmachinedata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBMakingMachine::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPB_MAKING_MACHINE_DATA MakingMachineData = 1;
    if (has_makingmachinedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->makingmachinedata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBMakingMachine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBMakingMachine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBMakingMachine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBMakingMachine::MergeFrom(const KPBMakingMachine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_makingmachinedata()) {
      mutable_makingmachinedata()->::T3DB::KPB_MAKING_MACHINE_DATA::MergeFrom(from.makingmachinedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBMakingMachine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBMakingMachine::CopyFrom(const KPBMakingMachine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBMakingMachine::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_makingmachinedata()) {
    if (!this->makingmachinedata().IsInitialized()) return false;
  }
  return true;
}

void KPBMakingMachine::Swap(KPBMakingMachine* other) {
  if (other != this) {
    std::swap(makingmachinedata_, other->makingmachinedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBMakingMachine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBMakingMachine_descriptor_;
  metadata.reflection = KPBMakingMachine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBUpgradeQueue::kUpgradeQueueDataFieldNumber;
#endif  // !_MSC_VER

KPBUpgradeQueue::KPBUpgradeQueue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBUpgradeQueue::InitAsDefaultInstance() {
  upgradequeuedata_ = const_cast< ::T3DB::KPB_UPGRADE_QUEUE_DATA*>(&::T3DB::KPB_UPGRADE_QUEUE_DATA::default_instance());
}

KPBUpgradeQueue::KPBUpgradeQueue(const KPBUpgradeQueue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBUpgradeQueue::SharedCtor() {
  _cached_size_ = 0;
  upgradequeuedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBUpgradeQueue::~KPBUpgradeQueue() {
  SharedDtor();
}

void KPBUpgradeQueue::SharedDtor() {
  if (this != default_instance_) {
    delete upgradequeuedata_;
  }
}

void KPBUpgradeQueue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBUpgradeQueue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBUpgradeQueue_descriptor_;
}

const KPBUpgradeQueue& KPBUpgradeQueue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBUpgradeQueue* KPBUpgradeQueue::default_instance_ = NULL;

KPBUpgradeQueue* KPBUpgradeQueue::New() const {
  return new KPBUpgradeQueue;
}

void KPBUpgradeQueue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_upgradequeuedata()) {
      if (upgradequeuedata_ != NULL) upgradequeuedata_->::T3DB::KPB_UPGRADE_QUEUE_DATA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBUpgradeQueue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPB_UPGRADE_QUEUE_DATA UpgradeQueueData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upgradequeuedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBUpgradeQueue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPB_UPGRADE_QUEUE_DATA UpgradeQueueData = 1;
  if (has_upgradequeuedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->upgradequeuedata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBUpgradeQueue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPB_UPGRADE_QUEUE_DATA UpgradeQueueData = 1;
  if (has_upgradequeuedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->upgradequeuedata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBUpgradeQueue::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPB_UPGRADE_QUEUE_DATA UpgradeQueueData = 1;
    if (has_upgradequeuedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upgradequeuedata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBUpgradeQueue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBUpgradeQueue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBUpgradeQueue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBUpgradeQueue::MergeFrom(const KPBUpgradeQueue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_upgradequeuedata()) {
      mutable_upgradequeuedata()->::T3DB::KPB_UPGRADE_QUEUE_DATA::MergeFrom(from.upgradequeuedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBUpgradeQueue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBUpgradeQueue::CopyFrom(const KPBUpgradeQueue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBUpgradeQueue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_upgradequeuedata()) {
    if (!this->upgradequeuedata().IsInitialized()) return false;
  }
  return true;
}

void KPBUpgradeQueue::Swap(KPBUpgradeQueue* other) {
  if (other != this) {
    std::swap(upgradequeuedata_, other->upgradequeuedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBUpgradeQueue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBUpgradeQueue_descriptor_;
  metadata.reflection = KPBUpgradeQueue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBGym::kGymDataFieldNumber;
#endif  // !_MSC_VER

KPBGym::KPBGym()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBGym::InitAsDefaultInstance() {
  gymdata_ = const_cast< ::T3DB::KPB_GYM_DATA*>(&::T3DB::KPB_GYM_DATA::default_instance());
}

KPBGym::KPBGym(const KPBGym& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBGym::SharedCtor() {
  _cached_size_ = 0;
  gymdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBGym::~KPBGym() {
  SharedDtor();
}

void KPBGym::SharedDtor() {
  if (this != default_instance_) {
    delete gymdata_;
  }
}

void KPBGym::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBGym::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBGym_descriptor_;
}

const KPBGym& KPBGym::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBGym* KPBGym::default_instance_ = NULL;

KPBGym* KPBGym::New() const {
  return new KPBGym;
}

void KPBGym::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_gymdata()) {
      if (gymdata_ != NULL) gymdata_->::T3DB::KPB_GYM_DATA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBGym::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPB_GYM_DATA GymData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gymdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBGym::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPB_GYM_DATA GymData = 1;
  if (has_gymdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gymdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBGym::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPB_GYM_DATA GymData = 1;
  if (has_gymdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gymdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBGym::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPB_GYM_DATA GymData = 1;
    if (has_gymdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gymdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBGym::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBGym* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBGym*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBGym::MergeFrom(const KPBGym& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gymdata()) {
      mutable_gymdata()->::T3DB::KPB_GYM_DATA::MergeFrom(from.gymdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBGym::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBGym::CopyFrom(const KPBGym& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBGym::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_gymdata()) {
    if (!this->gymdata().IsInitialized()) return false;
  }
  return true;
}

void KPBGym::Swap(KPBGym* other) {
  if (other != this) {
    std::swap(gymdata_, other->gymdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBGym::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBGym_descriptor_;
  metadata.reflection = KPBGym_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBBusinessStreet::kStreetDataFieldNumber;
#endif  // !_MSC_VER

KPBBusinessStreet::KPBBusinessStreet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBBusinessStreet::InitAsDefaultInstance() {
  streetdata_ = const_cast< ::T3DB::KPB_BUSINESSSTREET_DATA*>(&::T3DB::KPB_BUSINESSSTREET_DATA::default_instance());
}

KPBBusinessStreet::KPBBusinessStreet(const KPBBusinessStreet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBBusinessStreet::SharedCtor() {
  _cached_size_ = 0;
  streetdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBBusinessStreet::~KPBBusinessStreet() {
  SharedDtor();
}

void KPBBusinessStreet::SharedDtor() {
  if (this != default_instance_) {
    delete streetdata_;
  }
}

void KPBBusinessStreet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBBusinessStreet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBBusinessStreet_descriptor_;
}

const KPBBusinessStreet& KPBBusinessStreet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBBusinessStreet* KPBBusinessStreet::default_instance_ = NULL;

KPBBusinessStreet* KPBBusinessStreet::New() const {
  return new KPBBusinessStreet;
}

void KPBBusinessStreet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_streetdata()) {
      if (streetdata_ != NULL) streetdata_->::T3DB::KPB_BUSINESSSTREET_DATA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBBusinessStreet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPB_BUSINESSSTREET_DATA StreetData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_streetdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBBusinessStreet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPB_BUSINESSSTREET_DATA StreetData = 1;
  if (has_streetdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->streetdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBBusinessStreet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPB_BUSINESSSTREET_DATA StreetData = 1;
  if (has_streetdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->streetdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBBusinessStreet::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPB_BUSINESSSTREET_DATA StreetData = 1;
    if (has_streetdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->streetdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBBusinessStreet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBBusinessStreet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBBusinessStreet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBBusinessStreet::MergeFrom(const KPBBusinessStreet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_streetdata()) {
      mutable_streetdata()->::T3DB::KPB_BUSINESSSTREET_DATA::MergeFrom(from.streetdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBBusinessStreet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBBusinessStreet::CopyFrom(const KPBBusinessStreet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBBusinessStreet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_streetdata()) {
    if (!this->streetdata().IsInitialized()) return false;
  }
  return true;
}

void KPBBusinessStreet::Swap(KPBBusinessStreet* other) {
  if (other != this) {
    std::swap(streetdata_, other->streetdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBBusinessStreet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBBusinessStreet_descriptor_;
  metadata.reflection = KPBBusinessStreet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBSecretary::kReportItemFieldNumber;
#endif  // !_MSC_VER

KPBSecretary::KPBSecretary()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBSecretary::InitAsDefaultInstance() {
}

KPBSecretary::KPBSecretary(const KPBSecretary& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBSecretary::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBSecretary::~KPBSecretary() {
  SharedDtor();
}

void KPBSecretary::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPBSecretary::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBSecretary::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBSecretary_descriptor_;
}

const KPBSecretary& KPBSecretary::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBSecretary* KPBSecretary::default_instance_ = NULL;

KPBSecretary* KPBSecretary::New() const {
  return new KPBSecretary;
}

void KPBSecretary::Clear() {
  reportitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBSecretary::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .T3DB.KPB_REPORT_ITEM ReportItem = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ReportItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_reportitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_ReportItem;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBSecretary::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .T3DB.KPB_REPORT_ITEM ReportItem = 1;
  for (int i = 0; i < this->reportitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->reportitem(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBSecretary::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .T3DB.KPB_REPORT_ITEM ReportItem = 1;
  for (int i = 0; i < this->reportitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->reportitem(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBSecretary::ByteSize() const {
  int total_size = 0;
  
  // repeated .T3DB.KPB_REPORT_ITEM ReportItem = 1;
  total_size += 1 * this->reportitem_size();
  for (int i = 0; i < this->reportitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->reportitem(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBSecretary::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBSecretary* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBSecretary*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBSecretary::MergeFrom(const KPBSecretary& from) {
  GOOGLE_CHECK_NE(&from, this);
  reportitem_.MergeFrom(from.reportitem_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBSecretary::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBSecretary::CopyFrom(const KPBSecretary& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBSecretary::IsInitialized() const {
  
  for (int i = 0; i < reportitem_size(); i++) {
    if (!this->reportitem(i).IsInitialized()) return false;
  }
  return true;
}

void KPBSecretary::Swap(KPBSecretary* other) {
  if (other != this) {
    reportitem_.Swap(&other->reportitem_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBSecretary::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBSecretary_descriptor_;
  metadata.reflection = KPBSecretary_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBCheerleadingMgr::kCheerleadingDataFieldNumber;
#endif  // !_MSC_VER

KPBCheerleadingMgr::KPBCheerleadingMgr()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBCheerleadingMgr::InitAsDefaultInstance() {
  cheerleadingdata_ = const_cast< ::T3DB::KPB_CHEERLEADING_DATA*>(&::T3DB::KPB_CHEERLEADING_DATA::default_instance());
}

KPBCheerleadingMgr::KPBCheerleadingMgr(const KPBCheerleadingMgr& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBCheerleadingMgr::SharedCtor() {
  _cached_size_ = 0;
  cheerleadingdata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBCheerleadingMgr::~KPBCheerleadingMgr() {
  SharedDtor();
}

void KPBCheerleadingMgr::SharedDtor() {
  if (this != default_instance_) {
    delete cheerleadingdata_;
  }
}

void KPBCheerleadingMgr::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBCheerleadingMgr::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBCheerleadingMgr_descriptor_;
}

const KPBCheerleadingMgr& KPBCheerleadingMgr::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBCheerleadingMgr* KPBCheerleadingMgr::default_instance_ = NULL;

KPBCheerleadingMgr* KPBCheerleadingMgr::New() const {
  return new KPBCheerleadingMgr;
}

void KPBCheerleadingMgr::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cheerleadingdata()) {
      if (cheerleadingdata_ != NULL) cheerleadingdata_->::T3DB::KPB_CHEERLEADING_DATA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBCheerleadingMgr::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPB_CHEERLEADING_DATA CheerleadingData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cheerleadingdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBCheerleadingMgr::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPB_CHEERLEADING_DATA CheerleadingData = 1;
  if (has_cheerleadingdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cheerleadingdata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBCheerleadingMgr::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPB_CHEERLEADING_DATA CheerleadingData = 1;
  if (has_cheerleadingdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cheerleadingdata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBCheerleadingMgr::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPB_CHEERLEADING_DATA CheerleadingData = 1;
    if (has_cheerleadingdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cheerleadingdata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBCheerleadingMgr::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBCheerleadingMgr* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBCheerleadingMgr*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBCheerleadingMgr::MergeFrom(const KPBCheerleadingMgr& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cheerleadingdata()) {
      mutable_cheerleadingdata()->::T3DB::KPB_CHEERLEADING_DATA::MergeFrom(from.cheerleadingdata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBCheerleadingMgr::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBCheerleadingMgr::CopyFrom(const KPBCheerleadingMgr& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBCheerleadingMgr::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_cheerleadingdata()) {
    if (!this->cheerleadingdata().IsInitialized()) return false;
  }
  return true;
}

void KPBCheerleadingMgr::Swap(KPBCheerleadingMgr* other) {
  if (other != this) {
    std::swap(cheerleadingdata_, other->cheerleadingdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBCheerleadingMgr::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBCheerleadingMgr_descriptor_;
  metadata.reflection = KPBCheerleadingMgr_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPBWardrobe::kWardrobeDataFieldNumber;
#endif  // !_MSC_VER

KPBWardrobe::KPBWardrobe()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPBWardrobe::InitAsDefaultInstance() {
  wardrobedata_ = const_cast< ::T3DB::KPB_WARDROBE_DATA*>(&::T3DB::KPB_WARDROBE_DATA::default_instance());
}

KPBWardrobe::KPBWardrobe(const KPBWardrobe& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPBWardrobe::SharedCtor() {
  _cached_size_ = 0;
  wardrobedata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPBWardrobe::~KPBWardrobe() {
  SharedDtor();
}

void KPBWardrobe::SharedDtor() {
  if (this != default_instance_) {
    delete wardrobedata_;
  }
}

void KPBWardrobe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPBWardrobe::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPBWardrobe_descriptor_;
}

const KPBWardrobe& KPBWardrobe::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPBWardrobe* KPBWardrobe::default_instance_ = NULL;

KPBWardrobe* KPBWardrobe::New() const {
  return new KPBWardrobe;
}

void KPBWardrobe::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_wardrobedata()) {
      if (wardrobedata_ != NULL) wardrobedata_->::T3DB::KPB_WARDROBE_DATA::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPBWardrobe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPB_WARDROBE_DATA WardrobeData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wardrobedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPBWardrobe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPB_WARDROBE_DATA WardrobeData = 1;
  if (has_wardrobedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->wardrobedata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPBWardrobe::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPB_WARDROBE_DATA WardrobeData = 1;
  if (has_wardrobedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->wardrobedata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPBWardrobe::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPB_WARDROBE_DATA WardrobeData = 1;
    if (has_wardrobedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wardrobedata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPBWardrobe::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPBWardrobe* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPBWardrobe*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPBWardrobe::MergeFrom(const KPBWardrobe& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wardrobedata()) {
      mutable_wardrobedata()->::T3DB::KPB_WARDROBE_DATA::MergeFrom(from.wardrobedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPBWardrobe::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPBWardrobe::CopyFrom(const KPBWardrobe& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPBWardrobe::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_wardrobedata()) {
    if (!this->wardrobedata().IsInitialized()) return false;
  }
  return true;
}

void KPBWardrobe::Swap(KPBWardrobe* other) {
  if (other != this) {
    std::swap(wardrobedata_, other->wardrobedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPBWardrobe::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPBWardrobe_descriptor_;
  metadata.reflection = KPBWardrobe_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_WARDROBE_DATA::kFashionDataFieldNumber;
#endif  // !_MSC_VER

KPB_WARDROBE_DATA::KPB_WARDROBE_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_WARDROBE_DATA::InitAsDefaultInstance() {
}

KPB_WARDROBE_DATA::KPB_WARDROBE_DATA(const KPB_WARDROBE_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_WARDROBE_DATA::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_WARDROBE_DATA::~KPB_WARDROBE_DATA() {
  SharedDtor();
}

void KPB_WARDROBE_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_WARDROBE_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_WARDROBE_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_WARDROBE_DATA_descriptor_;
}

const KPB_WARDROBE_DATA& KPB_WARDROBE_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_WARDROBE_DATA* KPB_WARDROBE_DATA::default_instance_ = NULL;

KPB_WARDROBE_DATA* KPB_WARDROBE_DATA::New() const {
  return new KPB_WARDROBE_DATA;
}

void KPB_WARDROBE_DATA::Clear() {
  fashiondata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_WARDROBE_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .T3DB.KPB_FASHION_DATA FashionData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FashionData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_fashiondata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_FashionData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_WARDROBE_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .T3DB.KPB_FASHION_DATA FashionData = 1;
  for (int i = 0; i < this->fashiondata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->fashiondata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_WARDROBE_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .T3DB.KPB_FASHION_DATA FashionData = 1;
  for (int i = 0; i < this->fashiondata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->fashiondata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_WARDROBE_DATA::ByteSize() const {
  int total_size = 0;
  
  // repeated .T3DB.KPB_FASHION_DATA FashionData = 1;
  total_size += 1 * this->fashiondata_size();
  for (int i = 0; i < this->fashiondata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->fashiondata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_WARDROBE_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_WARDROBE_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_WARDROBE_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_WARDROBE_DATA::MergeFrom(const KPB_WARDROBE_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  fashiondata_.MergeFrom(from.fashiondata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_WARDROBE_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_WARDROBE_DATA::CopyFrom(const KPB_WARDROBE_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_WARDROBE_DATA::IsInitialized() const {
  
  for (int i = 0; i < fashiondata_size(); i++) {
    if (!this->fashiondata(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_WARDROBE_DATA::Swap(KPB_WARDROBE_DATA* other) {
  if (other != this) {
    fashiondata_.Swap(&other->fashiondata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_WARDROBE_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_WARDROBE_DATA_descriptor_;
  metadata.reflection = KPB_WARDROBE_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_FASHION_DATA::kFashionIDFieldNumber;
const int KPB_FASHION_DATA::kOverduePointFieldNumber;
const int KPB_FASHION_DATA::kBelongToHeroIDFieldNumber;
#endif  // !_MSC_VER

KPB_FASHION_DATA::KPB_FASHION_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_FASHION_DATA::InitAsDefaultInstance() {
}

KPB_FASHION_DATA::KPB_FASHION_DATA(const KPB_FASHION_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_FASHION_DATA::SharedCtor() {
  _cached_size_ = 0;
  fashionid_ = 0u;
  overduepoint_ = 0u;
  belongtoheroid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_FASHION_DATA::~KPB_FASHION_DATA() {
  SharedDtor();
}

void KPB_FASHION_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_FASHION_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_FASHION_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_FASHION_DATA_descriptor_;
}

const KPB_FASHION_DATA& KPB_FASHION_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_FASHION_DATA* KPB_FASHION_DATA::default_instance_ = NULL;

KPB_FASHION_DATA* KPB_FASHION_DATA::New() const {
  return new KPB_FASHION_DATA;
}

void KPB_FASHION_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fashionid_ = 0u;
    overduepoint_ = 0u;
    belongtoheroid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_FASHION_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 FashionID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fashionid_)));
          set_has_fashionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_OverduePoint;
        break;
      }
      
      // required uint32 OverduePoint = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OverduePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &overduepoint_)));
          set_has_overduepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BelongToHeroID;
        break;
      }
      
      // required uint32 BelongToHeroID = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BelongToHeroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &belongtoheroid_)));
          set_has_belongtoheroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_FASHION_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 FashionID = 1 [default = 0];
  if (has_fashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->fashionid(), output);
  }
  
  // required uint32 OverduePoint = 2 [default = 0];
  if (has_overduepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->overduepoint(), output);
  }
  
  // required uint32 BelongToHeroID = 3 [default = 0];
  if (has_belongtoheroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->belongtoheroid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_FASHION_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 FashionID = 1 [default = 0];
  if (has_fashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->fashionid(), target);
  }
  
  // required uint32 OverduePoint = 2 [default = 0];
  if (has_overduepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->overduepoint(), target);
  }
  
  // required uint32 BelongToHeroID = 3 [default = 0];
  if (has_belongtoheroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->belongtoheroid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_FASHION_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 FashionID = 1 [default = 0];
    if (has_fashionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fashionid());
    }
    
    // required uint32 OverduePoint = 2 [default = 0];
    if (has_overduepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->overduepoint());
    }
    
    // required uint32 BelongToHeroID = 3 [default = 0];
    if (has_belongtoheroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->belongtoheroid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_FASHION_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_FASHION_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_FASHION_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_FASHION_DATA::MergeFrom(const KPB_FASHION_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fashionid()) {
      set_fashionid(from.fashionid());
    }
    if (from.has_overduepoint()) {
      set_overduepoint(from.overduepoint());
    }
    if (from.has_belongtoheroid()) {
      set_belongtoheroid(from.belongtoheroid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_FASHION_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_FASHION_DATA::CopyFrom(const KPB_FASHION_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_FASHION_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void KPB_FASHION_DATA::Swap(KPB_FASHION_DATA* other) {
  if (other != this) {
    std::swap(fashionid_, other->fashionid_);
    std::swap(overduepoint_, other->overduepoint_);
    std::swap(belongtoheroid_, other->belongtoheroid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_FASHION_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_FASHION_DATA_descriptor_;
  metadata.reflection = KPB_FASHION_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_PLAYER_VALUE::kPlayerValueDataFieldNumber;
#endif  // !_MSC_VER

KPB_PLAYER_VALUE::KPB_PLAYER_VALUE()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_PLAYER_VALUE::InitAsDefaultInstance() {
}

KPB_PLAYER_VALUE::KPB_PLAYER_VALUE(const KPB_PLAYER_VALUE& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_PLAYER_VALUE::SharedCtor() {
  _cached_size_ = 0;
  playervaluedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_PLAYER_VALUE::~KPB_PLAYER_VALUE() {
  SharedDtor();
}

void KPB_PLAYER_VALUE::SharedDtor() {
  if (playervaluedata_ != &::google::protobuf::internal::kEmptyString) {
    delete playervaluedata_;
  }
  if (this != default_instance_) {
  }
}

void KPB_PLAYER_VALUE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_PLAYER_VALUE::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_PLAYER_VALUE_descriptor_;
}

const KPB_PLAYER_VALUE& KPB_PLAYER_VALUE::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_PLAYER_VALUE* KPB_PLAYER_VALUE::default_instance_ = NULL;

KPB_PLAYER_VALUE* KPB_PLAYER_VALUE::New() const {
  return new KPB_PLAYER_VALUE;
}

void KPB_PLAYER_VALUE::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_playervaluedata()) {
      if (playervaluedata_ != &::google::protobuf::internal::kEmptyString) {
        playervaluedata_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_PLAYER_VALUE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes PlayerValueData = 1 [default = ""];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playervaluedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_PLAYER_VALUE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes PlayerValueData = 1 [default = ""];
  if (has_playervaluedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->playervaluedata(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_PLAYER_VALUE::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes PlayerValueData = 1 [default = ""];
  if (has_playervaluedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->playervaluedata(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_PLAYER_VALUE::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes PlayerValueData = 1 [default = ""];
    if (has_playervaluedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playervaluedata());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_PLAYER_VALUE::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_PLAYER_VALUE* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_PLAYER_VALUE*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_PLAYER_VALUE::MergeFrom(const KPB_PLAYER_VALUE& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playervaluedata()) {
      set_playervaluedata(from.playervaluedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_PLAYER_VALUE::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_PLAYER_VALUE::CopyFrom(const KPB_PLAYER_VALUE& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_PLAYER_VALUE::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void KPB_PLAYER_VALUE::Swap(KPB_PLAYER_VALUE* other) {
  if (other != this) {
    std::swap(playervaluedata_, other->playervaluedata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_PLAYER_VALUE::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_PLAYER_VALUE_descriptor_;
  metadata.reflection = KPB_PLAYER_VALUE_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_TeamLogo_Info::kTeamLogoFrameIDFieldNumber;
const int KPB_TeamLogo_Info::kTeamLogoEmblemIDFieldNumber;
const int KPB_TeamLogo_Info::kTeamLogoInfoCountFieldNumber;
const int KPB_TeamLogo_Info::kTeamLogoDataFieldNumber;
#endif  // !_MSC_VER

KPB_TeamLogo_Info::KPB_TeamLogo_Info()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_TeamLogo_Info::InitAsDefaultInstance() {
}

KPB_TeamLogo_Info::KPB_TeamLogo_Info(const KPB_TeamLogo_Info& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_TeamLogo_Info::SharedCtor() {
  _cached_size_ = 0;
  teamlogoframeid_ = 0;
  teamlogoemblemid_ = 0;
  teamlogoinfocount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_TeamLogo_Info::~KPB_TeamLogo_Info() {
  SharedDtor();
}

void KPB_TeamLogo_Info::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_TeamLogo_Info::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_TeamLogo_Info::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_TeamLogo_Info_descriptor_;
}

const KPB_TeamLogo_Info& KPB_TeamLogo_Info::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_TeamLogo_Info* KPB_TeamLogo_Info::default_instance_ = NULL;

KPB_TeamLogo_Info* KPB_TeamLogo_Info::New() const {
  return new KPB_TeamLogo_Info;
}

void KPB_TeamLogo_Info::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamlogoframeid_ = 0;
    teamlogoemblemid_ = 0;
    teamlogoinfocount_ = 0;
  }
  teamlogodata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_TeamLogo_Info::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 TeamLogoFrameID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamlogoframeid_)));
          set_has_teamlogoframeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_TeamLogoEmblemID;
        break;
      }
      
      // required int32 TeamLogoEmblemID = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamLogoEmblemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamlogoemblemid_)));
          set_has_teamlogoemblemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_TeamLogoInfoCount;
        break;
      }
      
      // required int32 TeamLogoInfoCount = 3 [default = 0];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TeamLogoInfoCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamlogoinfocount_)));
          set_has_teamlogoinfocount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_TeamLogoData;
        break;
      }
      
      // repeated .T3DB.KPB_TEAMLOGO_DATA TeamLogoData = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TeamLogoData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teamlogodata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_TeamLogoData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_TeamLogo_Info::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 TeamLogoFrameID = 1 [default = 0];
  if (has_teamlogoframeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamlogoframeid(), output);
  }
  
  // required int32 TeamLogoEmblemID = 2 [default = 0];
  if (has_teamlogoemblemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->teamlogoemblemid(), output);
  }
  
  // required int32 TeamLogoInfoCount = 3 [default = 0];
  if (has_teamlogoinfocount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamlogoinfocount(), output);
  }
  
  // repeated .T3DB.KPB_TEAMLOGO_DATA TeamLogoData = 4;
  for (int i = 0; i < this->teamlogodata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->teamlogodata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_TeamLogo_Info::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 TeamLogoFrameID = 1 [default = 0];
  if (has_teamlogoframeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teamlogoframeid(), target);
  }
  
  // required int32 TeamLogoEmblemID = 2 [default = 0];
  if (has_teamlogoemblemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->teamlogoemblemid(), target);
  }
  
  // required int32 TeamLogoInfoCount = 3 [default = 0];
  if (has_teamlogoinfocount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->teamlogoinfocount(), target);
  }
  
  // repeated .T3DB.KPB_TEAMLOGO_DATA TeamLogoData = 4;
  for (int i = 0; i < this->teamlogodata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->teamlogodata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_TeamLogo_Info::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 TeamLogoFrameID = 1 [default = 0];
    if (has_teamlogoframeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamlogoframeid());
    }
    
    // required int32 TeamLogoEmblemID = 2 [default = 0];
    if (has_teamlogoemblemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamlogoemblemid());
    }
    
    // required int32 TeamLogoInfoCount = 3 [default = 0];
    if (has_teamlogoinfocount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamlogoinfocount());
    }
    
  }
  // repeated .T3DB.KPB_TEAMLOGO_DATA TeamLogoData = 4;
  total_size += 1 * this->teamlogodata_size();
  for (int i = 0; i < this->teamlogodata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teamlogodata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_TeamLogo_Info::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_TeamLogo_Info* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_TeamLogo_Info*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_TeamLogo_Info::MergeFrom(const KPB_TeamLogo_Info& from) {
  GOOGLE_CHECK_NE(&from, this);
  teamlogodata_.MergeFrom(from.teamlogodata_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamlogoframeid()) {
      set_teamlogoframeid(from.teamlogoframeid());
    }
    if (from.has_teamlogoemblemid()) {
      set_teamlogoemblemid(from.teamlogoemblemid());
    }
    if (from.has_teamlogoinfocount()) {
      set_teamlogoinfocount(from.teamlogoinfocount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_TeamLogo_Info::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_TeamLogo_Info::CopyFrom(const KPB_TeamLogo_Info& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_TeamLogo_Info::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < teamlogodata_size(); i++) {
    if (!this->teamlogodata(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_TeamLogo_Info::Swap(KPB_TeamLogo_Info* other) {
  if (other != this) {
    std::swap(teamlogoframeid_, other->teamlogoframeid_);
    std::swap(teamlogoemblemid_, other->teamlogoemblemid_);
    std::swap(teamlogoinfocount_, other->teamlogoinfocount_);
    teamlogodata_.Swap(&other->teamlogodata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_TeamLogo_Info::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_TeamLogo_Info_descriptor_;
  metadata.reflection = KPB_TeamLogo_Info_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_TEAMLOGO_DATA::kOwnTeamLogoIDFieldNumber;
#endif  // !_MSC_VER

KPB_TEAMLOGO_DATA::KPB_TEAMLOGO_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_TEAMLOGO_DATA::InitAsDefaultInstance() {
}

KPB_TEAMLOGO_DATA::KPB_TEAMLOGO_DATA(const KPB_TEAMLOGO_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_TEAMLOGO_DATA::SharedCtor() {
  _cached_size_ = 0;
  ownteamlogoid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_TEAMLOGO_DATA::~KPB_TEAMLOGO_DATA() {
  SharedDtor();
}

void KPB_TEAMLOGO_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_TEAMLOGO_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_TEAMLOGO_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_TEAMLOGO_DATA_descriptor_;
}

const KPB_TEAMLOGO_DATA& KPB_TEAMLOGO_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_TEAMLOGO_DATA* KPB_TEAMLOGO_DATA::default_instance_ = NULL;

KPB_TEAMLOGO_DATA* KPB_TEAMLOGO_DATA::New() const {
  return new KPB_TEAMLOGO_DATA;
}

void KPB_TEAMLOGO_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ownteamlogoid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_TEAMLOGO_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 OwnTeamLogoID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownteamlogoid_)));
          set_has_ownteamlogoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_TEAMLOGO_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 OwnTeamLogoID = 1 [default = 0];
  if (has_ownteamlogoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ownteamlogoid(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_TEAMLOGO_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 OwnTeamLogoID = 1 [default = 0];
  if (has_ownteamlogoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ownteamlogoid(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_TEAMLOGO_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 OwnTeamLogoID = 1 [default = 0];
    if (has_ownteamlogoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownteamlogoid());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_TEAMLOGO_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_TEAMLOGO_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_TEAMLOGO_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_TEAMLOGO_DATA::MergeFrom(const KPB_TEAMLOGO_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ownteamlogoid()) {
      set_ownteamlogoid(from.ownteamlogoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_TEAMLOGO_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_TEAMLOGO_DATA::CopyFrom(const KPB_TEAMLOGO_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_TEAMLOGO_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  return true;
}

void KPB_TEAMLOGO_DATA::Swap(KPB_TEAMLOGO_DATA* other) {
  if (other != this) {
    std::swap(ownteamlogoid_, other->ownteamlogoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_TEAMLOGO_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_TEAMLOGO_DATA_descriptor_;
  metadata.reflection = KPB_TEAMLOGO_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::kAchievementIDFieldNumber;
const int KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::kCurValueFieldNumber;
#endif  // !_MSC_VER

KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::InitAsDefaultInstance() {
}

KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA(const KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::SharedCtor() {
  _cached_size_ = 0;
  achievementid_ = 0u;
  curvalue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::~KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA() {
  SharedDtor();
}

void KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA_descriptor_;
}

const KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA& KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA* KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::default_instance_ = NULL;

KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA* KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::New() const {
  return new KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA;
}

void KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achievementid_ = 0u;
    curvalue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 AchievementID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &achievementid_)));
          set_has_achievementid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CurValue;
        break;
      }
      
      // required int32 CurValue = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CurValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curvalue_)));
          set_has_curvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 AchievementID = 1 [default = 0];
  if (has_achievementid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->achievementid(), output);
  }
  
  // required int32 CurValue = 2 [default = 0];
  if (has_curvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->curvalue(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 AchievementID = 1 [default = 0];
  if (has_achievementid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->achievementid(), target);
  }
  
  // required int32 CurValue = 2 [default = 0];
  if (has_curvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->curvalue(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 AchievementID = 1 [default = 0];
    if (has_achievementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->achievementid());
    }
    
    // required int32 CurValue = 2 [default = 0];
    if (has_curvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curvalue());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::MergeFrom(const KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievementid()) {
      set_achievementid(from.achievementid());
    }
    if (from.has_curvalue()) {
      set_curvalue(from.curvalue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::CopyFrom(const KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::Swap(KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA* other) {
  if (other != this) {
    std::swap(achievementid_, other->achievementid_);
    std::swap(curvalue_, other->curvalue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA_descriptor_;
  metadata.reflection = KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_ACHIEVEMENT_DATA::kAchievementPointFieldNumber;
const int KPB_ACHIEVEMENT_DATA::kStateDataFieldNumber;
const int KPB_ACHIEVEMENT_DATA::kProgressingFieldNumber;
#endif  // !_MSC_VER

KPB_ACHIEVEMENT_DATA::KPB_ACHIEVEMENT_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_ACHIEVEMENT_DATA::InitAsDefaultInstance() {
}

KPB_ACHIEVEMENT_DATA::KPB_ACHIEVEMENT_DATA(const KPB_ACHIEVEMENT_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_ACHIEVEMENT_DATA::SharedCtor() {
  _cached_size_ = 0;
  achievementpoint_ = 0;
  statedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_ACHIEVEMENT_DATA::~KPB_ACHIEVEMENT_DATA() {
  SharedDtor();
}

void KPB_ACHIEVEMENT_DATA::SharedDtor() {
  if (statedata_ != &::google::protobuf::internal::kEmptyString) {
    delete statedata_;
  }
  if (this != default_instance_) {
  }
}

void KPB_ACHIEVEMENT_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_ACHIEVEMENT_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_ACHIEVEMENT_DATA_descriptor_;
}

const KPB_ACHIEVEMENT_DATA& KPB_ACHIEVEMENT_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_ACHIEVEMENT_DATA* KPB_ACHIEVEMENT_DATA::default_instance_ = NULL;

KPB_ACHIEVEMENT_DATA* KPB_ACHIEVEMENT_DATA::New() const {
  return new KPB_ACHIEVEMENT_DATA;
}

void KPB_ACHIEVEMENT_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    achievementpoint_ = 0;
    if (has_statedata()) {
      if (statedata_ != &::google::protobuf::internal::kEmptyString) {
        statedata_->clear();
      }
    }
  }
  progressing_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_ACHIEVEMENT_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 AchievementPoint = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &achievementpoint_)));
          set_has_achievementpoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_StateData;
        break;
      }
      
      // required bytes StateData = 2 [default = ""];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_StateData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_statedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Progressing;
        break;
      }
      
      // repeated .T3DB.KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA Progressing = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Progressing:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_progressing()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Progressing;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_ACHIEVEMENT_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 AchievementPoint = 1 [default = 0];
  if (has_achievementpoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->achievementpoint(), output);
  }
  
  // required bytes StateData = 2 [default = ""];
  if (has_statedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->statedata(), output);
  }
  
  // repeated .T3DB.KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA Progressing = 3;
  for (int i = 0; i < this->progressing_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->progressing(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_ACHIEVEMENT_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 AchievementPoint = 1 [default = 0];
  if (has_achievementpoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->achievementpoint(), target);
  }
  
  // required bytes StateData = 2 [default = ""];
  if (has_statedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->statedata(), target);
  }
  
  // repeated .T3DB.KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA Progressing = 3;
  for (int i = 0; i < this->progressing_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->progressing(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_ACHIEVEMENT_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 AchievementPoint = 1 [default = 0];
    if (has_achievementpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->achievementpoint());
    }
    
    // required bytes StateData = 2 [default = ""];
    if (has_statedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->statedata());
    }
    
  }
  // repeated .T3DB.KPB_ACHIEVEMENT_ITEM_PROGRESS_DATA Progressing = 3;
  total_size += 1 * this->progressing_size();
  for (int i = 0; i < this->progressing_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->progressing(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_ACHIEVEMENT_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_ACHIEVEMENT_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_ACHIEVEMENT_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_ACHIEVEMENT_DATA::MergeFrom(const KPB_ACHIEVEMENT_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  progressing_.MergeFrom(from.progressing_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_achievementpoint()) {
      set_achievementpoint(from.achievementpoint());
    }
    if (from.has_statedata()) {
      set_statedata(from.statedata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_ACHIEVEMENT_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_ACHIEVEMENT_DATA::CopyFrom(const KPB_ACHIEVEMENT_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_ACHIEVEMENT_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  for (int i = 0; i < progressing_size(); i++) {
    if (!this->progressing(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_ACHIEVEMENT_DATA::Swap(KPB_ACHIEVEMENT_DATA* other) {
  if (other != this) {
    std::swap(achievementpoint_, other->achievementpoint_);
    std::swap(statedata_, other->statedata_);
    progressing_.Swap(&other->progressing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_ACHIEVEMENT_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_ACHIEVEMENT_DATA_descriptor_;
  metadata.reflection = KPB_ACHIEVEMENT_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_SAVE_DATA::kCustomDataFieldNumber;
const int KPB_SAVE_DATA::kHeroDataListFieldNumber;
const int KPB_SAVE_DATA::kItemListFieldNumber;
const int KPB_SAVE_DATA::kMoneyMgrFieldNumber;
const int KPB_SAVE_DATA::kUserPreferencesFieldNumber;
const int KPB_SAVE_DATA::kCDTimerListFieldNumber;
const int KPB_SAVE_DATA::kQuestListFieldNumber;
const int KPB_SAVE_DATA::kHeroTrainingMgrFieldNumber;
const int KPB_SAVE_DATA::kMissionDataFieldNumber;
const int KPB_SAVE_DATA::kMakingMachineFieldNumber;
const int KPB_SAVE_DATA::kGymFieldNumber;
const int KPB_SAVE_DATA::kUpgradeQueueFieldNumber;
const int KPB_SAVE_DATA::kBusinessStreetFieldNumber;
const int KPB_SAVE_DATA::kSecretaryFieldNumber;
const int KPB_SAVE_DATA::kCheerleadingMgrFieldNumber;
const int KPB_SAVE_DATA::kRoleStateInfoFieldNumber;
const int KPB_SAVE_DATA::kWardrobeFieldNumber;
const int KPB_SAVE_DATA::kPlayerValueFieldNumber;
const int KPB_SAVE_DATA::kTeamLogoInfoFieldNumber;
const int KPB_SAVE_DATA::kAchievementDataFieldNumber;
const int KPB_SAVE_DATA::kActivePlayerDataFieldNumber;
const int KPB_SAVE_DATA::kBuffDataListDBFieldNumber;
const int KPB_SAVE_DATA::kHeroUnlockDataListFieldNumber;
#endif  // !_MSC_VER

KPB_SAVE_DATA::KPB_SAVE_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_SAVE_DATA::InitAsDefaultInstance() {
  customdata_ = const_cast< ::T3DB::KPBCustomData*>(&::T3DB::KPBCustomData::default_instance());
  herodatalist_ = const_cast< ::T3DB::KPBHeroDataList*>(&::T3DB::KPBHeroDataList::default_instance());
  itemlist_ = const_cast< ::T3DB::KPBItemList*>(&::T3DB::KPBItemList::default_instance());
  moneymgr_ = const_cast< ::T3DB::KPBMoneyMgr*>(&::T3DB::KPBMoneyMgr::default_instance());
  userpreferences_ = const_cast< ::T3DB::KPBUserPreferences*>(&::T3DB::KPBUserPreferences::default_instance());
  cdtimerlist_ = const_cast< ::T3DB::KPBCDTimerList*>(&::T3DB::KPBCDTimerList::default_instance());
  questlist_ = const_cast< ::T3DB::KPBQuestList*>(&::T3DB::KPBQuestList::default_instance());
  herotrainingmgr_ = const_cast< ::T3DB::KPBHeroTrainingMgr*>(&::T3DB::KPBHeroTrainingMgr::default_instance());
  missiondata_ = const_cast< ::T3DB::KPBMissionData*>(&::T3DB::KPBMissionData::default_instance());
  makingmachine_ = const_cast< ::T3DB::KPBMakingMachine*>(&::T3DB::KPBMakingMachine::default_instance());
  gym_ = const_cast< ::T3DB::KPBGym*>(&::T3DB::KPBGym::default_instance());
  upgradequeue_ = const_cast< ::T3DB::KPBUpgradeQueue*>(&::T3DB::KPBUpgradeQueue::default_instance());
  businessstreet_ = const_cast< ::T3DB::KPBBusinessStreet*>(&::T3DB::KPBBusinessStreet::default_instance());
  secretary_ = const_cast< ::T3DB::KPBSecretary*>(&::T3DB::KPBSecretary::default_instance());
  cheerleadingmgr_ = const_cast< ::T3DB::KPBCheerleadingMgr*>(&::T3DB::KPBCheerleadingMgr::default_instance());
  rolestateinfo_ = const_cast< ::T3DB::KPB_ROLE_STATE_INFO*>(&::T3DB::KPB_ROLE_STATE_INFO::default_instance());
  wardrobe_ = const_cast< ::T3DB::KPBWardrobe*>(&::T3DB::KPBWardrobe::default_instance());
  playervalue_ = const_cast< ::T3DB::KPB_PLAYER_VALUE*>(&::T3DB::KPB_PLAYER_VALUE::default_instance());
  teamlogoinfo_ = const_cast< ::T3DB::KPB_TeamLogo_Info*>(&::T3DB::KPB_TeamLogo_Info::default_instance());
  achievementdata_ = const_cast< ::T3DB::KPB_ACHIEVEMENT_DATA*>(&::T3DB::KPB_ACHIEVEMENT_DATA::default_instance());
  activeplayerdata_ = const_cast< ::T3DB::KPB_ACTIVEPLAYER_DATA*>(&::T3DB::KPB_ACTIVEPLAYER_DATA::default_instance());
  buffdatalistdb_ = const_cast< ::T3DB::KPB_BUFF_DATA_LIST*>(&::T3DB::KPB_BUFF_DATA_LIST::default_instance());
  herounlockdatalist_ = const_cast< ::T3DB::KPB_HERO_UNLOCK_DATA_LIST*>(&::T3DB::KPB_HERO_UNLOCK_DATA_LIST::default_instance());
}

KPB_SAVE_DATA::KPB_SAVE_DATA(const KPB_SAVE_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_SAVE_DATA::SharedCtor() {
  _cached_size_ = 0;
  customdata_ = NULL;
  herodatalist_ = NULL;
  itemlist_ = NULL;
  moneymgr_ = NULL;
  userpreferences_ = NULL;
  cdtimerlist_ = NULL;
  questlist_ = NULL;
  herotrainingmgr_ = NULL;
  missiondata_ = NULL;
  makingmachine_ = NULL;
  gym_ = NULL;
  upgradequeue_ = NULL;
  businessstreet_ = NULL;
  secretary_ = NULL;
  cheerleadingmgr_ = NULL;
  rolestateinfo_ = NULL;
  wardrobe_ = NULL;
  playervalue_ = NULL;
  teamlogoinfo_ = NULL;
  achievementdata_ = NULL;
  activeplayerdata_ = NULL;
  buffdatalistdb_ = NULL;
  herounlockdatalist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_SAVE_DATA::~KPB_SAVE_DATA() {
  SharedDtor();
}

void KPB_SAVE_DATA::SharedDtor() {
  if (this != default_instance_) {
    delete customdata_;
    delete herodatalist_;
    delete itemlist_;
    delete moneymgr_;
    delete userpreferences_;
    delete cdtimerlist_;
    delete questlist_;
    delete herotrainingmgr_;
    delete missiondata_;
    delete makingmachine_;
    delete gym_;
    delete upgradequeue_;
    delete businessstreet_;
    delete secretary_;
    delete cheerleadingmgr_;
    delete rolestateinfo_;
    delete wardrobe_;
    delete playervalue_;
    delete teamlogoinfo_;
    delete achievementdata_;
    delete activeplayerdata_;
    delete buffdatalistdb_;
    delete herounlockdatalist_;
  }
}

void KPB_SAVE_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_SAVE_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_SAVE_DATA_descriptor_;
}

const KPB_SAVE_DATA& KPB_SAVE_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_SAVE_DATA* KPB_SAVE_DATA::default_instance_ = NULL;

KPB_SAVE_DATA* KPB_SAVE_DATA::New() const {
  return new KPB_SAVE_DATA;
}

void KPB_SAVE_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_customdata()) {
      if (customdata_ != NULL) customdata_->::T3DB::KPBCustomData::Clear();
    }
    if (has_herodatalist()) {
      if (herodatalist_ != NULL) herodatalist_->::T3DB::KPBHeroDataList::Clear();
    }
    if (has_itemlist()) {
      if (itemlist_ != NULL) itemlist_->::T3DB::KPBItemList::Clear();
    }
    if (has_moneymgr()) {
      if (moneymgr_ != NULL) moneymgr_->::T3DB::KPBMoneyMgr::Clear();
    }
    if (has_userpreferences()) {
      if (userpreferences_ != NULL) userpreferences_->::T3DB::KPBUserPreferences::Clear();
    }
    if (has_cdtimerlist()) {
      if (cdtimerlist_ != NULL) cdtimerlist_->::T3DB::KPBCDTimerList::Clear();
    }
    if (has_questlist()) {
      if (questlist_ != NULL) questlist_->::T3DB::KPBQuestList::Clear();
    }
    if (has_herotrainingmgr()) {
      if (herotrainingmgr_ != NULL) herotrainingmgr_->::T3DB::KPBHeroTrainingMgr::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_missiondata()) {
      if (missiondata_ != NULL) missiondata_->::T3DB::KPBMissionData::Clear();
    }
    if (has_makingmachine()) {
      if (makingmachine_ != NULL) makingmachine_->::T3DB::KPBMakingMachine::Clear();
    }
    if (has_gym()) {
      if (gym_ != NULL) gym_->::T3DB::KPBGym::Clear();
    }
    if (has_upgradequeue()) {
      if (upgradequeue_ != NULL) upgradequeue_->::T3DB::KPBUpgradeQueue::Clear();
    }
    if (has_businessstreet()) {
      if (businessstreet_ != NULL) businessstreet_->::T3DB::KPBBusinessStreet::Clear();
    }
    if (has_secretary()) {
      if (secretary_ != NULL) secretary_->::T3DB::KPBSecretary::Clear();
    }
    if (has_cheerleadingmgr()) {
      if (cheerleadingmgr_ != NULL) cheerleadingmgr_->::T3DB::KPBCheerleadingMgr::Clear();
    }
    if (has_rolestateinfo()) {
      if (rolestateinfo_ != NULL) rolestateinfo_->::T3DB::KPB_ROLE_STATE_INFO::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_wardrobe()) {
      if (wardrobe_ != NULL) wardrobe_->::T3DB::KPBWardrobe::Clear();
    }
    if (has_playervalue()) {
      if (playervalue_ != NULL) playervalue_->::T3DB::KPB_PLAYER_VALUE::Clear();
    }
    if (has_teamlogoinfo()) {
      if (teamlogoinfo_ != NULL) teamlogoinfo_->::T3DB::KPB_TeamLogo_Info::Clear();
    }
    if (has_achievementdata()) {
      if (achievementdata_ != NULL) achievementdata_->::T3DB::KPB_ACHIEVEMENT_DATA::Clear();
    }
    if (has_activeplayerdata()) {
      if (activeplayerdata_ != NULL) activeplayerdata_->::T3DB::KPB_ACTIVEPLAYER_DATA::Clear();
    }
    if (has_buffdatalistdb()) {
      if (buffdatalistdb_ != NULL) buffdatalistdb_->::T3DB::KPB_BUFF_DATA_LIST::Clear();
    }
    if (has_herounlockdatalist()) {
      if (herounlockdatalist_ != NULL) herounlockdatalist_->::T3DB::KPB_HERO_UNLOCK_DATA_LIST::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_SAVE_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .T3DB.KPBCustomData CustomData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_customdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_HeroDataList;
        break;
      }
      
      // required .T3DB.KPBHeroDataList HeroDataList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeroDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_herodatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ItemList;
        break;
      }
      
      // required .T3DB.KPBItemList ItemList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ItemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_MoneyMgr;
        break;
      }
      
      // required .T3DB.KPBMoneyMgr MoneyMgr = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MoneyMgr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_moneymgr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_UserPreferences;
        break;
      }
      
      // required .T3DB.KPBUserPreferences UserPreferences = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UserPreferences:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_userpreferences()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_CDTimerList;
        break;
      }
      
      // required .T3DB.KPBCDTimerList CDTimerList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CDTimerList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cdtimerlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_QuestList;
        break;
      }
      
      // required .T3DB.KPBQuestList QuestList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_QuestList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_HeroTrainingMgr;
        break;
      }
      
      // required .T3DB.KPBHeroTrainingMgr HeroTrainingMgr = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeroTrainingMgr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_herotrainingmgr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_MissionData;
        break;
      }
      
      // required .T3DB.KPBMissionData MissionData = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MissionData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_missiondata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_MakingMachine;
        break;
      }
      
      // required .T3DB.KPBMakingMachine MakingMachine = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MakingMachine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_makingmachine()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_Gym;
        break;
      }
      
      // required .T3DB.KPBGym Gym = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Gym:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gym()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_UpgradeQueue;
        break;
      }
      
      // required .T3DB.KPBUpgradeQueue UpgradeQueue = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_UpgradeQueue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upgradequeue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_BusinessStreet;
        break;
      }
      
      // required .T3DB.KPBBusinessStreet BusinessStreet = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BusinessStreet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_businessstreet()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_Secretary;
        break;
      }
      
      // required .T3DB.KPBSecretary Secretary = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Secretary:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_secretary()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_CheerleadingMgr;
        break;
      }
      
      // required .T3DB.KPBCheerleadingMgr CheerleadingMgr = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CheerleadingMgr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cheerleadingmgr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_RoleStateInfo;
        break;
      }
      
      // required .T3DB.KPB_ROLE_STATE_INFO RoleStateInfo = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_RoleStateInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rolestateinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_Wardrobe;
        break;
      }
      
      // required .T3DB.KPBWardrobe Wardrobe = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Wardrobe:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wardrobe()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_PlayerValue;
        break;
      }
      
      // required .T3DB.KPB_PLAYER_VALUE PlayerValue = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PlayerValue:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playervalue()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_TeamLogoInfo;
        break;
      }
      
      // required .T3DB.KPB_TeamLogo_Info TeamLogoInfo = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TeamLogoInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_teamlogoinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_AchievementData;
        break;
      }
      
      // required .T3DB.KPB_ACHIEVEMENT_DATA AchievementData = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AchievementData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_achievementdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_ActivePlayerData;
        break;
      }
      
      // required .T3DB.KPB_ACTIVEPLAYER_DATA ActivePlayerData = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActivePlayerData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activeplayerdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_BuffDataListDB;
        break;
      }
      
      // required .T3DB.KPB_BUFF_DATA_LIST BuffDataListDB = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_BuffDataListDB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_buffdatalistdb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_HeroUnlockDataList;
        break;
      }
      
      // required .T3DB.KPB_HERO_UNLOCK_DATA_LIST HeroUnlockDataList = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeroUnlockDataList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_herounlockdatalist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_SAVE_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .T3DB.KPBCustomData CustomData = 1;
  if (has_customdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->customdata(), output);
  }
  
  // required .T3DB.KPBHeroDataList HeroDataList = 2;
  if (has_herodatalist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->herodatalist(), output);
  }
  
  // required .T3DB.KPBItemList ItemList = 3;
  if (has_itemlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->itemlist(), output);
  }
  
  // required .T3DB.KPBMoneyMgr MoneyMgr = 4;
  if (has_moneymgr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->moneymgr(), output);
  }
  
  // required .T3DB.KPBUserPreferences UserPreferences = 5;
  if (has_userpreferences()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->userpreferences(), output);
  }
  
  // required .T3DB.KPBCDTimerList CDTimerList = 6;
  if (has_cdtimerlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->cdtimerlist(), output);
  }
  
  // required .T3DB.KPBQuestList QuestList = 7;
  if (has_questlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->questlist(), output);
  }
  
  // required .T3DB.KPBHeroTrainingMgr HeroTrainingMgr = 8;
  if (has_herotrainingmgr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->herotrainingmgr(), output);
  }
  
  // required .T3DB.KPBMissionData MissionData = 9;
  if (has_missiondata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->missiondata(), output);
  }
  
  // required .T3DB.KPBMakingMachine MakingMachine = 10;
  if (has_makingmachine()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->makingmachine(), output);
  }
  
  // required .T3DB.KPBGym Gym = 11;
  if (has_gym()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->gym(), output);
  }
  
  // required .T3DB.KPBUpgradeQueue UpgradeQueue = 12;
  if (has_upgradequeue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->upgradequeue(), output);
  }
  
  // required .T3DB.KPBBusinessStreet BusinessStreet = 13;
  if (has_businessstreet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->businessstreet(), output);
  }
  
  // required .T3DB.KPBSecretary Secretary = 14;
  if (has_secretary()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->secretary(), output);
  }
  
  // required .T3DB.KPBCheerleadingMgr CheerleadingMgr = 15;
  if (has_cheerleadingmgr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->cheerleadingmgr(), output);
  }
  
  // required .T3DB.KPB_ROLE_STATE_INFO RoleStateInfo = 16;
  if (has_rolestateinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->rolestateinfo(), output);
  }
  
  // required .T3DB.KPBWardrobe Wardrobe = 17;
  if (has_wardrobe()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->wardrobe(), output);
  }
  
  // required .T3DB.KPB_PLAYER_VALUE PlayerValue = 18;
  if (has_playervalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->playervalue(), output);
  }
  
  // required .T3DB.KPB_TeamLogo_Info TeamLogoInfo = 19;
  if (has_teamlogoinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->teamlogoinfo(), output);
  }
  
  // required .T3DB.KPB_ACHIEVEMENT_DATA AchievementData = 20;
  if (has_achievementdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->achievementdata(), output);
  }
  
  // required .T3DB.KPB_ACTIVEPLAYER_DATA ActivePlayerData = 21;
  if (has_activeplayerdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->activeplayerdata(), output);
  }
  
  // required .T3DB.KPB_BUFF_DATA_LIST BuffDataListDB = 22;
  if (has_buffdatalistdb()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->buffdatalistdb(), output);
  }
  
  // required .T3DB.KPB_HERO_UNLOCK_DATA_LIST HeroUnlockDataList = 23;
  if (has_herounlockdatalist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->herounlockdatalist(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_SAVE_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .T3DB.KPBCustomData CustomData = 1;
  if (has_customdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->customdata(), target);
  }
  
  // required .T3DB.KPBHeroDataList HeroDataList = 2;
  if (has_herodatalist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->herodatalist(), target);
  }
  
  // required .T3DB.KPBItemList ItemList = 3;
  if (has_itemlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->itemlist(), target);
  }
  
  // required .T3DB.KPBMoneyMgr MoneyMgr = 4;
  if (has_moneymgr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->moneymgr(), target);
  }
  
  // required .T3DB.KPBUserPreferences UserPreferences = 5;
  if (has_userpreferences()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->userpreferences(), target);
  }
  
  // required .T3DB.KPBCDTimerList CDTimerList = 6;
  if (has_cdtimerlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->cdtimerlist(), target);
  }
  
  // required .T3DB.KPBQuestList QuestList = 7;
  if (has_questlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->questlist(), target);
  }
  
  // required .T3DB.KPBHeroTrainingMgr HeroTrainingMgr = 8;
  if (has_herotrainingmgr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->herotrainingmgr(), target);
  }
  
  // required .T3DB.KPBMissionData MissionData = 9;
  if (has_missiondata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->missiondata(), target);
  }
  
  // required .T3DB.KPBMakingMachine MakingMachine = 10;
  if (has_makingmachine()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->makingmachine(), target);
  }
  
  // required .T3DB.KPBGym Gym = 11;
  if (has_gym()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->gym(), target);
  }
  
  // required .T3DB.KPBUpgradeQueue UpgradeQueue = 12;
  if (has_upgradequeue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->upgradequeue(), target);
  }
  
  // required .T3DB.KPBBusinessStreet BusinessStreet = 13;
  if (has_businessstreet()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->businessstreet(), target);
  }
  
  // required .T3DB.KPBSecretary Secretary = 14;
  if (has_secretary()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->secretary(), target);
  }
  
  // required .T3DB.KPBCheerleadingMgr CheerleadingMgr = 15;
  if (has_cheerleadingmgr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->cheerleadingmgr(), target);
  }
  
  // required .T3DB.KPB_ROLE_STATE_INFO RoleStateInfo = 16;
  if (has_rolestateinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->rolestateinfo(), target);
  }
  
  // required .T3DB.KPBWardrobe Wardrobe = 17;
  if (has_wardrobe()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->wardrobe(), target);
  }
  
  // required .T3DB.KPB_PLAYER_VALUE PlayerValue = 18;
  if (has_playervalue()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->playervalue(), target);
  }
  
  // required .T3DB.KPB_TeamLogo_Info TeamLogoInfo = 19;
  if (has_teamlogoinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->teamlogoinfo(), target);
  }
  
  // required .T3DB.KPB_ACHIEVEMENT_DATA AchievementData = 20;
  if (has_achievementdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->achievementdata(), target);
  }
  
  // required .T3DB.KPB_ACTIVEPLAYER_DATA ActivePlayerData = 21;
  if (has_activeplayerdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->activeplayerdata(), target);
  }
  
  // required .T3DB.KPB_BUFF_DATA_LIST BuffDataListDB = 22;
  if (has_buffdatalistdb()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->buffdatalistdb(), target);
  }
  
  // required .T3DB.KPB_HERO_UNLOCK_DATA_LIST HeroUnlockDataList = 23;
  if (has_herounlockdatalist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->herounlockdatalist(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_SAVE_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .T3DB.KPBCustomData CustomData = 1;
    if (has_customdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->customdata());
    }
    
    // required .T3DB.KPBHeroDataList HeroDataList = 2;
    if (has_herodatalist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herodatalist());
    }
    
    // required .T3DB.KPBItemList ItemList = 3;
    if (has_itemlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->itemlist());
    }
    
    // required .T3DB.KPBMoneyMgr MoneyMgr = 4;
    if (has_moneymgr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->moneymgr());
    }
    
    // required .T3DB.KPBUserPreferences UserPreferences = 5;
    if (has_userpreferences()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->userpreferences());
    }
    
    // required .T3DB.KPBCDTimerList CDTimerList = 6;
    if (has_cdtimerlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cdtimerlist());
    }
    
    // required .T3DB.KPBQuestList QuestList = 7;
    if (has_questlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questlist());
    }
    
    // required .T3DB.KPBHeroTrainingMgr HeroTrainingMgr = 8;
    if (has_herotrainingmgr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herotrainingmgr());
    }
    
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required .T3DB.KPBMissionData MissionData = 9;
    if (has_missiondata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->missiondata());
    }
    
    // required .T3DB.KPBMakingMachine MakingMachine = 10;
    if (has_makingmachine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->makingmachine());
    }
    
    // required .T3DB.KPBGym Gym = 11;
    if (has_gym()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gym());
    }
    
    // required .T3DB.KPBUpgradeQueue UpgradeQueue = 12;
    if (has_upgradequeue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upgradequeue());
    }
    
    // required .T3DB.KPBBusinessStreet BusinessStreet = 13;
    if (has_businessstreet()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->businessstreet());
    }
    
    // required .T3DB.KPBSecretary Secretary = 14;
    if (has_secretary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->secretary());
    }
    
    // required .T3DB.KPBCheerleadingMgr CheerleadingMgr = 15;
    if (has_cheerleadingmgr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cheerleadingmgr());
    }
    
    // required .T3DB.KPB_ROLE_STATE_INFO RoleStateInfo = 16;
    if (has_rolestateinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rolestateinfo());
    }
    
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required .T3DB.KPBWardrobe Wardrobe = 17;
    if (has_wardrobe()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wardrobe());
    }
    
    // required .T3DB.KPB_PLAYER_VALUE PlayerValue = 18;
    if (has_playervalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playervalue());
    }
    
    // required .T3DB.KPB_TeamLogo_Info TeamLogoInfo = 19;
    if (has_teamlogoinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->teamlogoinfo());
    }
    
    // required .T3DB.KPB_ACHIEVEMENT_DATA AchievementData = 20;
    if (has_achievementdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->achievementdata());
    }
    
    // required .T3DB.KPB_ACTIVEPLAYER_DATA ActivePlayerData = 21;
    if (has_activeplayerdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activeplayerdata());
    }
    
    // required .T3DB.KPB_BUFF_DATA_LIST BuffDataListDB = 22;
    if (has_buffdatalistdb()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->buffdatalistdb());
    }
    
    // required .T3DB.KPB_HERO_UNLOCK_DATA_LIST HeroUnlockDataList = 23;
    if (has_herounlockdatalist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herounlockdatalist());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_SAVE_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_SAVE_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_SAVE_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_SAVE_DATA::MergeFrom(const KPB_SAVE_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_customdata()) {
      mutable_customdata()->::T3DB::KPBCustomData::MergeFrom(from.customdata());
    }
    if (from.has_herodatalist()) {
      mutable_herodatalist()->::T3DB::KPBHeroDataList::MergeFrom(from.herodatalist());
    }
    if (from.has_itemlist()) {
      mutable_itemlist()->::T3DB::KPBItemList::MergeFrom(from.itemlist());
    }
    if (from.has_moneymgr()) {
      mutable_moneymgr()->::T3DB::KPBMoneyMgr::MergeFrom(from.moneymgr());
    }
    if (from.has_userpreferences()) {
      mutable_userpreferences()->::T3DB::KPBUserPreferences::MergeFrom(from.userpreferences());
    }
    if (from.has_cdtimerlist()) {
      mutable_cdtimerlist()->::T3DB::KPBCDTimerList::MergeFrom(from.cdtimerlist());
    }
    if (from.has_questlist()) {
      mutable_questlist()->::T3DB::KPBQuestList::MergeFrom(from.questlist());
    }
    if (from.has_herotrainingmgr()) {
      mutable_herotrainingmgr()->::T3DB::KPBHeroTrainingMgr::MergeFrom(from.herotrainingmgr());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_missiondata()) {
      mutable_missiondata()->::T3DB::KPBMissionData::MergeFrom(from.missiondata());
    }
    if (from.has_makingmachine()) {
      mutable_makingmachine()->::T3DB::KPBMakingMachine::MergeFrom(from.makingmachine());
    }
    if (from.has_gym()) {
      mutable_gym()->::T3DB::KPBGym::MergeFrom(from.gym());
    }
    if (from.has_upgradequeue()) {
      mutable_upgradequeue()->::T3DB::KPBUpgradeQueue::MergeFrom(from.upgradequeue());
    }
    if (from.has_businessstreet()) {
      mutable_businessstreet()->::T3DB::KPBBusinessStreet::MergeFrom(from.businessstreet());
    }
    if (from.has_secretary()) {
      mutable_secretary()->::T3DB::KPBSecretary::MergeFrom(from.secretary());
    }
    if (from.has_cheerleadingmgr()) {
      mutable_cheerleadingmgr()->::T3DB::KPBCheerleadingMgr::MergeFrom(from.cheerleadingmgr());
    }
    if (from.has_rolestateinfo()) {
      mutable_rolestateinfo()->::T3DB::KPB_ROLE_STATE_INFO::MergeFrom(from.rolestateinfo());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wardrobe()) {
      mutable_wardrobe()->::T3DB::KPBWardrobe::MergeFrom(from.wardrobe());
    }
    if (from.has_playervalue()) {
      mutable_playervalue()->::T3DB::KPB_PLAYER_VALUE::MergeFrom(from.playervalue());
    }
    if (from.has_teamlogoinfo()) {
      mutable_teamlogoinfo()->::T3DB::KPB_TeamLogo_Info::MergeFrom(from.teamlogoinfo());
    }
    if (from.has_achievementdata()) {
      mutable_achievementdata()->::T3DB::KPB_ACHIEVEMENT_DATA::MergeFrom(from.achievementdata());
    }
    if (from.has_activeplayerdata()) {
      mutable_activeplayerdata()->::T3DB::KPB_ACTIVEPLAYER_DATA::MergeFrom(from.activeplayerdata());
    }
    if (from.has_buffdatalistdb()) {
      mutable_buffdatalistdb()->::T3DB::KPB_BUFF_DATA_LIST::MergeFrom(from.buffdatalistdb());
    }
    if (from.has_herounlockdatalist()) {
      mutable_herounlockdatalist()->::T3DB::KPB_HERO_UNLOCK_DATA_LIST::MergeFrom(from.herounlockdatalist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_SAVE_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_SAVE_DATA::CopyFrom(const KPB_SAVE_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_SAVE_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x007fffff) != 0x007fffff) return false;
  
  if (has_customdata()) {
    if (!this->customdata().IsInitialized()) return false;
  }
  if (has_herodatalist()) {
    if (!this->herodatalist().IsInitialized()) return false;
  }
  if (has_itemlist()) {
    if (!this->itemlist().IsInitialized()) return false;
  }
  if (has_moneymgr()) {
    if (!this->moneymgr().IsInitialized()) return false;
  }
  if (has_userpreferences()) {
    if (!this->userpreferences().IsInitialized()) return false;
  }
  if (has_cdtimerlist()) {
    if (!this->cdtimerlist().IsInitialized()) return false;
  }
  if (has_questlist()) {
    if (!this->questlist().IsInitialized()) return false;
  }
  if (has_herotrainingmgr()) {
    if (!this->herotrainingmgr().IsInitialized()) return false;
  }
  if (has_missiondata()) {
    if (!this->missiondata().IsInitialized()) return false;
  }
  if (has_makingmachine()) {
    if (!this->makingmachine().IsInitialized()) return false;
  }
  if (has_gym()) {
    if (!this->gym().IsInitialized()) return false;
  }
  if (has_upgradequeue()) {
    if (!this->upgradequeue().IsInitialized()) return false;
  }
  if (has_businessstreet()) {
    if (!this->businessstreet().IsInitialized()) return false;
  }
  if (has_secretary()) {
    if (!this->secretary().IsInitialized()) return false;
  }
  if (has_cheerleadingmgr()) {
    if (!this->cheerleadingmgr().IsInitialized()) return false;
  }
  if (has_rolestateinfo()) {
    if (!this->rolestateinfo().IsInitialized()) return false;
  }
  if (has_wardrobe()) {
    if (!this->wardrobe().IsInitialized()) return false;
  }
  if (has_playervalue()) {
    if (!this->playervalue().IsInitialized()) return false;
  }
  if (has_teamlogoinfo()) {
    if (!this->teamlogoinfo().IsInitialized()) return false;
  }
  if (has_achievementdata()) {
    if (!this->achievementdata().IsInitialized()) return false;
  }
  if (has_activeplayerdata()) {
    if (!this->activeplayerdata().IsInitialized()) return false;
  }
  if (has_buffdatalistdb()) {
    if (!this->buffdatalistdb().IsInitialized()) return false;
  }
  if (has_herounlockdatalist()) {
    if (!this->herounlockdatalist().IsInitialized()) return false;
  }
  return true;
}

void KPB_SAVE_DATA::Swap(KPB_SAVE_DATA* other) {
  if (other != this) {
    std::swap(customdata_, other->customdata_);
    std::swap(herodatalist_, other->herodatalist_);
    std::swap(itemlist_, other->itemlist_);
    std::swap(moneymgr_, other->moneymgr_);
    std::swap(userpreferences_, other->userpreferences_);
    std::swap(cdtimerlist_, other->cdtimerlist_);
    std::swap(questlist_, other->questlist_);
    std::swap(herotrainingmgr_, other->herotrainingmgr_);
    std::swap(missiondata_, other->missiondata_);
    std::swap(makingmachine_, other->makingmachine_);
    std::swap(gym_, other->gym_);
    std::swap(upgradequeue_, other->upgradequeue_);
    std::swap(businessstreet_, other->businessstreet_);
    std::swap(secretary_, other->secretary_);
    std::swap(cheerleadingmgr_, other->cheerleadingmgr_);
    std::swap(rolestateinfo_, other->rolestateinfo_);
    std::swap(wardrobe_, other->wardrobe_);
    std::swap(playervalue_, other->playervalue_);
    std::swap(teamlogoinfo_, other->teamlogoinfo_);
    std::swap(achievementdata_, other->achievementdata_);
    std::swap(activeplayerdata_, other->activeplayerdata_);
    std::swap(buffdatalistdb_, other->buffdatalistdb_);
    std::swap(herounlockdatalist_, other->herounlockdatalist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_SAVE_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_SAVE_DATA_descriptor_;
  metadata.reflection = KPB_SAVE_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_ACTIVE_PROC::kValueFieldNumber;
const int KPB_ACTIVE_PROC::kFinishedFieldNumber;
#endif  // !_MSC_VER

KPB_ACTIVE_PROC::KPB_ACTIVE_PROC()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_ACTIVE_PROC::InitAsDefaultInstance() {
}

KPB_ACTIVE_PROC::KPB_ACTIVE_PROC(const KPB_ACTIVE_PROC& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_ACTIVE_PROC::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0u;
  finished_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_ACTIVE_PROC::~KPB_ACTIVE_PROC() {
  SharedDtor();
}

void KPB_ACTIVE_PROC::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_ACTIVE_PROC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_ACTIVE_PROC::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_ACTIVE_PROC_descriptor_;
}

const KPB_ACTIVE_PROC& KPB_ACTIVE_PROC::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_ACTIVE_PROC* KPB_ACTIVE_PROC::default_instance_ = NULL;

KPB_ACTIVE_PROC* KPB_ACTIVE_PROC::New() const {
  return new KPB_ACTIVE_PROC;
}

void KPB_ACTIVE_PROC::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0u;
    finished_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_ACTIVE_PROC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 Value = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Finished;
        break;
      }
      
      // required uint32 Finished = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Finished:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &finished_)));
          set_has_finished();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_ACTIVE_PROC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 Value = 1 [default = 0];
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }
  
  // required uint32 Finished = 2 [default = 0];
  if (has_finished()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->finished(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_ACTIVE_PROC::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 Value = 1 [default = 0];
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }
  
  // required uint32 Finished = 2 [default = 0];
  if (has_finished()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->finished(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_ACTIVE_PROC::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 Value = 1 [default = 0];
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }
    
    // required uint32 Finished = 2 [default = 0];
    if (has_finished()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->finished());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_ACTIVE_PROC::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_ACTIVE_PROC* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_ACTIVE_PROC*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_ACTIVE_PROC::MergeFrom(const KPB_ACTIVE_PROC& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_finished()) {
      set_finished(from.finished());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_ACTIVE_PROC::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_ACTIVE_PROC::CopyFrom(const KPB_ACTIVE_PROC& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_ACTIVE_PROC::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KPB_ACTIVE_PROC::Swap(KPB_ACTIVE_PROC* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(finished_, other->finished_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_ACTIVE_PROC::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_ACTIVE_PROC_descriptor_;
  metadata.reflection = KPB_ACTIVE_PROC_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_ACTIVEPLAYER_DATA::kCurActivePointFieldNumber;
const int KPB_ACTIVEPLAYER_DATA::kAwardAlreadyGetFieldNumber;
const int KPB_ACTIVEPLAYER_DATA::kActiveProcFieldNumber;
const int KPB_ACTIVEPLAYER_DATA::kCostFatiguePointFieldNumber;
const int KPB_ACTIVEPLAYER_DATA::kOnlineFrameFieldNumber;
#endif  // !_MSC_VER

KPB_ACTIVEPLAYER_DATA::KPB_ACTIVEPLAYER_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_ACTIVEPLAYER_DATA::InitAsDefaultInstance() {
}

KPB_ACTIVEPLAYER_DATA::KPB_ACTIVEPLAYER_DATA(const KPB_ACTIVEPLAYER_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_ACTIVEPLAYER_DATA::SharedCtor() {
  _cached_size_ = 0;
  curactivepoint_ = 0u;
  costfatiguepoint_ = 0u;
  onlineframe_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_ACTIVEPLAYER_DATA::~KPB_ACTIVEPLAYER_DATA() {
  SharedDtor();
}

void KPB_ACTIVEPLAYER_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_ACTIVEPLAYER_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_ACTIVEPLAYER_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_ACTIVEPLAYER_DATA_descriptor_;
}

const KPB_ACTIVEPLAYER_DATA& KPB_ACTIVEPLAYER_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_ACTIVEPLAYER_DATA* KPB_ACTIVEPLAYER_DATA::default_instance_ = NULL;

KPB_ACTIVEPLAYER_DATA* KPB_ACTIVEPLAYER_DATA::New() const {
  return new KPB_ACTIVEPLAYER_DATA;
}

void KPB_ACTIVEPLAYER_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curactivepoint_ = 0u;
    costfatiguepoint_ = 0u;
    onlineframe_ = 0u;
  }
  awardalreadyget_.Clear();
  activeproc_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_ACTIVEPLAYER_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 CurActivePoint = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curactivepoint_)));
          set_has_curactivepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_AwardAlreadyGet;
        break;
      }
      
      // repeated uint32 AwardAlreadyGet = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_AwardAlreadyGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_awardalreadyget())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_awardalreadyget())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ActiveProc;
        break;
      }
      
      // repeated .T3DB.KPB_ACTIVE_PROC ActiveProc = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ActiveProc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activeproc()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ActiveProc;
        if (input->ExpectTag(32)) goto parse_CostFatiguePoint;
        break;
      }
      
      // required uint32 CostFatiguePoint = 4 [default = 0];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CostFatiguePoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &costfatiguepoint_)));
          set_has_costfatiguepoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_OnlineFrame;
        break;
      }
      
      // required uint32 OnlineFrame = 5 [default = 0];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_OnlineFrame:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlineframe_)));
          set_has_onlineframe();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_ACTIVEPLAYER_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 CurActivePoint = 1 [default = 0];
  if (has_curactivepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curactivepoint(), output);
  }
  
  // repeated uint32 AwardAlreadyGet = 2 [packed = true];
  if (this->awardalreadyget_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_awardalreadyget_cached_byte_size_);
  }
  for (int i = 0; i < this->awardalreadyget_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->awardalreadyget(i), output);
  }
  
  // repeated .T3DB.KPB_ACTIVE_PROC ActiveProc = 3;
  for (int i = 0; i < this->activeproc_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->activeproc(i), output);
  }
  
  // required uint32 CostFatiguePoint = 4 [default = 0];
  if (has_costfatiguepoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->costfatiguepoint(), output);
  }
  
  // required uint32 OnlineFrame = 5 [default = 0];
  if (has_onlineframe()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->onlineframe(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_ACTIVEPLAYER_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 CurActivePoint = 1 [default = 0];
  if (has_curactivepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curactivepoint(), target);
  }
  
  // repeated uint32 AwardAlreadyGet = 2 [packed = true];
  if (this->awardalreadyget_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _awardalreadyget_cached_byte_size_, target);
  }
  for (int i = 0; i < this->awardalreadyget_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->awardalreadyget(i), target);
  }
  
  // repeated .T3DB.KPB_ACTIVE_PROC ActiveProc = 3;
  for (int i = 0; i < this->activeproc_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->activeproc(i), target);
  }
  
  // required uint32 CostFatiguePoint = 4 [default = 0];
  if (has_costfatiguepoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->costfatiguepoint(), target);
  }
  
  // required uint32 OnlineFrame = 5 [default = 0];
  if (has_onlineframe()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->onlineframe(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_ACTIVEPLAYER_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 CurActivePoint = 1 [default = 0];
    if (has_curactivepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curactivepoint());
    }
    
    // required uint32 CostFatiguePoint = 4 [default = 0];
    if (has_costfatiguepoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->costfatiguepoint());
    }
    
    // required uint32 OnlineFrame = 5 [default = 0];
    if (has_onlineframe()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlineframe());
    }
    
  }
  // repeated uint32 AwardAlreadyGet = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->awardalreadyget_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->awardalreadyget(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _awardalreadyget_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated .T3DB.KPB_ACTIVE_PROC ActiveProc = 3;
  total_size += 1 * this->activeproc_size();
  for (int i = 0; i < this->activeproc_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activeproc(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_ACTIVEPLAYER_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_ACTIVEPLAYER_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_ACTIVEPLAYER_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_ACTIVEPLAYER_DATA::MergeFrom(const KPB_ACTIVEPLAYER_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  awardalreadyget_.MergeFrom(from.awardalreadyget_);
  activeproc_.MergeFrom(from.activeproc_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curactivepoint()) {
      set_curactivepoint(from.curactivepoint());
    }
    if (from.has_costfatiguepoint()) {
      set_costfatiguepoint(from.costfatiguepoint());
    }
    if (from.has_onlineframe()) {
      set_onlineframe(from.onlineframe());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_ACTIVEPLAYER_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_ACTIVEPLAYER_DATA::CopyFrom(const KPB_ACTIVEPLAYER_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_ACTIVEPLAYER_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000019) != 0x00000019) return false;
  
  for (int i = 0; i < activeproc_size(); i++) {
    if (!this->activeproc(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_ACTIVEPLAYER_DATA::Swap(KPB_ACTIVEPLAYER_DATA* other) {
  if (other != this) {
    std::swap(curactivepoint_, other->curactivepoint_);
    awardalreadyget_.Swap(&other->awardalreadyget_);
    activeproc_.Swap(&other->activeproc_);
    std::swap(costfatiguepoint_, other->costfatiguepoint_);
    std::swap(onlineframe_, other->onlineframe_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_ACTIVEPLAYER_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_ACTIVEPLAYER_DATA_descriptor_;
  metadata.reflection = KPB_ACTIVEPLAYER_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_HERO_UNLOCK_DATA::kHeroTemplateIDFieldNumber;
const int KPB_HERO_UNLOCK_DATA::kUnLockTimeFieldNumber;
#endif  // !_MSC_VER

KPB_HERO_UNLOCK_DATA::KPB_HERO_UNLOCK_DATA()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_HERO_UNLOCK_DATA::InitAsDefaultInstance() {
}

KPB_HERO_UNLOCK_DATA::KPB_HERO_UNLOCK_DATA(const KPB_HERO_UNLOCK_DATA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_HERO_UNLOCK_DATA::SharedCtor() {
  _cached_size_ = 0;
  herotemplateid_ = 0u;
  unlocktime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_HERO_UNLOCK_DATA::~KPB_HERO_UNLOCK_DATA() {
  SharedDtor();
}

void KPB_HERO_UNLOCK_DATA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_HERO_UNLOCK_DATA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_HERO_UNLOCK_DATA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_HERO_UNLOCK_DATA_descriptor_;
}

const KPB_HERO_UNLOCK_DATA& KPB_HERO_UNLOCK_DATA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_HERO_UNLOCK_DATA* KPB_HERO_UNLOCK_DATA::default_instance_ = NULL;

KPB_HERO_UNLOCK_DATA* KPB_HERO_UNLOCK_DATA::New() const {
  return new KPB_HERO_UNLOCK_DATA;
}

void KPB_HERO_UNLOCK_DATA::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    herotemplateid_ = 0u;
    unlocktime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_HERO_UNLOCK_DATA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 HeroTemplateID = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &herotemplateid_)));
          set_has_herotemplateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_UnLockTime;
        break;
      }
      
      // required uint32 UnLockTime = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_UnLockTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &unlocktime_)));
          set_has_unlocktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_HERO_UNLOCK_DATA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 HeroTemplateID = 1 [default = 0];
  if (has_herotemplateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->herotemplateid(), output);
  }
  
  // required uint32 UnLockTime = 2 [default = 0];
  if (has_unlocktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->unlocktime(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_HERO_UNLOCK_DATA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 HeroTemplateID = 1 [default = 0];
  if (has_herotemplateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->herotemplateid(), target);
  }
  
  // required uint32 UnLockTime = 2 [default = 0];
  if (has_unlocktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->unlocktime(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_HERO_UNLOCK_DATA::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 HeroTemplateID = 1 [default = 0];
    if (has_herotemplateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->herotemplateid());
    }
    
    // required uint32 UnLockTime = 2 [default = 0];
    if (has_unlocktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->unlocktime());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_HERO_UNLOCK_DATA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_HERO_UNLOCK_DATA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_HERO_UNLOCK_DATA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_HERO_UNLOCK_DATA::MergeFrom(const KPB_HERO_UNLOCK_DATA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_herotemplateid()) {
      set_herotemplateid(from.herotemplateid());
    }
    if (from.has_unlocktime()) {
      set_unlocktime(from.unlocktime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_HERO_UNLOCK_DATA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_HERO_UNLOCK_DATA::CopyFrom(const KPB_HERO_UNLOCK_DATA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_HERO_UNLOCK_DATA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void KPB_HERO_UNLOCK_DATA::Swap(KPB_HERO_UNLOCK_DATA* other) {
  if (other != this) {
    std::swap(herotemplateid_, other->herotemplateid_);
    std::swap(unlocktime_, other->unlocktime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_HERO_UNLOCK_DATA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_HERO_UNLOCK_DATA_descriptor_;
  metadata.reflection = KPB_HERO_UNLOCK_DATA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KPB_HERO_UNLOCK_DATA_LIST::kHeroUnlockDataFieldNumber;
#endif  // !_MSC_VER

KPB_HERO_UNLOCK_DATA_LIST::KPB_HERO_UNLOCK_DATA_LIST()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KPB_HERO_UNLOCK_DATA_LIST::InitAsDefaultInstance() {
}

KPB_HERO_UNLOCK_DATA_LIST::KPB_HERO_UNLOCK_DATA_LIST(const KPB_HERO_UNLOCK_DATA_LIST& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KPB_HERO_UNLOCK_DATA_LIST::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KPB_HERO_UNLOCK_DATA_LIST::~KPB_HERO_UNLOCK_DATA_LIST() {
  SharedDtor();
}

void KPB_HERO_UNLOCK_DATA_LIST::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KPB_HERO_UNLOCK_DATA_LIST::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KPB_HERO_UNLOCK_DATA_LIST::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KPB_HERO_UNLOCK_DATA_LIST_descriptor_;
}

const KPB_HERO_UNLOCK_DATA_LIST& KPB_HERO_UNLOCK_DATA_LIST::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_t3db_2eproto();  return *default_instance_;
}

KPB_HERO_UNLOCK_DATA_LIST* KPB_HERO_UNLOCK_DATA_LIST::default_instance_ = NULL;

KPB_HERO_UNLOCK_DATA_LIST* KPB_HERO_UNLOCK_DATA_LIST::New() const {
  return new KPB_HERO_UNLOCK_DATA_LIST;
}

void KPB_HERO_UNLOCK_DATA_LIST::Clear() {
  herounlockdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KPB_HERO_UNLOCK_DATA_LIST::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .T3DB.KPB_HERO_UNLOCK_DATA HeroUnlockData = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_HeroUnlockData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_herounlockdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_HeroUnlockData;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KPB_HERO_UNLOCK_DATA_LIST::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .T3DB.KPB_HERO_UNLOCK_DATA HeroUnlockData = 1;
  for (int i = 0; i < this->herounlockdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->herounlockdata(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KPB_HERO_UNLOCK_DATA_LIST::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .T3DB.KPB_HERO_UNLOCK_DATA HeroUnlockData = 1;
  for (int i = 0; i < this->herounlockdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->herounlockdata(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KPB_HERO_UNLOCK_DATA_LIST::ByteSize() const {
  int total_size = 0;
  
  // repeated .T3DB.KPB_HERO_UNLOCK_DATA HeroUnlockData = 1;
  total_size += 1 * this->herounlockdata_size();
  for (int i = 0; i < this->herounlockdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->herounlockdata(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KPB_HERO_UNLOCK_DATA_LIST::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KPB_HERO_UNLOCK_DATA_LIST* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KPB_HERO_UNLOCK_DATA_LIST*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KPB_HERO_UNLOCK_DATA_LIST::MergeFrom(const KPB_HERO_UNLOCK_DATA_LIST& from) {
  GOOGLE_CHECK_NE(&from, this);
  herounlockdata_.MergeFrom(from.herounlockdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KPB_HERO_UNLOCK_DATA_LIST::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KPB_HERO_UNLOCK_DATA_LIST::CopyFrom(const KPB_HERO_UNLOCK_DATA_LIST& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPB_HERO_UNLOCK_DATA_LIST::IsInitialized() const {
  
  for (int i = 0; i < herounlockdata_size(); i++) {
    if (!this->herounlockdata(i).IsInitialized()) return false;
  }
  return true;
}

void KPB_HERO_UNLOCK_DATA_LIST::Swap(KPB_HERO_UNLOCK_DATA_LIST* other) {
  if (other != this) {
    herounlockdata_.Swap(&other->herounlockdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KPB_HERO_UNLOCK_DATA_LIST::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KPB_HERO_UNLOCK_DATA_LIST_descriptor_;
  metadata.reflection = KPB_HERO_UNLOCK_DATA_LIST_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace T3DB

// @@protoc_insertion_point(global_scope)
